{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./node_modules/strophe.js/strophe.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./node_modules/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/js-utils/index.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/(webpack)/buildin/global.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./node_modules/bowser/src/bowser.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/./node_modules/process/browser.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./node_modules/async/lib/async.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/DTMF/JitsiDTMFManager.js","webpack://JitsiMeetJS/./modules/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/TalkMutedDetection.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedNotification.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/rttmonitor/rttmonitor.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/(webpack)/buildin/module.js","webpack://JitsiMeetJS/(webpack)/buildin/amd-define.js","webpack://JitsiMeetJS/(webpack)/buildin/amd-options.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/./node_modules/strophejs-plugin-disco/lib/strophe.disco.js","webpack://JitsiMeetJS/./node_modules/timers-browserify/main.js","webpack://JitsiMeetJS/./node_modules/setimmediate/setImmediate.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/array-equals.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONFERENCE_SETUP_FAILED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","JINGLE_ERROR","JINGLE_FATAL_ERROR","KICKED","LOCAL_ROLE_CHANGED","MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PEERCONNECTION_READY","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","requirejs","require","undef","main","req","makeMap","handlers","defined","waiting","config","defining","hasOwn","aps","slice","jsSuffixRegExp","hasProp","obj","prop","normalize","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","j","part","baseParts","split","map","starMap","length","nodeIdCompat","test","replace","charAt","concat","splice","join","makeRequire","relName","forceSync","args","arguments","push","apply","makeLoad","depName","callDep","Error","splitPrefix","prefix","index","indexOf","substring","makeRelParts","makeConfig","relParts","plugin","parts","relResourceName","f","pr","e","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","alt","setTimeout","cfg","_defined","jQuery","this","Function","func","_slice","Array","_concat","_args","isArray","arg","toString","elt","len","from","Number","Math","ceil","floor","forEach","thisArg","T","k","TypeError","O","kValue","keyStr","btoa","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","charCodeAt","isNaN","atob","String","fromCharCode","core_sha1","x","olda","oldb","oldc","oldd","olde","w","a","b","rol","safe_add","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","hash","y","lsw","num","cnt","str","bin","binb2str","binb2b64","binarray","triplet","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","str2binl","md5_cmn","q","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","hexdigest","binl2hex","binl2str","utf16to8","out","addCookies","cookies","cookieName","cookieObj","isObj","cookieValue","expires","domain","path","escape","unescape","document","cookie","SHA1","MD5","utils","Strophe","$build","attrs","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","blockquote","br","cite","em","img","li","ol","span","strong","ul","body","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","childNode","childNodes","nodeType","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","xmlTextNode","attr","setAttribute","xmlescape","text","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","createHtml","cssAttrs","cssName","cssValue","toLowerCase","getAttribute","cssText","createDocumentFragment","escapeNode","unescapeNode","getNodeFromJid","jid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","result","tree","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","options","matchBareFromJid","ignoreNamespaceFragment","matchBare","user","getNamespace","elNamespace","namespaceMatch","nsMatch","that","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","HTTP","websocket","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","random","addProtocolErrorHandler","status_code","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","iqtype","element","_sendRestart","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","statusChanged","err","_dataRecv","raw","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","mech","matched","authenticate","_no_auth_received","sortMechanismsByPriority","higher","swap","priority","_attemptSASLAuth","mechanism_found","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","_attemptLegacyAuth","_auth1_cb","to","challenge","iq","_auth2_cb","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_sasl_auth1_cb","_sasl_bind_cb","resource","jidNode","_sasl_session_cb","onFailure","now","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","iter","Hi","U","U_old","clientKey","serverKey","clientSignature","responseText","authMessage","attribMatch","substr","_quote","realm","host","digest_uri","cred","A1","A2","$msg","core","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","xml:lang","content","ver","xmpp:version","xmlns:xmpp","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","err_callback","reqStatus","_getRequestStatus","_hitError","xmpp:restart","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","self","primaryTimeout","secondaryTimeout","requestCompletedWithServerError","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","new_service","location","pathname","_buildStream","version","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","__webpack_exports__","AUTH_STATUS_CHANGED","AVATAR_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","_BrowserCapabilities__WEBPACK_IMPORTED_MODULE_0__","BrowserCapabilities","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","getLogger","transports","format","logger","setLogLevelById","setLevel","setLogLevel","_instances","__filename","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","userName","Settings","callStatsUserName","initBackend","callStatsID","callStatsSecret","swapUserNameAndAlias","callStatsAliasName","aliasName","applicationName","getWiFiStatsMethod","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","disableThirdPartyRequests","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","loadCallStatsAPI","callStatsConfIDNamespace","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","audioLevelsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","dispose","size","emit","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","values","iterator","next","done","callStats","stopCallStats","tpc","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","keys","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","confID","_getCallStatsConfID","_getAllCallStatsInstances","csInstances","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","statistics","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","cs","roomName","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","sendDominantSpeakerEvent","roomJid","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","sendActiveDeviceListEvent","devicesData","globalSet","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","stats","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","eventToLog","properties","_typeof","sendAnalytics","eventName","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferVideoCodec","codecName","payloadType","rtp","codec","payload","payloadTypes","payloads","payloadIndex","unshift","stripVideoCodec","removePts","rtxApts","item","rtxPts","fmtp","_toConsumableArray","keepPts","rtcpFb","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","GRANTED_PERMISSIONS","IS_SELECTED_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","_objectSpread","error_type","error_message","createConnectionStageReachedEvent","stage","source","createE2eRttEvent","participantId","region","rtt","participant_id","createFocusLeftEvent","createGetUserMediaEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","media_type","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createRttByRegionEvent","createTtfmEvent","AUDIO","VIDEO","usesAdapter","availableDevices","availableDevicesPollTimer","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","aspectRatio","height","ideal","max","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","getConstraints","um","audio","isNewStyleConstraintsSupported","isSafariWithVP8","isEdge","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","ENVIRONMENT","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","width","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","GlobalOnErrorHandler","callErrorHandler","bandwidth","firefox_fake_device","fake","desktopStream","_options$frameRate","chromeMediaSource","screen","chromeMediaSourceId","getTrackSSConstraints","desktopSharingFrameRate","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","audio_input_device_count","audio_output_device_count","video_input_device_count","video_output_device_count","device_id","device_group_id","groupId","device_kind","device_label","label","rtcUtils","RTCUtils","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","Listenable","_this","clearInterval","enumerateDevices","navigator","mediaDevices","then","initEnumerateDevicesWithCallback","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","srcObject","getStreamID","_ref","getTrackID","_ref2","isChromiumBased","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","defaultSetVideoSrc","_ref3","_ref4","MediaStream","videoTracks","audioTracks","_initPCConstraints","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","ds","updateKnownDevices","pds","devicesReceived","newDevices","mediaDeviceInfoToJSON","sort","facing","compareAvailableMediaDevices","supportsDeviceChangeEvent","addEventListener","setInterval","pcConstraints","googHighStartBitrate","googPayloadPadding","googScreencastMinBitrate","googCpuOveruseDetection","googCpuOveruseEncodeUsage","googCpuUnderuseThreshold","googCpuOveruseThreshold","useIPv6","googIPv6","p2pPcConstraints","disableSuspendVideo","googSuspendBelowMinBitrate","Promise","resolve","reject","getUserMedia","catch","umDevices","_this2","isSupported","supportsVideo","obtainStream","_parseDesktopSharingOptions","devices","includes","supportsMediaStreamConstructor","_getAudioAndVideoStreams","_getAudioAndVideoStreamsSeparately","streams","audioStream","videoStream","res","audioVideo","addTrack","desktop","_desktopStream","sourceType","track","MediaType","videoType","VideoType","DESKTOP","CAMERA","handleLocalStream","_this3","requestingDesktop","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","_this4","obtainDevices","context","successCallback","deviceGUM","errorCallback","_len","_key","_len2","_key2","_len3","_key3","desktopSharingExtensionExternalInstallation","desktopSharingSources","gumOptions","trackOptions","_this5","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","_this$_parseDesktopSh","exact","_newGetUserMediaWithConstraints","getTracks","applyConstraints","_newGetDesktopMedia","maybeRequestCaptureDevices","requestedCaptureDevices","newGetConstraints","_ref5","deviceType","mediaStream","release","url","revokeObjectURL","isDeviceChangeAvailable","deviceData","enable","origAttachMediaStream","getAudioOutputDevice","ex","callUnhandledRejectionHandler","promise","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","errHandler","CHROME_EXTENSION_GENERIC_ERROR","CHROME_EXTENSION_INSTALLATION_ERROR","CHROME_EXTENSION_USER_GESTURE_REQUIRED","CHROME_EXTENSION_USER_CANCELED","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","FIREFOX_EXTENSION_NEEDED","GENERAL","NOT_FOUND","PERMISSION_DENIED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","NO_DATA_FROM_SOURCE","peerConnectionIdCounter","rtcTrackIdCounter","createLocalTracks","tracksInfo","newTracks","trackInfo","safeCounterIncrement","localTrack","JitsiLocalTrack","rtcId","_newCreateLocalTracks","metaData","_track$getSettings","getSettings","RTC","conference","peerConnections","localTracks","_channel","_channelOpen","_lastN","_lastNEndpoints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_assertThisInitialized","_onDeviceListChanged","_updateAudioOutputForAudioTracks","addListener","newObtainAudioAndVideoPermissions","obtainAudioAndVideoPermissions","tracks","some","_isReceivingData","JitsiTrackErrors","eventType","isP2P","elSelector","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","setAudioOutputDevice","isUserStreamById","streamId","isDesktopSharingEnabled","_channelOpenListener","wsUrl","BridgeChannel","sendPinnedEndpointMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","_selectedEndpoint","sendSetLastNMessage","leavingLastNEndpoints","enteringLastNEndpoints","lastNEndpoints","oldLastNEndpoints","isInLastN","JitsiConferenceEvents","maxFrameHeight","ids","signaling","iceConfig","getPCConstraints","abtestSuspendVideo","setSuspendVideo","addPermanentProperties","supportsSdpSemantics","sdpSemantics","newConnection","TraceablePeerConnection","traceablePeerConnection","localVideo","getLocalTracks","localAudio","getType","remoteTracks","pcRemoteTracks","getRemoteTracks","mutePromises","audioTrack","mute","unmute","all","pos","owner","removedTracks","pcRemovedTracks","removeRemoteTracks","audioLevel","getTrackBySSRC","isAudioTrack","setAudioLevel","sendMessage","remoteAudioTracks","setAudioOutput","TRACK_ERROR_TO_MESSAGE_MAP","constraint","failedConstraintName","getResolutionFromFailedConstraint","constructor","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","tmp","mediaSSRCs","_loop","mediaindex","mid","linessrc","idx","containsSSRC","medias","mangle","newdesc","rtpmap","removeSessionLines","removeMediaLines","toJingle","thecreator","assrcline","creator","amidline","afmtpline","rtcpFbToJingle","crypto","required","ssrcMap","_step$value","_slicedToArray","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","rids","ridLine","ridInfo","senders","transportToJingle","sctpmap","sctpAttrs","number","setup","payloadtype","subtype","rtcpFbFromJingle","each","$","fromJingle","jingle","groups","contents","_","jingle2media","sctp","streamCount","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","EDGE","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","Chrome","Chromium","Opera","Firefox","Internet Explorer","Microsoft Edge","Safari","_detectElectron","userAgent","_detectNWJS","_detectReactNative","product","_detect","browserInfo","detectors","bowser","chrome","_detectChromiumBased","BrowserDetection","detectedBrowserInfo","_name","_version","compareVersions","compareVersion","BrowserDetection_BrowserDetection","browsers_namespaceObject","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","INCOMPATIBLE_SERVER_VERSIONS","PASSWORD_NOT_SUPPORTED","SETUP_FAILED","VIDEOBRIDGE_NOT_AVAILABLE","WRONG_STATE","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","removeEventListener","off","_callStatsUserName","_machineId","jitsi_meet_logger__WEBPACK_IMPORTED_MODULE_0__","_util_UsernameGenerator__WEBPACK_IMPORTED_MODULE_1__","_util_UsernameGenerator__WEBPACK_IMPORTED_MODULE_1___default","getLocalStorage","storage","localStorage","_p8","username","UsernameGenerator","generateUsername","machineId","jitsiMeetId","sessionId","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","ssrcNumber","attrName","ssrcObj","ssrcNum","primarySSRC","msid","findGroup","fecGroup","findGroupByPrimarySSRC","videoSSRCs","getSSRCs","ssrcGroupInfo","secondarySsrc","groupInfo","oldSSRC","newSSRC","SdpTransformWrap","rawSDP","parsedSDP","transform","_createClass","selectedMLine","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","_events","_maxListeners","isFunction","isObject","isUndefined","defaultMaxListeners","setMaxListeners","er","listeners","newListener","warned","trace","once","fired","g","list","position","listenerCount","evlistener","emitter","1080","order","fullhd","720","hd","960","360","640","vga","180","320","PENDING","ACTIVE","ENDED","_fabrics","wrtcFuncNames","fabricEvent","DEFAULT_REMOTE_USER","reportType","hasFabric","fabrics","backendInitialized","_addNewFabric","_emptyReportQueue","backend","atLeastOneFabric","defaultInstance","csInstance","defaultConfID","defaultPC","reportsQueue","report","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","_i","originalMethod","theArguments","debugMethods","_loop2","_i2","originalReportError","exception","configParams","CallStatsBackend","callstats","_traceAndCatchBackendCalls","userID","applicationVersion","getName","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","getConnectionPluginDefinition","base","_class","_base","_class2","_getPrototypeOf2","_inherits","ConnectionPluginListenable","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","_initStrophePlugins","bosh","conn","createConnection","caps","Caps","clientNode","initFeaturesList","ev","addFeature","disableRtx","supportsRtx","enableLipSync","rayo","_pingSupported","credentials","performance","statusStr","getStatusString","XMPPEvents","useStunTurn","p2p","getStunAndTurnCredentials","pingJid","getFeaturesAndIdentities","identities","PING","ping","startInterval","identity","speakerStatsComponentAddress","_onPrivateMessage","password","JitsiConnectionEvents","anonymousConnectionFailed","connectionFailed","lastErrorMsg","JitsiConnectionErrors","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","connectionHandler","attaching","_this$options$hosts","hosts","anonymousdomain","configDomain","hostname","mucNickname","roomjid","muc","useNicks","nick","emuc","createRoom","getLog","_this$connection$rayo","dial","isPingSupported","moderate","setMute","eject","sessions","disconnectListener","evType","jvb","iceServers","p2pStunServers","stunServers","iceTransportPolicy","initEmuc","initJingle","initStropheUtil","initPing","initRayo","initStropheLogger","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","room","jsonString","json","jsonMessage","parsedJson","tryParseJSONAndVerify","users","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","chromeExtInstalled","chromeExtUpdateRequired","gumFunction","ScreenObtainer","intChromeExtPromise","desktopSharingChromeDisabled","desktopSharingChromeExtId","desktopSharingFirefoxDisabled","_createObtainStreamMethod","isNWJS","JitsiMeetNW","obtainDesktopStream","jitsiError","isElectron","obtainScreenOnElectron","isOpera","supportsGetDisplayMedia","obtainScreenFromGetDisplayMedia","append","getWebStoreInstallUrl","initInlineInstalls","checkChromeExtInstalled","installed","updateRequired","initChromeExtension","obtainScreenFromExtension","obtainScreenOnFirefox","streamCallback","failCallback","obtainWebRTCScreen","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingChromeSources","streamType","onGetStreamResponse","_this$options","doGetStreamFromExtensionOptions","runtime","getStream","sources","lastError","doGetStreamFromExtension","alert","handleExternalInstall","webStoreInstallUrl","checkForChromeExtensionOnInterval","checkAgain","waitInterval","retries","currentRetries","interval","waitForExtensionAfterInstall","getDisplayMedia","getVersion","extVersion","minVersion","s1","s2","n1","n2","isUpdateRequired","desktopSharingChromeMinExtVersion","logDisabled_","deprecationWarnings_","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","extractVersion","uastring","expr","detectBrowser","mozGetUserMedia","webkitGetUserMedia","webkitRTCPeerConnection","shimCreateObjectURL","USER","ALPHANUM","randomElement","arr","randomHexDigit","randomHexString","randomAlphanumStr","DEFAULT_NOT_IN_LAST_N_TIMEOUT","DEFAULT_RTC_MUTE_TIMEOUT","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","_getVideoFrozenTimeout","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","_changeConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","getFocusRecordingUpdate","presence","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JingleSessionPC","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","signalingLayer","SignalingLayerImpl","modificationQueue","queue","_processQueueTasks","wasConnected","establishmentDuration","JingleSession","jingleContents","videoContents","actionName","state","JingleSessionState","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","enableFirefoxSimulcast","testing","enableLayerSuspension","createPeerConnection","onicecandidate","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","_assertNotEnded","iceConnectionState","signaling_state","reconnect","iceStarted","onnegotiationneeded","setChatRoom","isSelected","setIsSelected","finishedCallback","_renegotiate","localSDP","localDescription","ice","sdpMLineIndex","jcand","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","newJingleErrorHandler","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","_this6","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","generateRecvonlySsrc","jingleOffer","failure","_this7","setOfferAnswerCycle","sendSessionAccept","_this8","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","jingleAnswer","jingleOfferAnswerIq","_this9","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","notifyMySSRCUpdate","_onJingleFatalError","jingleOfferElem","_this10","originalOffer","clone","remove","sendTransportAccept","_this11","accept","responder","responderJid","videoTransferActive","newSendersValue","sessionModify","_this12","transportAccept","medialines","transportReject","sendSessionTerminate","sessionTerminate","reasonDescription","terminate","reasonCondition","reasonText","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","_addOrRemoveRemoteStream","isAdd","_this13","logPrefix","readSsrcInfo","remoteDescription","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceAdd","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","_processRemoteRemoveSource","task","offerIq","remoteSdp","removeSsrcInfo","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","_this14","setRemoteDescription","createAnswer","answer","_this15","offer","oldTrack","newTrack","_this16","workFunction","isVideoTrack","clearRecvonlySsrc","replaceTrack","shouldRenegotiate","newLocalSDP","sourceRemoveElem","ssrcLines","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","_addRemoveTrackAsMuteUnmute","isMute","_this17","oldLocalSDP","removeTrackMute","addTrackUnmute","_verifyNoSSRCChanged","audioActive","videoActive","_this18","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","_this19","newVideoSenders","parseVideoSenders","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","_this20","errResponse","errorElSel","errorReasonSel","errorMsgSel","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","PERMISSION_PROMPT_IS_SHOWN","definition","detect","ua","getFirstMatch","regex","getSecondMatch","iosdevice","android","nexusMobile","nexusTablet","chromeos","silk","sailfish","tizen","webos","windowsphone","windows","mac","linux","edgeVersion","versionIdentifier","tablet","mobile","xbox","opera","samsungBrowser","coast","yandexbrowser","ucbrowser","maxthon","epiphany","puffin","sleipnir","kMeleon","osname","msedge","msie","chromeBook","vivaldi","seamonkey","firefox","firefoxos","phantom","slimer","blackberry","touchpad","bada","qupzilla","chromium","safari","googlebot","blink","webkit","gecko","ios","osVersion","getWindowsVersion","osversion","osMajorVersion","getVersionPrecision","versions","precision","chunks","delta","chunk","reverse","isUnsupportedBrowser","minVersions","strictMode","_bowser","browserList","browserItem","check","_SDPUtil__WEBPACK_IMPORTED_MODULE_0__","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask","E2E_RTT_CHANGED","LocalStatsCollector","AudioContext","webkitAudioContext","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","Uint8Array","frequencyBinCount","getByteTimeDomainData","newLevel","lastLevel","diff","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","currentExecutingScript","prepend","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","ON","OFF","trackHandler2Prop","track_mute","track_unmute","track_ended","addMediaStreamInactiveHandler","oninactive","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_setHandler","container","_onTrackAttach","_maybeFireTrackAttached","_attachTTFMTracker","active","getStreamId","trackId","getTrackId","nextValue","MAX_SAFE_INTEGER","SpeakerStats","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","newName","isNowDominantSpeaker","isDominantSpeaker","timeElapsed","total","IDENTITY_UPDATED","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_noDataFromSourceTimeout","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","getTrack","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_onNoDataFromSourceError","_checkForCameraIssues","_clearNoDataFromSourceMuteResources","track_type","_fireNoDataFromSourceEvent","isReceivingData","_get","storedMSID","getMSID","_queueSetMuted","setMuted","_setMuted","logMuteInfo","doesVideoMuteByStreamRemove","enabled","_removeStreamFromConferenceAsMute","_unregisterHandlers","stopStream","streamOptions","getDeviceId","getCameraFacingMode","assign","streamsInfo","streamInfo","cont","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","_removeLocalTrackAsMute","removeTrack","detach","bytesSent","getConnectionState","_bytesSent","trackSettings","_stopStreamInProgress","_switchCamera","JibriSession","_mode","_setSessionID","setStatus","_sessionID","_liveStreamViewURL","_status","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","app_data","recording_mode","streamid","you_tube_broadcast_id","errorIq","setError","children","VIDEO_PERMISSION_NAME","JitsiMediaDevices","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","supported","promises","results","every","permissionStatus","_this$_eventEmitter","consoleTransport","globalTransports","callerInfo","fileLocation","column","getCallerInfo","methods","transportIdx","LOG","SDPUtils","generateIdentifier","localCName","splitLines","blob","splitSections","getDescription","sections","getMediaSections","matchPrefix","parseCandidate","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","parameter","writeRtcpFb","rtcpFeedback","fb","parseSsrcMedia","sp","colon","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","generateSessionId","writeSessionBoilerplate","sessId","sessVer","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","address","grammar","reg","names","u","z","rate","sessionConfig","raddr","maxMessageSize","RegExp","dir2","RecordingResult","AUDIO_WEBM","AUDIO_OGG","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","getOriginalStream","createEmptyStream","mimeType","ondataavailable","dataEvent","recorderToRemove","getDisplayName","download","Blob","href","click","getRecordingResults","getFileType","getTokenAuthUrl","urlPattern","roleUpgrade","JitsiConnection","_service_statistics_AnalyticsEvents__WEBPACK_IMPORTED_MODULE_0__","_JitsiConference__WEBPACK_IMPORTED_MODULE_1__","_JitsiConnectionEvents__WEBPACK_IMPORTED_MODULE_2__","_modules_statistics_statistics__WEBPACK_IMPORTED_MODULE_3__","_modules_xmpp_xmpp__WEBPACK_IMPORTED_MODULE_4__","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","_this$xmpp","setToken","initJitsiConference","JitsiConference","getConnectionTimes","feature","submit","removeFeature","eventManager","JitsiConferenceEventManager","_init","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","setupXMPPListeners","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","rttMonitor","RttMonitor","e2eping","E2ePing","setupRTCListeners","participantConnectionStatus","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","windowLocation","enableDisplayNameInStats","callStatsCustomScriptUrl","enableStatsID","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","TalkMutedDetection","setLastN","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","setLocalParticipantProperty","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","closeBridgeChannel","_delayedIceFailed","cancel","removeXMPPListeners","destroy","onMemberLeft","getJid","getConnection","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getLocalAudioTrack","getLocalVideoTrack","eventId","addCommandListener","command","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","sendPrivateTextMessage","sendPrivateMessage","sendCommand","addToPresence","sendCommandOnce","removeCommand","removeFromPresence","setSubject","subject","isModerator","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","transcriptionStatus","localVideoTrack","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","muteParticipant","myroomjid","_setConference","removeLocalTrack","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","addLocalTrack","setAudioMute","setVideoMute","addAsUnmutePromises","addTrackAsUnmute","removeAsMutePromises","removeTrackAsMute","getRole","lock","lockRoom","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","selectEndpoints","pinParticipant","pinEndpoint","lastN","isInteger","RangeError","isVideoActive","setMediaTransferActive","getParticipantCount","countHidden","isHidden","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","statsID","botType","JitsiParticipant","_role","_botType","getFeatures","_supportsDTMF","updateDTMFSupport","_maybeStartOrStopP2P","_onMemberBotTypeChanged","botParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","setAnswer","onTransportInfo","transportInfo","addIceCandidates","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","getMemberRole","errorMsg","supportsP2P","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_setBridgeChannel","acceptOffer","_suspendMediaTransferForJvbConnection","bridgeChannelType","webSocket","first","openBridgeChannel","supportsDataChannels","initializeBridgeChannel","onCallEnded","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","duration","peerConnection","JitsiDTMFManager","startRecording","stopRecording","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","getLogs","getJingleLog","metadata","time","getXmppLog","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","nodes","overallFeedback","detailedFeedback","remoteUserId","getLocalSSRC","getSSRC","getUsageLabel","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","sendChannelMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","IceFailedNotification","sendIceFailedNotification","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","isEqual","_defineProperty","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","invite","userLeftEvent","peers","peerCount","hasBotPeer","shouldBeInP2P","myId","peersId","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","getStats","setReceiverVideoConstraint","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","global","LARGE_ARRAY_SIZE","HASH_UNDEFINED","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","argsTag","arrayTag","asyncTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","nullTag","objectTag","proxyTag","regexpTag","setTag","stringTag","symbolTag","undefinedTag","arrayBufferTag","dataViewTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","freeProcess","nodeUtil","nodeIsTypedArray","isTypedArray","arraySome","predicate","mapToArray","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","funcToString","maskSrcKey","exec","IE_PROTO","nativeObjectToString","reIsNative","Buffer","propertyIsEnumerable","symToStringTag","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","clear","entry","ListCache","MapCache","SetCache","__data__","Stack","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","iteratee","baseTimes","isIndex","assocIndexOf","eq","baseGetTag","isOwn","unmasked","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsEqual","other","bitmask","customizer","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","convert","isPartial","stacked","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","othLength","skipCtor","objValue","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","baseIsNative","baseKeys","Ctor","arrLength","seen","arrValue","othIndex","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","getMapData","getValue","pairs","resIndex","arrayFilter","symbol","ArrayBuffer","ctorString","isLength","baseUnary","strophe_js__WEBPACK_IMPORTED_MODULE_0__","_service_statistics_AnalyticsEvents__WEBPACK_IMPORTED_MODULE_1__","_service_authentication_AuthenticationEvents__WEBPACK_IMPORTED_MODULE_2__","_service_authentication_AuthenticationEvents__WEBPACK_IMPORTED_MODULE_2___default","_modules_util_EventEmitterForwarder__WEBPACK_IMPORTED_MODULE_3__","_modules_util_EventEmitterForwarder__WEBPACK_IMPORTED_MODULE_3___default","jitsi_meet_logger__WEBPACK_IMPORTED_MODULE_4__","_JitsiConferenceErrors__WEBPACK_IMPORTED_MODULE_5__","_JitsiConferenceEvents__WEBPACK_IMPORTED_MODULE_6__","_service_RTC_MediaType__WEBPACK_IMPORTED_MODULE_7__","_service_RTC_RTCEvents__WEBPACK_IMPORTED_MODULE_8__","_service_RTC_RTCEvents__WEBPACK_IMPORTED_MODULE_8___default","_service_RTC_VideoType__WEBPACK_IMPORTED_MODULE_9__","_service_RTC_VideoType__WEBPACK_IMPORTED_MODULE_9___default","_modules_statistics_statistics__WEBPACK_IMPORTED_MODULE_10__","_service_xmpp_XMPPEvents__WEBPACK_IMPORTED_MODULE_11__","_service_xmpp_XMPPEvents__WEBPACK_IMPORTED_MODULE_11___default","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","forward","setParticipantPropertyListener","setProperty","recorderSession","logObject","getError","getStatus","AuthenticationEvents","txt","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","_onByteSentStatsReceived","dest","srcEvent","AnalyticsAdapter","analyticsHandlers","cache","permanentProperties","conferenceName","callstats_name","user_agent","browser_name","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","conference_name","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","isSafariWithWebrtc","isSafari","isVersionLessThan","ondevicechange","usesUnifiedPlan","usesPlanB","RTCRtpTransceiver","_getChromiumBasedVersion","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","arrayBuffer","base64","v1","v2","v3","base64Str","md5","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","statsInterval","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","packetsReceived","packetsLost","packetsSent","bytesReceived","framerateMean","receiveBandwidth","sendBandwidth","remoteAddress","transportType","localAddress","activeConnection","googFrameHeightReceived","googFrameWidthReceived","googFrameHeightSent","googFrameWidthSent","googFrameRateReceived","googFrameRateSent","audioInputLevel","audioOutputLevel","currentRoundTripTime","remoteCandidateType","localCandidateType","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","startAudioLevelStats","processNewAudioLevelReport","processAudioLevelReport","supportsRtpStatistics","processNewStatsReport","processStatsReport","itemStatByKey","stat","pair","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","localip","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","msType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","bytesReceivedNow","bytesReceivedBefore","nowBytesTransmitted","timeMs","timestamp","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","userResolutions","userFramerates","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","remoteIpAddress","remotePort","localIpAddress","localPort","localIp","networkType","frameHeight","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","jitsiTrack","isWebRTCTrackMuted","oldValue","_isMediaTypeMuted","reduce","_JitsiConnectionEvents__WEBPACK_IMPORTED_MODULE_0__","_modules_xmpp_xmpp__WEBPACK_IMPORTED_MODULE_1__","rejectPromise","onLoginSuccessful","roomPassword","canceled","authenticationError","connectionError","MucConnectionPlugin","rooms","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","ChatRoom","createNonAnonymousRoom","packet2JSON","_arr","_arr2","json2packet","packet","filterNodeFromPresenceJSON","members","presHandlers","noBridgeAvailable","Moderator","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","JitsiTranscriptionStatus","xns","addVideoInfoToPresence","disableFocus","allocateConferenceFocus","fromJoin","getInfo","getForm","form","formSubmit","var","member","statusEl","hasStatusUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","hiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","_arr3","_i3","newRole","_initFocus","memberOfThis","displayJids","att","phone","pin","processNode","tagHandlers","nickname","skipEvents","onMucMemberLeft","reasonSelect","doLeave","isSelfPresence","isKick","membersKeys","onParticipantLeft","subjectText","stamp","dateParts","discoRoomInfo","kickIQ","onError","onNotSupported","formsubmit","handlerIdx","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","mutedNode","videoTypeNode","isSipGatewayEnabled","iqToFocus","onMucLeft","doReject","_browser__WEBPACK_IMPORTED_MODULE_1__","_settings_Settings__WEBPACK_IMPORTED_MODULE_2__","createExpBackoffTimer","step","count","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","focus","createConferenceIq","openSctp","machineUID","machine-uid","session-id","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","stereo","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","JingleConnectionPlugin","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","ConnectionPlugin","onJingle","fromJid","ack","sess","startMuted","modifyContents","replaceTransport","successTime","sendTransportReject","addRemoteStream","removeRemoteStream","me","onTerminated","iceservers","dict","credential","updateLog","setImmediate","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","retry","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","kill","idle","priorityQueue","_compareTasks","sequence","compare","beg","end","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","doInitialize","ssrcOwners","SignalingLayer","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","getMediaPresenceInfo","strophe_js__WEBPACK_IMPORTED_MODULE_1__","PING_TIMESTAMPS_TO_KEEP","PingConnectionPlugin","failedPings","pingExecIntervals","_addPingExecutionTimestamp","pingIntervals","maxInterval","previousTS","currentInterval","RayoConnectionPlugin","onRayo","roomPass","callResource","StropheLogger","logIncoming","logOutgoing","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","disco","versionToCapabilities","jidToVersion","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","_generateVersion","_getDiscoInfo","category","_fixChatRoomPresenceMap","_identities","accumulatedValue","_features","_notifyVersionChanged","oldVersion","dtmfSender","createDTMFSender","insertDTMF","_audioLevel","myUserID","datachannel","createDataChannel","_handleChannel","ws","OPEN","colibriClass","msgPayload","jsonObject","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","isOpen","SIMULCAST_LAYERS","SIM_LAYER_RIDS","audioTransferActive","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","statsinterval","Interop","interop","Simulcast","simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","what","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","isSimulcastOn","supportsSimulcast","videoTrack","_setVideoType","endpoints","endpointTrackMap","mediaTrack","findTrackById","onaddtrack","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","streamAudioTracks","streamVideoTracks","mediaLines","mls","trackSsrc","ownerEndpointId","getSSRCOwner","peerMediaInfo","getPeerMediaInfo","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","isVersionGreaterThan","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","simulcast_03","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","selectMedia","videoMedia","toRawSDP","enforceSendRecv","transformStreamIdentifiers","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","fidGroups","rtxSsrcMapping","rtxSsrc","_assertTrackBelongs","webRtcStream","addStream","_removeStream","supportsRtpSender","_handleSenderRemoveStream","removeStream","doesBelong","isMediaStreamInPc","findSenderByStream","getSenders","sender","extractPrimarySSRC","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","parsedSdp","toUnifiedPlan","_insertUnifiedPlanSimulcastReceive","mungeRemoteDescription","stripRtx","_injectH264IfNotPresent","dummyPayloadType","payloadsArray","clearVideoSsrcCache","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","peerTracks","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_removePeerConnection","simParams","encodings","scaleResolutionDownBy","setParameters","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","groupSSRCs","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","extractSSRCMap","_processLocalSSRCsMap","handleFailure","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","trackMSID","newSSRCNum","oldSSRCNum","currNumSsrcs","videoSender","getParameters","simIndex","handleLayerSuspension","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","hasBeenMuted","_bindMuteHandlers","_onTrackMute","_onTrackUnmute","gumStart","gumEnd","gumDuration","ttfm","_playCallback","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","cachedPrimarySsrc","primaryCname","removeSSRC","addSSRCAttribute","addSSRCGroup","modifyRtxSsrcs2","pcId","streamAndTrackIDs","_addMutedLocalVideoTracksToSDP","sessionDesc","audioMLine","_transformMediaIdentifiers","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","getRtxSSRC","dumpSSRCGroups","removeGroupsWithSSRC","correspondingRtxSsrcs","ssrcMapping","sdpTransformer","getSSRCCount","primaryVideoSsrcs","getPrimaryVideoSSRCs","getSSRCAttrValue","correspondingRtxSsrc","previousAssociatedRtxStream","containsAnySSRCGroups","findGroups","removeGroupsBySemantics","injectRecvOnly","newPrimarySsrc","getPrimaryVideoSsrc","replaceSSRC","_eventFired","_trackMuteChanged","_trackAdded","_isLocalAudioTrack","STATS_MESSAGE_TYPE","kSimulcastFormats","layers","target","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_calculateConnectionQuality","_canceled","_iceFailedTimeout","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingInterval","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_sessions","_chatRoom","_handleFocusPresence","_handleJibriPresence","getSession","getID","_addSession","_emitSessionUpdate","_createSession","_recordingXMLUtils$ge","setLiveStreamViewURL","offerOptions","PCMonitor","getStatsIntervalMs","getStatsInterval","rtts","stopped","startStatsInterval","handleCandidateRtt","rttTotal","candidateKey","responsesReceived","requestsSent","rttTotalDiff","responsesReceivedDiff","requestsResponsesDiff","supportsLocalCandidateRttStatistics","pcMonitors","startPCMonitors","initialDelay","AverageStatReport","sum","calculate","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onUserLeft","_onRemoteStatsUpdated","_processRemoteStats","supportsRTTStatistics","addNext","batchReport","conference_size","local_candidate_type","remote_candidate_type","transport_type","appendReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_onLocalStatsUpdated","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","supportsBandwidthStatistics","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","getTracksByMediaType","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","dominantSpeakerId","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","markAsHasLeft","newStats","speakerStatsToUpdate","SphinxService","BEFORE_STATE","audioRecorder","transcriptionService","transcription","lineLength","hasPopulatedArrays","twoDimensionalArray","callBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","getState","_statistics_statistics__WEBPACK_IMPORTED_MODULE_0__","processPresence","FOCUS_COMPONENT","VIDEOBRIDGE_COMPONENT","XMPP_SERVER_COMPONENT","mucResource","componentName","getComponentVersion","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","ProxyConnectionService","jitsiConnection","otherOptions","_objectWithoutProperties","_options","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","processMessage","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","default","getAnalyticsAttributesFromOptions","audio_requested","video_requested","screen_sharing_requested","_mergeNamespaceAndModule","constants","recording","recordingConstants","sipVideoGW","events","errorTypes","logLevels","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","emitEvent","mStream","currentlyAvailableMediaDevices","oldResolution","newResolution","resName","getLowerResolution","old_resolution","new_resolution","isMultipleAudioInputSupported","isCollectingLocalStats","lineno","colno","util","AuthUtil","JitsiMeetJS","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","webpackPolyfill","deprecate","paths","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptUrlFromStack","remainingStack","ignoreMessage","getScriptFromUrl","hasAttribute","getSoleInlineScript","currentScript","thrownErr","near","far","strophe_js","_items","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","getPrototypeOf","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","adapterFactory","dependencies","shimChrome","shimFirefox","shimEdge","shimSafari","logging","browserDetails","adapter","chromeShim","edgeShim","firefoxShim","safariShim","commonShim","shimPeerConnection","browserShim","shimGetUserMedia","shimMediaStream","shimSourceObject","shimOnTrack","shimAddTrackRemoveTrack","shimGetSendersWithDtmf","shimRTCIceCandidate","shimReplaceTrack","shimRTCIceServerUrls","shimCallbacksAPI","shimLocalStreamsAPI","shimRemoteStreamsAPI","shimTrackEventTransceiver","shimCreateOfferLegacy","webkitMediaStream","_ontrack","origSetRemoteDescription","_ontrackpoly","te","receiver","getReceivers","Event","dispatchEvent","shimSenderWithDtmf","dtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","RTCRtpSender","origGetSenders","HTMLMediaElement","_srcObject","origGetLocalStreams","getLocalStreams","nativeStreams","_reverseStreams","_streams","DOMException","newStream","oldStream","nativeMethod","replaceInternalStreamId","origSetLocalDescription","internalId","externalStream","internalStream","replaceExternalStreamId","origLocalDescription","getOwnPropertyDescriptor","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","iceTransports","origGetStats","selector","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","nativeAddIceCandidate","constraintsToChrome_","cc","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","getUserMediaPromise_","kinds","MediaStreamTrack","getSources","origGetUserMedia","shimRTCPeerConnection","RTCIceGatherer","origMSTEnabled","RTCDtmfSender","setTrack","dtlsRole","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","addTrackToStreamAndFireEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","iceGatheringState","usingBundle","bundlePolicy","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","gatherPolicy","_config","transceivers","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","ontrack","onicegatheringstatechange","_emitGatheringStateChange","getConfiguration","getRemoteStreams","_createTransceiver","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","_createIceGatherer","writable","bufferedCandidateEvents","bufferCandidates","_gather","onlocalcandidate","evt","serializedCandidate","complete","RTCIceTransport","onicestatechange","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","isDatachannel","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","rejected","remoteMsid","isComplete","setTransport","setRemoteCandidates","RTCRtpReceiver","getCapabilities","isNewTrack","nativeTrack","states","new","connecting","checking","disconnected","failed","numAudioTracks","numVideoTracks","getLocalCandidates","mediaSectionsInOffer","candidateString","inboundrtp","outboundrtp","candidatepair","RTCTrackEvent","mozSrcObject","mozRTCPeerConnection","newServer","mozRTCSessionDescription","mozRTCIceCandidate","modernStatsTypes","nativeGetStats","onSucc","onErr","InternalError","NotSupportedError","SecurityError","The operation is insecure.","getUserMedia_","constraintsToFF37_","orgEnumerateDevices","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","_localStreams","getStreamById","_remoteStreams","_addTrack","_onaddstream","_onaddstreampoly","withCallback","errcb","RTCTransceiver","origCreateOffer","audioTransceiver","getTransceivers","setDirection","addTransceiver","videoTransceiver","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","eventNameToWrap","nativeAddEventListener","nativeEventName","_eventMap","nativeRemoveEventListener","unwrappedCb","wrapPeerConnectionEvent","nativeCreateObjectURL","nativeRevokeObjectURL","newId","dsc","nativeSetAttribute","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","makeLine","formatStr","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","midToString","mlB2UMap","mlU2BMap","candidateToUnifiedPlan","candidateToPlanB","getFirstSendingIndexFromAnswer","rewrite","type2bl","types","directionResult","uLine","rtcpMux","directionMasks","bundleOnly","mids","msidSemantic","semantic","cached","hasBundle","recvonlySsrcs","mid2ul","bIdx","uIdx","bLine","uLineData","iceUfrag","icePwd","ssrc2group","ssrc2ml","related","inactive","recvonly","sendonly","sendrecv","transformUtils","parseSsrcs","writeSsrcs","DEFAULT_NUM_OF_LAYERS","processVideo","validateDescription","clearSsrcCache","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","removeGoogConference","assertGoogConference","TranscriptionService","Word","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","audioBlob","getWord","getBeginTime","getEndTime"],"mappings":"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","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 115);\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    CONFERENCE_SETUP_FAILED: 'xmpp.conference_setup_failed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /* Event fired when XMPP error is returned to any request, it is meant to be\n     * used to report 'signaling' errors to CallStats\n     *\n     * {\n     *   code: {XMPP error code}\n     *   reason: {XMPP error condition}\n     *   source = request.tree()\n     *   session = {JingleSession instance}\n     * }\n     */\n    JINGLE_ERROR: 'xmpp.jingle_error',\n\n    // Event fired when we have failed to set initial offer\n    JINGLE_FATAL_ERROR: 'xmpp.jingle_fatal_error',\n\n    // Designates an event indicating that we were kicked from the XMPP MUC.\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n    PEERCONNECTION_READY: 'xmpp.peerconnection_ready',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","/** File: strophe.js\n *  A JavaScript library for writing XMPP clients.\n *\n *  This library uses either Bidirectional-streams Over Synchronous HTTP (BOSH)\n *  to emulate a persistent, stateful, two-way connection to an XMPP server or\n *  alternatively WebSockets.\n *\n *  More information on BOSH can be found in XEP 124.\n *  For more information on XMPP-over WebSocket see this RFC:\n *  http://tools.ietf.org/html/rfc7395\n */\n\n/* All of the Strophe globals are defined in this special function below so\n * that references to the globals become closures.  This will ensure that\n * on page reload, these references will still be available to callbacks\n * that are still executing.\n */\n\n/* jshint ignore:start */\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //Allow using this built library as an AMD module\n        //in another project. That other project will only\n        //see this AMD call, not the internal modules in\n        //the closure below.\n        define([], factory);\n    } else {\n        //Browser globals case.\n        var wrapper = factory();\n        root.Strophe        = wrapper.Strophe;\n        root.$build         = wrapper.$build;\n        root.$iq            = wrapper.$iq;\n        root.$msg           = wrapper.$msg;\n        root.$pres          = wrapper.$pres;\n        root.SHA1           = wrapper.SHA1;\n        root.MD5            = wrapper.MD5;\n        root.b64_hmac_sha1  = wrapper.b64_hmac_sha1;\n        root.b64_sha1       = wrapper.b64_sha1;\n        root.str_hmac_sha1  = wrapper.str_hmac_sha1;\n        root.str_sha1       = wrapper.str_sha1;\n    }\n}(this, function () {\n    //almond, and your modules will be inlined here\n/* jshint ignore:end */\n/**\n * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, http://github.com/requirejs/almond/LICENSE\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name) {\n            name = name.split('/');\n            lastIndex = name.length - 1;\n\n            // If wanting node ID compatibility, strip .js from end\n            // of IDs. Have to do this here, and not in nameToUrl\n            // because node allows either .js or non .js to map\n            // to same file.\n            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n            }\n\n            // Starts with a '.' so need the baseName\n            if (name[0].charAt(0) === '.' && baseParts) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that 'directory' and not name of the baseName's\n                //module. For instance, baseName of 'one/two/three', maps to\n                //'one/two/three.js', but we want the directory, 'one/two' for\n                //this normalization.\n                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                name = normalizedBaseParts.concat(name);\n            }\n\n            //start trimDots\n            for (i = 0; i < name.length; i++) {\n                part = name[i];\n                if (part === '.') {\n                    name.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        name.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n            //end trimDots\n\n            name = name.join('/');\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    //Creates a parts array for a relName where first part is plugin ID,\n    //second part is resource ID. Assumes relName has already been normalized.\n    function makeRelParts(relName) {\n        return relName ? splitPrefix(relName) : [];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relParts) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0],\n            relResourceName = relParts[1];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relResourceName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relResourceName));\n            } else {\n                name = normalize(name, relResourceName);\n            }\n        } else {\n            name = normalize(name, relResourceName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i, relParts,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n        relParts = makeRelParts(relName);\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relParts);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, makeRelParts(callback)).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"node_modules/almond/almond.js\", function(){});\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/* global define */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-polyfill',[], function () {\n            return factory(root);\n        });\n    } else {\n        // Browser globals\n        return factory(root);\n    }\n}(this, function (root) {\n\n/** Function: Function.prototype.bind\n *  Bind a function to an instance.\n *\n *  This Function object extension method creates a bound method similar\n *  to those in Python.  This means that the 'this' object will point\n *  to the instance you want.  See <MDC's bind() documentation at https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind>\n *  and <Bound Functions and Function Imports in JavaScript at http://benjamin.smedbergs.us/blog/2007-01-03/bound-functions-and-function-imports-in-javascript/>\n *  for a complete explanation.\n *\n *  This extension already exists in some browsers (namely, Firefox 3), but\n *  we provide it to support those that don't.\n *\n *  Parameters:\n *    (Object) obj - The object that will become 'this' in the bound function.\n *    (Object) argN - An option argument that will be prepended to the\n *      arguments given for the function call\n *\n *  Returns:\n *    The bound function.\n */\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (obj /*, arg1, arg2, ... */) {\n        var func = this;\n        var _slice = Array.prototype.slice;\n        var _concat = Array.prototype.concat;\n        var _args = _slice.call(arguments, 1);\n        return function () {\n            return func.apply(obj ? obj : this, _concat.call(_args, _slice.call(arguments, 0)));\n        };\n    };\n}\n\n/** Function: Array.isArray\n *  This is a polyfill for the ES5 Array.isArray method.\n */\nif (!Array.isArray) {\n    Array.isArray = function(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n}\n\n/** Function: Array.prototype.indexOf\n *  Return the index of an object in an array.\n *\n *  This function is not supplied by some JavaScript implementations, so\n *  we provide it if it is missing.  This code is from:\n *  http://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Objects:Array:indexOf\n *\n *  Parameters:\n *    (Object) elt - The object to look for.\n *    (Integer) from - The index from which to start looking. (optional).\n *\n *  Returns:\n *    The index of elt in the array or -1 if not found.\n */\nif (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(elt /*, from*/) {\n        var len = this.length;\n        var from = Number(arguments[1]) || 0;\n        from = (from < 0) ? Math.ceil(from) : Math.floor(from);\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from++) {\n            if (from in this && this[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n}\n\n/** Function: Array.prototype.forEach\n *\n *  This function is not available in IE < 9\n *\n *  See <forEach on developer.mozilla.org at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach>\n */\nif (!Array.prototype.forEach) {\n    Array.prototype.forEach = function(callback, thisArg) {\n        var T, k;\n        if (this === null) {\n            throw new TypeError(' this is null or not defined');\n        }\n        // 1. Let O be the result of calling toObject() passing the\n        // |this| value as the argument.\n        var O = Object(this);\n        // 2. Let lenValue be the result of calling the Get() internal\n        // method of O with the argument \"length\".\n        // 3. Let len be toUint32(lenValue).\n        var len = O.length >>> 0;\n        // 4. If isCallable(callback) is false, throw a TypeError exception.\n        // See: http://es5.github.com/#x9.11\n        if (typeof callback !== \"function\") {\n            throw new TypeError(callback + ' is not a function');\n        }\n        // 5. If thisArg was supplied, let T be thisArg; else let\n        // T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n        // 6. Let k be 0\n        k = 0;\n        // 7. Repeat, while k < len\n        while (k < len) {\n            var kValue;\n            // a. Let Pk be ToString(k).\n            //        This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty\n            //        internal method of O with argument Pk.\n            //        This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                // i. Let kValue be the result of calling the Get internal\n                // method of O with argument Pk.\n                kValue = O[k];\n                // ii. Call the Call internal method of callback with T as\n                // the this value and argument list containing kValue, k, and O.\n                callback.call(T, kValue, k, O);\n            }\n            // d. Increase k by 1.\n            k++;\n        }\n        // 8. return undefined\n    };\n}\n\n// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\nvar keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nif (!root.btoa) {\n    root.btoa = function (input) {\n        /**\n         * Encodes a string in base64\n         * @param {String} input The string to encode in base64.\n         */\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n        do {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n                enc2 = ((chr1 & 3) << 4);\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n            output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) +\n                keyStr.charAt(enc3) + keyStr.charAt(enc4);\n        } while (i < input.length);\n        return output;\n    };\n}\n\nif (!root.atob) {\n    root.atob = function (input) {\n        /**\n         * Decodes a base64 string.\n         * @param {String} input The string to decode.\n         */\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n        do {\n            enc1 = keyStr.indexOf(input.charAt(i++));\n            enc2 = keyStr.indexOf(input.charAt(i++));\n            enc3 = keyStr.indexOf(input.charAt(i++));\n            enc4 = keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 !== 64) {\n                output = output + String.fromCharCode(chr2);\n            }\n            if (enc4 !== 64) {\n                output = output + String.fromCharCode(chr3);\n            }\n        } while (i < input.length);\n        return output;\n    };\n}\n}));\n\n/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: false */\n/* global define */\n\n/* Some functions and variables have been stripped for use with Strophe */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-sha1', [],function () {\n            return factory();\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.SHA1 = factory();\n    }\n}(this, function () {\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction core_sha1(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << (24 - len % 32);\n  x[((len + 64 >> 9) << 4) + 15] = len;\n\n  var w = new Array(80);\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n  var e = -1009589776;\n\n  var i, j, t, olda, oldb, oldc, oldd, olde;\n  for (i = 0; i < x.length; i += 16)\n  {\n    olda = a;\n    oldb = b;\n    oldc = c;\n    oldd = d;\n    olde = e;\n\n    for (j = 0; j < 80; j++)\n    {\n      if (j < 16) { w[j] = x[i + j]; }\n      else { w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1); }\n      t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return [a, b, c, d, e];\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft(t, b, c, d)\n{\n  if (t < 20) { return (b & c) | ((~b) & d); }\n  if (t < 40) { return b ^ c ^ d; }\n  if (t < 60) { return (b & c) | (b & d) | (c & d); }\n  return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t)\n{\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n         (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data\n */\nfunction core_hmac_sha1(key, data)\n{\n  var bkey = str2binb(key);\n  if (bkey.length > 16) { bkey = core_sha1(bkey, key.length * 8); }\n\n  var ipad = new Array(16), opad = new Array(16);\n  for (var i = 0; i < 16; i++)\n  {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n\n  var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n  return core_sha1(opad.concat(hash), 512 + 160);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\n/*\n * Convert an 8-bit or 16-bit string to an array of big-endian words\n * In 8-bit function, characters >255 have their hi-byte silently ignored.\n */\nfunction str2binb(str)\n{\n  var bin = [];\n  var mask = 255;\n  for (var i = 0; i < str.length * 8; i += 8)\n  {\n    bin[i>>5] |= (str.charCodeAt(i / 8) & mask) << (24 - i%32);\n  }\n  return bin;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2str(bin)\n{\n  var str = \"\";\n  var mask = 255;\n  for (var i = 0; i < bin.length * 32; i += 8)\n  {\n    str += String.fromCharCode((bin[i>>5] >>> (24 - i%32)) & mask);\n  }\n  return str;\n}\n\n/*\n * Convert an array of big-endian words to a base-64 string\n */\nfunction binb2b64(binarray)\n{\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var str = \"\";\n  var triplet, j;\n  for (var i = 0; i < binarray.length * 4; i += 3)\n  {\n    triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16) |\n              (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 ) |\n               ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);\n    for (j = 0; j < 4; j++)\n    {\n      if (i * 8 + j * 6 > binarray.length * 32) { str += \"=\"; }\n      else { str += tab.charAt((triplet >> 6*(3-j)) & 0x3F); }\n    }\n  }\n  return str;\n}\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nreturn {\n    b64_hmac_sha1:  function (key, data){ return binb2b64(core_hmac_sha1(key, data)); },\n    b64_sha1:       function (s) { return binb2b64(core_sha1(str2binb(s),s.length * 8)); },\n    binb2str:       binb2str,\n    core_hmac_sha1: core_hmac_sha1,\n    str_hmac_sha1:  function (key, data){ return binb2str(core_hmac_sha1(key, data)); },\n    str_sha1:       function (s) { return binb2str(core_sha1(str2binb(s),s.length * 8)); },\n};\n}));\n\n/*\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n/*\n * Everything that isn't used by Strophe has been stripped here!\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-md5',[], function () {\n            return factory();\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.MD5 = factory();\n    }\n}(this, function () {\n    /*\n     * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n     * to work around bugs in some JS interpreters.\n     */\n    var safe_add = function (x, y) {\n        var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n        return (msw << 16) | (lsw & 0xFFFF);\n    };\n\n    /*\n     * Bitwise rotate a 32-bit number to the left.\n     */\n    var bit_rol = function (num, cnt) {\n        return (num << cnt) | (num >>> (32 - cnt));\n    };\n\n    /*\n     * Convert a string to an array of little-endian words\n     */\n    var str2binl = function (str) {\n        var bin = [];\n        for(var i = 0; i < str.length * 8; i += 8)\n        {\n            bin[i>>5] |= (str.charCodeAt(i / 8) & 255) << (i%32);\n        }\n        return bin;\n    };\n\n    /*\n     * Convert an array of little-endian words to a string\n     */\n    var binl2str = function (bin) {\n        var str = \"\";\n        for(var i = 0; i < bin.length * 32; i += 8)\n        {\n            str += String.fromCharCode((bin[i>>5] >>> (i % 32)) & 255);\n        }\n        return str;\n    };\n\n    /*\n     * Convert an array of little-endian words to a hex string.\n     */\n    var binl2hex = function (binarray) {\n        var hex_tab = \"0123456789abcdef\";\n        var str = \"\";\n        for(var i = 0; i < binarray.length * 4; i++)\n        {\n            str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) +\n                hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);\n        }\n        return str;\n    };\n\n    /*\n     * These functions implement the four basic operations the algorithm uses.\n     */\n    var md5_cmn = function (q, a, b, x, s, t) {\n        return safe_add(bit_rol(safe_add(safe_add(a, q),safe_add(x, t)), s),b);\n    };\n\n    var md5_ff = function (a, b, c, d, x, s, t) {\n        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\n    };\n\n    var md5_gg = function (a, b, c, d, x, s, t) {\n        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\n    };\n\n    var md5_hh = function (a, b, c, d, x, s, t) {\n        return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n    };\n\n    var md5_ii = function (a, b, c, d, x, s, t) {\n        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\n    };\n\n    /*\n     * Calculate the MD5 of an array of little-endian words, and a bit length\n     */\n    var core_md5 = function (x, len) {\n        /* append padding */\n        x[len >> 5] |= 0x80 << ((len) % 32);\n        x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n        var a =  1732584193;\n        var b = -271733879;\n        var c = -1732584194;\n        var d =  271733878;\n\n        var olda, oldb, oldc, oldd;\n        for (var i = 0; i < x.length; i += 16)\n        {\n            olda = a;\n            oldb = b;\n            oldc = c;\n            oldd = d;\n\n            a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);\n            d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);\n            c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);\n            b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);\n            a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);\n            d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);\n            c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);\n            b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);\n            a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);\n            d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);\n            c = md5_ff(c, d, a, b, x[i+10], 17, -42063);\n            b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);\n            a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);\n            d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);\n            c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);\n            b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);\n\n            a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);\n            d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);\n            c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);\n            b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);\n            a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);\n            d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);\n            c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);\n            b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);\n            a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);\n            d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);\n            c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);\n            b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);\n            a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);\n            d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);\n            c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);\n            b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);\n\n            a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);\n            d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);\n            c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);\n            b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);\n            a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);\n            d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);\n            c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);\n            b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);\n            a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);\n            d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);\n            c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);\n            b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);\n            a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);\n            d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);\n            c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);\n            b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);\n\n            a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);\n            d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);\n            c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);\n            b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);\n            a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);\n            d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);\n            c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);\n            b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);\n            a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);\n            d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);\n            c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);\n            b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);\n            a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);\n            d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);\n            c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);\n            b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);\n\n            a = safe_add(a, olda);\n            b = safe_add(b, oldb);\n            c = safe_add(c, oldc);\n            d = safe_add(d, oldd);\n        }\n        return [a, b, c, d];\n    };\n\n    var obj = {\n        /*\n         * These are the functions you'll usually want to call.\n         * They take string arguments and return either hex or base-64 encoded\n         * strings.\n         */\n        hexdigest: function (s) {\n            return binl2hex(core_md5(str2binl(s), s.length * 8));\n        },\n\n        hash: function (s) {\n            return binl2str(core_md5(str2binl(s), s.length * 8));\n        }\n    };\n    return obj;\n}));\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-utils',[], function () {\n            return factory();\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.stropheUtils = factory();\n    }\n}(this, function () {\n\n    var utils = {\n\n        utf16to8: function (str) {\n            var i, c;\n            var out = \"\";\n            var len = str.length;\n            for (i = 0; i < len; i++) {\n                c = str.charCodeAt(i);\n                if ((c >= 0x0000) && (c <= 0x007F)) {\n                    out += str.charAt(i);\n                } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));\n                    out += String.fromCharCode(0x80 | ((c >>  6) & 0x3F));\n                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));\n                } else {\n                    out += String.fromCharCode(0xC0 | ((c >>  6) & 0x1F));\n                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));\n                }\n            }\n            return out;\n        },\n\n        addCookies: function (cookies) {\n            /* Parameters:\n             *  (Object) cookies - either a map of cookie names\n             *    to string values or to maps of cookie values.\n             *\n             * For example:\n             * { \"myCookie\": \"1234\" }\n             *\n             * or:\n             * { \"myCookie\": {\n             *      \"value\": \"1234\",\n             *      \"domain\": \".example.org\",\n             *      \"path\": \"/\",\n             *      \"expires\": expirationDate\n             *      }\n             *  }\n             *\n             *  These values get passed to Strophe.Connection via\n             *   options.cookies\n             */\n            var cookieName, cookieObj, isObj, cookieValue, expires, domain, path;\n            for (cookieName in (cookies || {})) {\n                expires = '';\n                domain = '';\n                path = '';\n                cookieObj = cookies[cookieName];\n                isObj = typeof cookieObj === \"object\";\n                cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n                if (isObj) {\n                    expires = cookieObj.expires ? \";expires=\"+cookieObj.expires : '';\n                    domain = cookieObj.domain ? \";domain=\"+cookieObj.domain : '';\n                    path = cookieObj.path ? \";path=\"+cookieObj.path : '';\n                }\n                document.cookie =\n                    cookieName+'='+cookieValue + expires + domain + path;\n            }\n        }\n    };\n    return utils;\n}));\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/*global define, document, sessionStorage, setTimeout, clearTimeout, ActiveXObject, DOMParser, btoa, atob */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-core',[\n            'strophe-sha1',\n            'strophe-md5',\n            'strophe-utils'\n        ], function () {\n            return factory.apply(this, arguments);\n        });\n    }  else if (typeof exports === 'object') {\n        module.exports = factory(\n            require('./sha1'),\n            require('./md5'),\n            require('./utils')\n        );\n    } else {\n        // Browser globals\n        var o = factory(root.SHA1, root.MD5, root.stropheUtils);\n        root.Strophe =        o.Strophe;\n        root.$build =         o.$build;\n        root.$iq =            o.$iq;\n        root.$msg =           o.$msg;\n        root.$pres =          o.$pres;\n        root.SHA1 =           o.SHA1;\n        root.MD5 =            o.MD5;\n        root.b64_hmac_sha1 =  o.SHA1.b64_hmac_sha1;\n        root.b64_sha1 =       o.SHA1.b64_sha1;\n        root.str_hmac_sha1 =  o.SHA1.str_hmac_sha1;\n        root.str_sha1 =       o.SHA1.str_sha1;\n    }\n}(this, function (SHA1, MD5, utils) {\n\nvar Strophe;\n\n/** Function: $build\n *  Create a Strophe.Builder.\n *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n *\n *  Parameters:\n *    (String) name - The root element name.\n *    (Object) attrs - The attributes for the root element in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $build(name, attrs) { return new Strophe.Builder(name, attrs); }\n\n/** Function: $msg\n *  Create a Strophe.Builder with a <message/> element as the root.\n *\n *  Parameters:\n *    (Object) attrs - The <message/> element attributes in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $msg(attrs) { return new Strophe.Builder(\"message\", attrs); }\n\n/** Function: $iq\n *  Create a Strophe.Builder with an <iq/> element as the root.\n *\n *  Parameters:\n *    (Object) attrs - The <iq/> element attributes in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $iq(attrs) { return new Strophe.Builder(\"iq\", attrs); }\n\n/** Function: $pres\n *  Create a Strophe.Builder with a <presence/> element as the root.\n *\n *  Parameters:\n *    (Object) attrs - The <presence/> element attributes in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $pres(attrs) { return new Strophe.Builder(\"presence\", attrs); }\n\n/** Class: Strophe\n *  An object container for all Strophe library functions.\n *\n *  This class is just a container for all the objects and constants\n *  used in the library.  It is not meant to be instantiated, but to\n *  provide a namespace for library objects, constants, and functions.\n */\nStrophe = {\n    /** Constant: VERSION */\n    VERSION: \"1.2.16\",\n\n    /** Constants: XMPP Namespace Constants\n     *  Common namespace constants from the XMPP RFCs and XEPs.\n     *\n     *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n     *  NS.BOSH - BOSH namespace from XEP 206.\n     *  NS.CLIENT - Main XMPP client namespace.\n     *  NS.AUTH - Legacy authentication namespace.\n     *  NS.ROSTER - Roster operations namespace.\n     *  NS.PROFILE - Profile namespace.\n     *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n     *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n     *  NS.MUC - Multi-User Chat namespace from XEP 45.\n     *  NS.SASL - XMPP SASL namespace from RFC 3920.\n     *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n     *  NS.BIND - XMPP Binding namespace from RFC 3920.\n     *  NS.SESSION - XMPP Session namespace from RFC 3920.\n     *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n     *  NS.XHTML - XHTML body namespace from XEP 71.\n     */\n    NS: {\n        HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n        BOSH: \"urn:xmpp:xbosh\",\n        CLIENT: \"jabber:client\",\n        AUTH: \"jabber:iq:auth\",\n        ROSTER: \"jabber:iq:roster\",\n        PROFILE: \"jabber:iq:profile\",\n        DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n        DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n        MUC: \"http://jabber.org/protocol/muc\",\n        SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n        STREAM: \"http://etherx.jabber.org/streams\",\n        FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n        BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n        SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n        VERSION: \"jabber:iq:version\",\n        STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n        XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n        XHTML: \"http://www.w3.org/1999/xhtml\"\n    },\n\n    /** Constants: XHTML_IM Namespace\n     *  contains allowed tags, tag attributes, and css properties.\n     *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n     *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n     *  allowed tags and their attributes.\n     */\n    XHTML: {\n        tags: ['a','blockquote','br','cite','em','img','li','ol','p','span','strong','ul','body'],\n        attributes: {\n            'a':          ['href'],\n            'blockquote': ['style'],\n            'br':         [],\n            'cite':       ['style'],\n            'em':         [],\n            'img':        ['src', 'alt', 'style', 'height', 'width'],\n            'li':         ['style'],\n            'ol':         ['style'],\n            'p':          ['style'],\n            'span':       ['style'],\n            'strong':     [],\n            'ul':         ['style'],\n            'body':       []\n        },\n        css: ['background-color','color','font-family','font-size','font-style','font-weight','margin-left','margin-right','text-align','text-decoration'],\n        /** Function: XHTML.validTag\n         *\n         * Utility method to determine whether a tag is allowed\n         * in the XHTML_IM namespace.\n         *\n         * XHTML tag names are case sensitive and must be lower case.\n         */\n        validTag: function(tag) {\n            for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                if (tag === Strophe.XHTML.tags[i]) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        /** Function: XHTML.validAttribute\n         *\n         * Utility method to determine whether an attribute is allowed\n         * as recommended per XEP-0071\n         *\n         * XHTML attribute names are case sensitive and must be lower case.\n         */\n        validAttribute: function(tag, attribute) {\n            if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                    if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                    }\n                }\n            }\n        return false;\n        },\n        validCSS: function(style) {\n            for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                if (style === Strophe.XHTML.css[i]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    },\n\n    /** Constants: Connection Status Constants\n     *  Connection status constants for use by the connection handler\n     *  callback.\n     *\n     *  Status.ERROR - An error has occurred\n     *  Status.CONNECTING - The connection is currently being made\n     *  Status.CONNFAIL - The connection attempt failed\n     *  Status.AUTHENTICATING - The connection is authenticating\n     *  Status.AUTHFAIL - The authentication attempt failed\n     *  Status.CONNECTED - The connection has succeeded\n     *  Status.DISCONNECTED - The connection has been terminated\n     *  Status.DISCONNECTING - The connection is currently being terminated\n     *  Status.ATTACHED - The connection has been attached\n     *  Status.REDIRECT - The connection has been redirected\n     *  Status.CONNTIMEOUT - The connection has timed out\n     */\n    Status: {\n        ERROR: 0,\n        CONNECTING: 1,\n        CONNFAIL: 2,\n        AUTHENTICATING: 3,\n        AUTHFAIL: 4,\n        CONNECTED: 5,\n        DISCONNECTED: 6,\n        DISCONNECTING: 7,\n        ATTACHED: 8,\n        REDIRECT: 9,\n        CONNTIMEOUT: 10\n    },\n\n    ErrorCondition: {\n        BAD_FORMAT: \"bad-format\",\n        CONFLICT: \"conflict\",\n        MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n        NO_AUTH_MECH: \"no-auth-mech\",\n        UNKNOWN_REASON: \"unknown\",\n    },\n\n    /** Constants: Log Level Constants\n     *  Logging level indicators.\n     *\n     *  LogLevel.DEBUG - Debug output\n     *  LogLevel.INFO - Informational output\n     *  LogLevel.WARN - Warnings\n     *  LogLevel.ERROR - Errors\n     *  LogLevel.FATAL - Fatal errors\n     */\n    LogLevel: {\n        DEBUG: 0,\n        INFO: 1,\n        WARN: 2,\n        ERROR: 3,\n        FATAL: 4\n    },\n\n    /** PrivateConstants: DOM Element Type Constants\n     *  DOM element types.\n     *\n     *  ElementType.NORMAL - Normal element.\n     *  ElementType.TEXT - Text data element.\n     *  ElementType.FRAGMENT - XHTML fragment element.\n     */\n    ElementType: {\n        NORMAL: 1,\n        TEXT: 3,\n        CDATA: 4,\n        FRAGMENT: 11\n    },\n\n    /** PrivateConstants: Timeout Values\n     *  Timeout values for error states.  These values are in seconds.\n     *  These should not be changed unless you know exactly what you are\n     *  doing.\n     *\n     *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n     *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n     *      This defaults to 1.1, and with default wait, 66 seconds.\n     *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n     *      Strophe can detect early failure, it will consider the request\n     *      failed if it doesn't return after\n     *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n     *      This defaults to 0.1, and with default wait, 6 seconds.\n     */\n    TIMEOUT: 1.1,\n    SECONDARY_TIMEOUT: 0.1,\n\n    /** Function: addNamespace\n     *  This function is used to extend the current namespaces in\n     *  Strophe.NS.  It takes a key and a value with the key being the\n     *  name of the new namespace, with its actual value.\n     *  For example:\n     *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n     *\n     *  Parameters:\n     *    (String) name - The name under which the namespace will be\n     *      referenced under Strophe.NS\n     *    (String) value - The actual namespace.\n     */\n    addNamespace: function (name, value) {\n        Strophe.NS[name] = value;\n    },\n\n    /** Function: forEachChild\n     *  Map a function over some or all child elements of a given element.\n     *\n     *  This is a small convenience function for mapping a function over\n     *  some or all of the children of an element.  If elemName is null, all\n     *  children will be passed to the function, otherwise only children\n     *  whose tag names match elemName will be passed.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The element to operate on.\n     *    (String) elemName - The child element tag name filter.\n     *    (Function) func - The function to apply to each child.  This\n     *      function should take a single argument, a DOM element.\n     */\n    forEachChild: function (elem, elemName, func) {\n        var i, childNode;\n        for (i = 0; i < elem.childNodes.length; i++) {\n            childNode = elem.childNodes[i];\n            if (childNode.nodeType === Strophe.ElementType.NORMAL &&\n                (!elemName || this.isTagEqual(childNode, elemName))) {\n                func(childNode);\n            }\n        }\n    },\n\n    /** Function: isTagEqual\n     *  Compare an element's tag name with a string.\n     *\n     *  This function is case sensitive.\n     *\n     *  Parameters:\n     *    (XMLElement) el - A DOM element.\n     *    (String) name - The element name.\n     *\n     *  Returns:\n     *    true if the element's tag name matches _el_, and false\n     *    otherwise.\n     */\n    isTagEqual: function (el, name) {\n        return el.tagName === name;\n    },\n\n    /** PrivateVariable: _xmlGenerator\n     *  _Private_ variable that caches a DOM document to\n     *  generate elements.\n     */\n    _xmlGenerator: null,\n\n    /** PrivateFunction: _makeGenerator\n     *  _Private_ function that creates a dummy XML DOM document to serve as\n     *  an element and text node generator.\n     */\n    _makeGenerator: function () {\n        var doc;\n        // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n        // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n        if (document.implementation.createDocument === undefined ||\n                        document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n            doc = this._getIEXmlDom();\n            doc.appendChild(doc.createElement('strophe'));\n        } else {\n            doc = document.implementation\n                .createDocument('jabber:client', 'strophe', null);\n        }\n        return doc;\n    },\n\n    /** Function: xmlGenerator\n     *  Get the DOM document to generate elements.\n     *\n     *  Returns:\n     *    The currently used DOM document.\n     */\n    xmlGenerator: function () {\n        if (!Strophe._xmlGenerator) {\n            Strophe._xmlGenerator = Strophe._makeGenerator();\n        }\n        return Strophe._xmlGenerator;\n    },\n\n    /** PrivateFunction: _getIEXmlDom\n     *  Gets IE xml doc object\n     *\n     *  Returns:\n     *    A Microsoft XML DOM Object\n     *  See Also:\n     *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n     */\n    _getIEXmlDom : function() {\n        var doc = null;\n        var docStrings = [\n            \"Msxml2.DOMDocument.6.0\",\n            \"Msxml2.DOMDocument.5.0\",\n            \"Msxml2.DOMDocument.4.0\",\n            \"MSXML2.DOMDocument.3.0\",\n            \"MSXML2.DOMDocument\",\n            \"MSXML.DOMDocument\",\n            \"Microsoft.XMLDOM\"\n        ];\n\n        for (var d = 0; d < docStrings.length; d++) {\n            if (doc === null) {\n                try {\n                    doc = new ActiveXObject(docStrings[d]);\n                } catch (e) {\n                    doc = null;\n                }\n            } else {\n                break;\n            }\n        }\n        return doc;\n    },\n\n    /** Function: xmlElement\n     *  Create an XML DOM element.\n     *\n     *  This function creates an XML DOM element correctly across all\n     *  implementations. Note that these are not HTML DOM elements, which\n     *  aren't appropriate for XMPP stanzas.\n     *\n     *  Parameters:\n     *    (String) name - The name for the element.\n     *    (Array|Object) attrs - An optional array or object containing\n     *      key/value pairs to use as element attributes. The object should\n     *      be in the format {'key': 'value'} or {key: 'value'}. The array\n     *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n     *    (String) text - The text child data for the element.\n     *\n     *  Returns:\n     *    A new XML DOM element.\n     */\n    xmlElement: function (name) {\n        if (!name) { return null; }\n\n        var node = Strophe.xmlGenerator().createElement(name);\n        // FIXME: this should throw errors if args are the wrong type or\n        // there are more than two optional args\n        var a, i, k;\n        for (a = 1; a < arguments.length; a++) {\n            var arg = arguments[a];\n            if (!arg) { continue; }\n            if (typeof(arg) === \"string\" ||\n                typeof(arg) === \"number\") {\n                node.appendChild(Strophe.xmlTextNode(arg));\n            } else if (typeof(arg) === \"object\" &&\n                       typeof(arg.sort) === \"function\") {\n                for (i = 0; i < arg.length; i++) {\n                    var attr = arg[i];\n                    if (typeof(attr) === \"object\" &&\n                        typeof(attr.sort) === \"function\" &&\n                        attr[1] !== undefined &&\n                        attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                    }\n                }\n            } else if (typeof(arg) === \"object\") {\n                for (k in arg) {\n                    if (arg.hasOwnProperty(k)) {\n                        if (arg[k] !== undefined &&\n                            arg[k] !== null) {\n                            node.setAttribute(k, arg[k]);\n                        }\n                    }\n                }\n            }\n        }\n\n        return node;\n    },\n\n    /*  Function: xmlescape\n     *  Excapes invalid xml characters.\n     *\n     *  Parameters:\n     *     (String) text - text to escape.\n     *\n     *  Returns:\n     *      Escaped text.\n     */\n    xmlescape: function(text) {\n        text = text.replace(/\\&/g, \"&amp;\");\n        text = text.replace(/</g,  \"&lt;\");\n        text = text.replace(/>/g,  \"&gt;\");\n        text = text.replace(/'/g,  \"&apos;\");\n        text = text.replace(/\"/g,  \"&quot;\");\n        return text;\n    },\n\n    /*  Function: xmlunescape\n    *  Unexcapes invalid xml characters.\n    *\n    *  Parameters:\n    *     (String) text - text to unescape.\n    *\n    *  Returns:\n    *      Unescaped text.\n    */\n    xmlunescape: function(text) {\n        text = text.replace(/\\&amp;/g, \"&\");\n        text = text.replace(/&lt;/g,  \"<\");\n        text = text.replace(/&gt;/g,  \">\");\n        text = text.replace(/&apos;/g,  \"'\");\n        text = text.replace(/&quot;/g,  \"\\\"\");\n        return text;\n    },\n\n    /** Function: xmlTextNode\n     *  Creates an XML DOM text node.\n     *\n     *  Provides a cross implementation version of document.createTextNode.\n     *\n     *  Parameters:\n     *    (String) text - The content of the text node.\n     *\n     *  Returns:\n     *    A new XML DOM text node.\n     */\n    xmlTextNode: function (text) {\n        return Strophe.xmlGenerator().createTextNode(text);\n    },\n\n    /** Function: xmlHtmlNode\n     *  Creates an XML DOM html node.\n     *\n     *  Parameters:\n     *    (String) html - The content of the html node.\n     *\n     *  Returns:\n     *    A new XML DOM text node.\n     */\n    xmlHtmlNode: function (html) {\n        var node;\n        //ensure text is escaped\n        if (DOMParser) {\n            var parser = new DOMParser();\n            node = parser.parseFromString(html, \"text/xml\");\n        } else {\n            node = new ActiveXObject(\"Microsoft.XMLDOM\");\n            node.async=\"false\";\n            node.loadXML(html);\n        }\n        return node;\n    },\n\n    /** Function: getText\n     *  Get the concatenation of all text children of an element.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    A String with the concatenated text of all text element children.\n     */\n    getText: function (elem) {\n        if (!elem) { return null; }\n\n        var str = \"\";\n        if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n            str += elem.nodeValue;\n        }\n\n        for (var i = 0; i < elem.childNodes.length; i++) {\n            if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                str += elem.childNodes[i].nodeValue;\n            }\n        }\n\n        return Strophe.xmlescape(str);\n    },\n\n    /** Function: copyElement\n     *  Copy an XML DOM element.\n     *\n     *  This function copies a DOM element and all its descendants and returns\n     *  the new copy.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    A new, copied DOM element tree.\n     */\n    copyElement: function (elem) {\n        var i, el;\n        if (elem.nodeType === Strophe.ElementType.NORMAL) {\n            el = Strophe.xmlElement(elem.tagName);\n\n            for (i = 0; i < elem.attributes.length; i++) {\n                el.setAttribute(elem.attributes[i].nodeName,\n                                elem.attributes[i].value);\n            }\n\n            for (i = 0; i < elem.childNodes.length; i++) {\n                el.appendChild(Strophe.copyElement(elem.childNodes[i]));\n            }\n        } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n            el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n        }\n        return el;\n    },\n\n\n    /** Function: createHtml\n     *  Copy an HTML DOM element into an XML DOM.\n     *\n     *  This function copies a DOM element and all its descendants and returns\n     *  the new copy.\n     *\n     *  Parameters:\n     *    (HTMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    A new, copied DOM element tree.\n     */\n    createHtml: function (elem) {\n        var i, el, j, tag, attribute, value, css, cssAttrs, attr, cssName, cssValue;\n        if (elem.nodeType === Strophe.ElementType.NORMAL) {\n            tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n            if(Strophe.XHTML.validTag(tag)) {\n                try {\n                    el = Strophe.xmlElement(tag);\n                    for(i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        attribute = Strophe.XHTML.attributes[tag][i];\n                        value = elem.getAttribute(attribute);\n                        if(typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                            continue;\n                        }\n                        if(attribute === 'style' && typeof value === 'object') {\n                            if(typeof value.cssText !== 'undefined') {\n                                value = value.cssText; // we're dealing with IE, need to get CSS out\n                            }\n                        }\n                        // filter out invalid css styles\n                        if(attribute === 'style') {\n                            css = [];\n                            cssAttrs = value.split(';');\n                            for(j = 0; j < cssAttrs.length; j++) {\n                                attr = cssAttrs[j].split(':');\n                                cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n                                if(Strophe.XHTML.validCSS(cssName)) {\n                                    cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                                    css.push(cssName + ': ' + cssValue);\n                                }\n                            }\n                            if(css.length > 0) {\n                                value = css.join('; ');\n                                el.setAttribute(attribute, value);\n                            }\n                        } else {\n                            el.setAttribute(attribute, value);\n                        }\n                    }\n\n                    for (i = 0; i < elem.childNodes.length; i++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                    }\n                } catch(e) { // invalid elements\n                  el = Strophe.xmlTextNode('');\n                }\n            } else {\n                el = Strophe.xmlGenerator().createDocumentFragment();\n                for (i = 0; i < elem.childNodes.length; i++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                }\n            }\n        } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n            el = Strophe.xmlGenerator().createDocumentFragment();\n            for (i = 0; i < elem.childNodes.length; i++) {\n                el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n            }\n        } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n            el = Strophe.xmlTextNode(elem.nodeValue);\n        }\n        return el;\n    },\n\n    /** Function: escapeNode\n     *  Escape the node part (also called local part) of a JID.\n     *\n     *  Parameters:\n     *    (String) node - A node (or local part).\n     *\n     *  Returns:\n     *    An escaped node (or local part).\n     */\n    escapeNode: function (node) {\n        if (typeof node !== \"string\") { return node; }\n        return node.replace(/^\\s+|\\s+$/g, '')\n            .replace(/\\\\/g,  \"\\\\5c\")\n            .replace(/ /g,   \"\\\\20\")\n            .replace(/\\\"/g,  \"\\\\22\")\n            .replace(/\\&/g,  \"\\\\26\")\n            .replace(/\\'/g,  \"\\\\27\")\n            .replace(/\\//g,  \"\\\\2f\")\n            .replace(/:/g,   \"\\\\3a\")\n            .replace(/</g,   \"\\\\3c\")\n            .replace(/>/g,   \"\\\\3e\")\n            .replace(/@/g,   \"\\\\40\");\n    },\n\n    /** Function: unescapeNode\n     *  Unescape a node part (also called local part) of a JID.\n     *\n     *  Parameters:\n     *    (String) node - A node (or local part).\n     *\n     *  Returns:\n     *    An unescaped node (or local part).\n     */\n    unescapeNode: function (node) {\n        if (typeof node !== \"string\") { return node; }\n        return node.replace(/\\\\20/g, \" \")\n            .replace(/\\\\22/g, '\"')\n            .replace(/\\\\26/g, \"&\")\n            .replace(/\\\\27/g, \"'\")\n            .replace(/\\\\2f/g, \"/\")\n            .replace(/\\\\3a/g, \":\")\n            .replace(/\\\\3c/g, \"<\")\n            .replace(/\\\\3e/g, \">\")\n            .replace(/\\\\40/g, \"@\")\n            .replace(/\\\\5c/g, \"\\\\\");\n    },\n\n    /** Function: getNodeFromJid\n     *  Get the node portion of a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the node.\n     */\n    getNodeFromJid: function (jid) {\n        if (jid.indexOf(\"@\") < 0) { return null; }\n        return jid.split(\"@\")[0];\n    },\n\n    /** Function: getDomainFromJid\n     *  Get the domain portion of a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the domain.\n     */\n    getDomainFromJid: function (jid) {\n        var bare = Strophe.getBareJidFromJid(jid);\n        if (bare.indexOf(\"@\") < 0) {\n            return bare;\n        } else {\n            var parts = bare.split(\"@\");\n            parts.splice(0, 1);\n            return parts.join('@');\n        }\n    },\n\n    /** Function: getResourceFromJid\n     *  Get the resource portion of a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the resource.\n     */\n    getResourceFromJid: function (jid) {\n        var s = jid.split(\"/\");\n        if (s.length < 2) { return null; }\n        s.splice(0, 1);\n        return s.join('/');\n    },\n\n    /** Function: getBareJidFromJid\n     *  Get the bare JID from a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the bare JID.\n     */\n    getBareJidFromJid: function (jid) {\n        return jid ? jid.split(\"/\")[0] : null;\n    },\n\n    /** PrivateFunction: _handleError\n     *  _Private_ function that properly logs an error to the console\n     */\n    _handleError: function (e) {\n        if (typeof e.stack !== \"undefined\") {\n            Strophe.fatal(e.stack);\n        }\n        if (e.sourceURL) {\n            Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" +\n                          e.line + \" - \" + e.name + \": \" + e.message);\n        } else if (e.fileName) {\n            Strophe.fatal(\"error: \" + this.handler + \" \" +\n                          e.fileName + \":\" + e.lineNumber + \" - \" +\n                          e.name + \": \" + e.message);\n        } else {\n            Strophe.fatal(\"error: \" + e.message);\n        }\n    },\n\n    /** Function: log\n     *  User overrideable logging function.\n     *\n     *  This function is called whenever the Strophe library calls any\n     *  of the logging functions.  The default implementation of this\n     *  function logs only fatal errors.  If client code wishes to handle the logging\n     *  messages, it should override this with\n     *  > Strophe.log = function (level, msg) {\n     *  >   (user code here)\n     *  > };\n     *\n     *  Please note that data sent and received over the wire is logged\n     *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n     *\n     *  The different levels and their meanings are\n     *\n     *    DEBUG - Messages useful for debugging purposes.\n     *    INFO - Informational messages.  This is mostly information like\n     *      'disconnect was called' or 'SASL auth succeeded'.\n     *    WARN - Warnings about potential problems.  This is mostly used\n     *      to report transient connection errors like request timeouts.\n     *    ERROR - Some error occurred.\n     *    FATAL - A non-recoverable fatal error occurred.\n     *\n     *  Parameters:\n     *    (Integer) level - The log level of the log message.  This will\n     *      be one of the values in Strophe.LogLevel.\n     *    (String) msg - The log message.\n     */\n    log: function (level, msg) {\n        if (level === this.LogLevel.FATAL &&\n            typeof window.console === 'object' &&\n            typeof window.console.error === 'function') {\n            window.console.error(msg);\n        }\n    },\n\n    /** Function: debug\n     *  Log a message at the Strophe.LogLevel.DEBUG level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    debug: function(msg) {\n        this.log(this.LogLevel.DEBUG, msg);\n    },\n\n    /** Function: info\n     *  Log a message at the Strophe.LogLevel.INFO level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    info: function (msg) {\n        this.log(this.LogLevel.INFO, msg);\n    },\n\n    /** Function: warn\n     *  Log a message at the Strophe.LogLevel.WARN level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    warn: function (msg) {\n        this.log(this.LogLevel.WARN, msg);\n    },\n\n    /** Function: error\n     *  Log a message at the Strophe.LogLevel.ERROR level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    error: function (msg) {\n        this.log(this.LogLevel.ERROR, msg);\n    },\n\n    /** Function: fatal\n     *  Log a message at the Strophe.LogLevel.FATAL level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    fatal: function (msg) {\n        this.log(this.LogLevel.FATAL, msg);\n    },\n\n    /** Function: serialize\n     *  Render a DOM element and all descendants to a String.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    The serialized element tree as a String.\n     */\n    serialize: function (elem) {\n        var result;\n\n        if (!elem) { return null; }\n\n        if (typeof(elem.tree) === \"function\") {\n            elem = elem.tree();\n        }\n\n        var nodeName = elem.nodeName;\n        var i, child;\n\n        if (elem.getAttribute(\"_realname\")) {\n            nodeName = elem.getAttribute(\"_realname\");\n        }\n\n        result = \"<\" + nodeName;\n        for (i = 0; i < elem.attributes.length; i++) {\n             if(elem.attributes[i].nodeName !== \"_realname\") {\n               result += \" \" + elem.attributes[i].nodeName +\n                   \"='\" + Strophe.xmlescape(elem.attributes[i].value) + \"'\";\n             }\n        }\n\n        if (elem.childNodes.length > 0) {\n            result += \">\";\n            for (i = 0; i < elem.childNodes.length; i++) {\n                child = elem.childNodes[i];\n                switch( child.nodeType ){\n                  case Strophe.ElementType.NORMAL:\n                    // normal element, so recurse\n                    result += Strophe.serialize(child);\n                    break;\n                  case Strophe.ElementType.TEXT:\n                    // text element to escape values\n                    result += Strophe.xmlescape(child.nodeValue);\n                    break;\n                  case Strophe.ElementType.CDATA:\n                    // cdata section so don't escape values\n                    result += \"<![CDATA[\"+child.nodeValue+\"]]>\";\n                }\n            }\n            result += \"</\" + nodeName + \">\";\n        } else {\n            result += \"/>\";\n        }\n\n        return result;\n    },\n\n    /** PrivateVariable: _requestId\n     *  _Private_ variable that keeps track of the request ids for\n     *  connections.\n     */\n    _requestId: 0,\n\n    /** PrivateVariable: Strophe.connectionPlugins\n     *  _Private_ variable Used to store plugin names that need\n     *  initialization on Strophe.Connection construction.\n     */\n    _connectionPlugins: {},\n\n    /** Function: addConnectionPlugin\n     *  Extends the Strophe.Connection object with the given plugin.\n     *\n     *  Parameters:\n     *    (String) name - The name of the extension.\n     *    (Object) ptype - The plugin's prototype.\n     */\n    addConnectionPlugin: function (name, ptype) {\n        Strophe._connectionPlugins[name] = ptype;\n    }\n};\n\n/** Class: Strophe.Builder\n *  XML DOM builder.\n *\n *  This object provides an interface similar to JQuery but for building\n *  DOM elements easily and rapidly.  All the functions except for toString()\n *  and tree() return the object, so calls can be chained.  Here's an\n *  example using the $iq() builder helper.\n *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n *  >     .c('query', {xmlns: 'strophe:example'})\n *  >     .c('example')\n *  >     .toString()\n *\n *  The above generates this XML fragment\n *  > <iq to='you' from='me' type='get' id='1'>\n *  >   <query xmlns='strophe:example'>\n *  >     <example/>\n *  >   </query>\n *  > </iq>\n *  The corresponding DOM manipulations to get a similar fragment would be\n *  a lot more tedious and probably involve several helper variables.\n *\n *  Since adding children makes new operations operate on the child, up()\n *  is provided to traverse up the tree.  To add two children, do\n *  > builder.c('child1', ...).up().c('child2', ...)\n *  The next operation on the Builder will be relative to the second child.\n */\n\n/** Constructor: Strophe.Builder\n *  Create a Strophe.Builder object.\n *\n *  The attributes should be passed in object notation.  For example\n *  > var b = new Builder('message', {to: 'you', from: 'me'});\n *  or\n *  > var b = new Builder('messsage', {'xml:lang': 'en'});\n *\n *  Parameters:\n *    (String) name - The name of the root element.\n *    (Object) attrs - The attributes for the root element in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder.\n */\nStrophe.Builder = function (name, attrs) {\n    // Set correct namespace for jabber:client elements\n    if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n        if (attrs && !attrs.xmlns) {\n            attrs.xmlns = Strophe.NS.CLIENT;\n        } else if (!attrs) {\n            attrs = {xmlns: Strophe.NS.CLIENT};\n        }\n    }\n\n    // Holds the tree being built.\n    this.nodeTree = Strophe.xmlElement(name, attrs);\n\n    // Points to the current operation node.\n    this.node = this.nodeTree;\n};\n\nStrophe.Builder.prototype = {\n    /** Function: tree\n     *  Return the DOM tree.\n     *\n     *  This function returns the current DOM tree as an element object.  This\n     *  is suitable for passing to functions like Strophe.Connection.send().\n     *\n     *  Returns:\n     *    The DOM tree as a element object.\n     */\n    tree: function () {\n        return this.nodeTree;\n    },\n\n    /** Function: toString\n     *  Serialize the DOM tree to a String.\n     *\n     *  This function returns a string serialization of the current DOM\n     *  tree.  It is often used internally to pass data to a\n     *  Strophe.Request object.\n     *\n     *  Returns:\n     *    The serialized DOM tree in a String.\n     */\n    toString: function () {\n        return Strophe.serialize(this.nodeTree);\n    },\n\n    /** Function: up\n     *  Make the current parent element the new current element.\n     *\n     *  This function is often used after c() to traverse back up the tree.\n     *  For example, to add two children to the same element\n     *  > builder.c('child1', {}).up().c('child2', {});\n     *\n     *  Returns:\n     *    The Stophe.Builder object.\n     */\n    up: function () {\n        this.node = this.node.parentNode;\n        return this;\n    },\n\n    /** Function: root\n     *  Make the root element the new current element.\n     *\n     *  When at a deeply nested element in the tree, this function can be used\n     *  to jump back to the root of the tree, instead of having to repeatedly\n     *  call up().\n     *\n     *  Returns:\n     *    The Stophe.Builder object.\n     */\n    root: function () {\n        this.node = this.nodeTree;\n        return this;\n    },\n\n    /** Function: attrs\n     *  Add or modify attributes of the current element.\n     *\n     *  The attributes should be passed in object notation.  This function\n     *  does not move the current element pointer.\n     *\n     *  Parameters:\n     *    (Object) moreattrs - The attributes to add/modify in object notation.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    attrs: function (moreattrs) {\n        for (var k in moreattrs) {\n            if (moreattrs.hasOwnProperty(k)) {\n                if (moreattrs[k] === undefined) {\n                    this.node.removeAttribute(k);\n                } else {\n                    this.node.setAttribute(k, moreattrs[k]);\n                }\n            }\n        }\n        return this;\n    },\n\n    /** Function: c\n     *  Add a child to the current element and make it the new current\n     *  element.\n     *\n     *  This function moves the current element pointer to the child,\n     *  unless text is provided.  If you need to add another child, it\n     *  is necessary to use up() to go back to the parent in the tree.\n     *\n     *  Parameters:\n     *    (String) name - The name of the child.\n     *    (Object) attrs - The attributes of the child in object notation.\n     *    (String) text - The text to add to the child.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    c: function (name, attrs, text) {\n        var child = Strophe.xmlElement(name, attrs, text);\n        this.node.appendChild(child);\n        if (typeof text !== \"string\" && typeof text !==\"number\") {\n            this.node = child;\n        }\n        return this;\n    },\n\n    /** Function: cnode\n     *  Add a child to the current element and make it the new current\n     *  element.\n     *\n     *  This function is the same as c() except that instead of using a\n     *  name and an attributes object to create the child it uses an\n     *  existing DOM element object.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    cnode: function (elem) {\n        var impNode;\n        var xmlGen = Strophe.xmlGenerator();\n        try {\n            impNode = (xmlGen.importNode !== undefined);\n        } catch (e) {\n            impNode = false;\n        }\n        var newElem = impNode ?\n                      xmlGen.importNode(elem, true) :\n                      Strophe.copyElement(elem);\n        this.node.appendChild(newElem);\n        this.node = newElem;\n        return this;\n    },\n\n    /** Function: t\n     *  Add a child text element.\n     *\n     *  This *does not* make the child the new current element since there\n     *  are no children of text elements.\n     *\n     *  Parameters:\n     *    (String) text - The text data to append to the current element.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    t: function (text) {\n        var child = Strophe.xmlTextNode(text);\n        this.node.appendChild(child);\n        return this;\n    },\n\n    /** Function: h\n     *  Replace current element contents with the HTML passed in.\n     *\n     *  This *does not* make the child the new current element\n     *\n     *  Parameters:\n     *    (String) html - The html to insert as contents of current element.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    h: function (html) {\n        var fragment = document.createElement('body');\n\n        // force the browser to try and fix any invalid HTML tags\n        fragment.innerHTML = html;\n\n        // copy cleaned html into an xml dom\n        var xhtml = Strophe.createHtml(fragment);\n\n        while(xhtml.childNodes.length > 0) {\n            this.node.appendChild(xhtml.childNodes[0]);\n        }\n        return this;\n    }\n};\n\n/** PrivateClass: Strophe.Handler\n *  _Private_ helper class for managing stanza handlers.\n *\n *  A Strophe.Handler encapsulates a user provided callback function to be\n *  executed when matching stanzas are received by the connection.\n *  Handlers can be either one-off or persistant depending on their\n *  return value. Returning true will cause a Handler to remain active, and\n *  returning false will remove the Handler.\n *\n *  Users will not use Strophe.Handler objects directly, but instead they\n *  will use Strophe.Connection.addHandler() and\n *  Strophe.Connection.deleteHandler().\n */\n\n/** PrivateConstructor: Strophe.Handler\n *  Create and initialize a new Strophe.Handler.\n *\n *  Parameters:\n *    (Function) handler - A function to be executed when the handler is run.\n *    (String) ns - The namespace to match.\n *    (String) name - The element name to match.\n *    (String) type - The element type to match.\n *    (String) id - The element id attribute to match.\n *    (String) from - The element from attribute to match.\n *    (Object) options - Handler options\n *\n *  Returns:\n *    A new Strophe.Handler object.\n */\nStrophe.Handler = function (handler, ns, name, type, id, from, options) {\n    this.handler = handler;\n    this.ns = ns;\n    this.name = name;\n    this.type = type;\n    this.id = id;\n    this.options = options || {'matchBareFromJid': false, 'ignoreNamespaceFragment': false};\n    // BBB: Maintain backward compatibility with old `matchBare` option\n    if (this.options.matchBare) {\n        Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n        this.options.matchBareFromJid = this.options.matchBare;\n        delete this.options.matchBare;\n    }\n\n    if (this.options.matchBareFromJid) {\n        this.from = from ? Strophe.getBareJidFromJid(from) : null;\n    } else {\n        this.from = from;\n    }\n    // whether the handler is a user handler or a system handler\n    this.user = true;\n};\n\nStrophe.Handler.prototype = {\n    /** PrivateFunction: getNamespace\n     *  Returns the XML namespace attribute on an element.\n     *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n     *  URL fragment will be stripped.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML element with the namespace.\n     *\n     *  Returns:\n     *    The namespace, with optionally the fragment stripped.\n     */\n    getNamespace: function (elem) {\n        var elNamespace = elem.getAttribute(\"xmlns\");\n        if (elNamespace && this.options.ignoreNamespaceFragment) {\n            elNamespace = elNamespace.split('#')[0];\n        }\n        return elNamespace;\n    },\n\n    /** PrivateFunction: namespaceMatch\n     *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML element to test.\n     *\n     *  Returns:\n     *    true if the stanza matches and false otherwise.\n     */\n    namespaceMatch: function (elem) {\n        var nsMatch = false;\n        if (!this.ns) {\n            return true;\n        } else {\n            var that = this;\n            Strophe.forEachChild(elem, null, function (elem) {\n                if (that.getNamespace(elem) === that.ns) {\n                    nsMatch = true;\n                }\n            });\n            nsMatch = nsMatch || this.getNamespace(elem) === this.ns;\n        }\n        return nsMatch;\n    },\n\n    /** PrivateFunction: isMatch\n     *  Tests if a stanza matches the Strophe.Handler.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML element to test.\n     *\n     *  Returns:\n     *    true if the stanza matches and false otherwise.\n     */\n    isMatch: function (elem) {\n        var from = elem.getAttribute('from');\n        if (this.options.matchBareFromJid) {\n            from = Strophe.getBareJidFromJid(from);\n        }\n        var elem_type = elem.getAttribute(\"type\");\n        if (this.namespaceMatch(elem) &&\n            (!this.name || Strophe.isTagEqual(elem, this.name)) &&\n            (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) &&\n            (!this.id || elem.getAttribute(\"id\") === this.id) &&\n            (!this.from || from === this.from)) {\n                return true;\n        }\n        return false;\n    },\n\n    /** PrivateFunction: run\n     *  Run the callback on a matching stanza.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The DOM element that triggered the\n     *      Strophe.Handler.\n     *\n     *  Returns:\n     *    A boolean indicating if the handler should remain active.\n     */\n    run: function (elem) {\n        var result = null;\n        try {\n            result = this.handler(elem);\n        } catch (e) {\n            Strophe._handleError(e);\n            throw e;\n        }\n        return result;\n    },\n\n    /** PrivateFunction: toString\n     *  Get a String representation of the Strophe.Handler object.\n     *\n     *  Returns:\n     *    A String.\n     */\n    toString: function () {\n        return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" +\n            this.id + \",\" + this.ns + \")}\";\n    }\n};\n\n/** PrivateClass: Strophe.TimedHandler\n *  _Private_ helper class for managing timed handlers.\n *\n *  A Strophe.TimedHandler encapsulates a user provided callback that\n *  should be called after a certain period of time or at regular\n *  intervals.  The return value of the callback determines whether the\n *  Strophe.TimedHandler will continue to fire.\n *\n *  Users will not use Strophe.TimedHandler objects directly, but instead\n *  they will use Strophe.Connection.addTimedHandler() and\n *  Strophe.Connection.deleteTimedHandler().\n */\n\n/** PrivateConstructor: Strophe.TimedHandler\n *  Create and initialize a new Strophe.TimedHandler object.\n *\n *  Parameters:\n *    (Integer) period - The number of milliseconds to wait before the\n *      handler is called.\n *    (Function) handler - The callback to run when the handler fires.  This\n *      function should take no arguments.\n *\n *  Returns:\n *    A new Strophe.TimedHandler object.\n */\nStrophe.TimedHandler = function (period, handler) {\n    this.period = period;\n    this.handler = handler;\n    this.lastCalled = new Date().getTime();\n    this.user = true;\n};\n\nStrophe.TimedHandler.prototype = {\n    /** PrivateFunction: run\n     *  Run the callback for the Strophe.TimedHandler.\n     *\n     *  Returns:\n     *    true if the Strophe.TimedHandler should be called again, and false\n     *      otherwise.\n     */\n    run: function () {\n        this.lastCalled = new Date().getTime();\n        return this.handler();\n    },\n\n    /** PrivateFunction: reset\n     *  Reset the last called time for the Strophe.TimedHandler.\n     */\n    reset: function () {\n        this.lastCalled = new Date().getTime();\n    },\n\n    /** PrivateFunction: toString\n     *  Get a string representation of the Strophe.TimedHandler object.\n     *\n     *  Returns:\n     *    The string representation.\n     */\n    toString: function () {\n        return \"{TimedHandler: \" + this.handler + \"(\" + this.period +\")}\";\n    }\n};\n\n/** Class: Strophe.Connection\n *  XMPP Connection manager.\n *\n *  This class is the main part of Strophe.  It manages a BOSH or websocket\n *  connection to an XMPP server and dispatches events to the user callbacks\n *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n *  and legacy authentication.\n *\n *  After creating a Strophe.Connection object, the user will typically\n *  call connect() with a user supplied callback to handle connection level\n *  events like authentication failure, disconnection, or connection\n *  complete.\n *\n *  The user will also have several event handlers defined by using\n *  addHandler() and addTimedHandler().  These will allow the user code to\n *  respond to interesting stanzas or do something periodically with the\n *  connection. These handlers will be active once authentication is\n *  finished.\n *\n *  To send data to the connection, use send().\n */\n\n/** Constructor: Strophe.Connection\n *  Create and initialize a Strophe.Connection object.\n *\n *  The transport-protocol for this connection will be chosen automatically\n *  based on the given service parameter. URLs starting with \"ws://\" or\n *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n *  or without a protocol will use BOSH.\n *\n *  To make Strophe connect to the current host you can leave out the protocol\n *  and host part and just pass the path, e.g.\n *\n *  > var conn = new Strophe.Connection(\"/http-bind/\");\n *\n *  Options common to both Websocket and BOSH:\n *  ------------------------------------------\n *\n *  cookies:\n *\n *  The *cookies* option allows you to pass in cookies to be added to the\n *  document. These cookies will then be included in the BOSH XMLHttpRequest\n *  or in the websocket connection.\n *\n *  The passed in value must be a map of cookie names and string values.\n *\n *  > { \"myCookie\": {\n *  >     \"value\": \"1234\",\n *  >     \"domain\": \".example.org\",\n *  >     \"path\": \"/\",\n *  >     \"expires\": expirationDate\n *  >     }\n *  > }\n *\n *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n *  Those cookies need to be set under those domains, for example they can be\n *  set server-side by making a XHR call to that domain to ask it to set any\n *  necessary cookies.\n *\n *  mechanisms:\n *\n *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n *  instance of Strophe.Connection (and therefore your XMPP client) will\n *  support.\n *\n *  The value must be an array of objects with Strophe.SASLMechanism\n *  prototypes.\n *\n *  If nothing is specified, then the following mechanisms (and their\n *  priorities) are registered:\n *\n *      SCRAM-SHA1 - 70\n *      DIGEST-MD5 - 60\n *      PLAIN - 50\n *      OAUTH-BEARER - 40\n *      OAUTH-2 - 30\n *      ANONYMOUS - 20\n *      EXTERNAL - 10\n *\n *  WebSocket options:\n *  ------------------\n *\n *  If you want to connect to the current host with a WebSocket connection you\n *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n *  for Secure WebSocket.\n *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n *\n *  > var conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n *\n *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n *  of the current site.\n *\n *  Also because downgrading security is not permitted by browsers, when using\n *  relative URLs both BOSH and WebSocket connections will use their secure\n *  variants if the current connection to the site is also secure (https).\n *\n *  BOSH options:\n *  -------------\n *\n *  By adding \"sync\" to the options, you can control if requests will\n *  be made synchronously or not. The default behaviour is asynchronous.\n *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n *  > var conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n *\n *  You can also toggle this on an already established connection.\n *  > conn.options.sync = true;\n *\n *  The *customHeaders* option can be used to provide custom HTTP headers to be\n *  included in the XMLHttpRequests made.\n *\n *  The *keepalive* option can be used to instruct Strophe to maintain the\n *  current BOSH session across interruptions such as webpage reloads.\n *\n *  It will do this by caching the sessions tokens in sessionStorage, and when\n *  \"restore\" is called it will check whether there are cached tokens with\n *  which it can resume an existing session.\n *\n *  The *withCredentials* option should receive a Boolean value and is used to\n *  indicate wether cookies should be included in ajax requests (by default\n *  they're not).\n *  Set this value to true if you are connecting to a BOSH service\n *  and for some reason need to send cookies to it.\n *  In order for this to work cross-domain, the server must also enable\n *  credentials by setting the Access-Control-Allow-Credentials response header\n *  to \"true\". For most usecases however this setting should be false (which\n *  is the default).\n *  Additionally, when using Access-Control-Allow-Credentials, the\n *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n *  instead must be restricted to actual domains.\n *\n *  The *contentType* option can be set to change the default Content-Type\n *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n *  CORS preflight requests that are sent to the server.\n *\n *  Parameters:\n *    (String) service - The BOSH or WebSocket service URL.\n *    (Object) options - A hash of configuration options\n *\n *  Returns:\n *    A new Strophe.Connection object.\n */\nStrophe.Connection = function (service, options) {\n    // The service URL\n    this.service = service;\n    // Configuration options\n    this.options = options || {};\n    var proto = this.options.protocol || \"\";\n\n    // Select protocal based on service or options\n    if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 ||\n            proto.indexOf(\"ws\") === 0) {\n        this._proto = new Strophe.Websocket(this);\n    } else {\n        this._proto = new Strophe.Bosh(this);\n    }\n\n    /* The connected JID. */\n    this.jid = \"\";\n    /* the JIDs domain */\n    this.domain = null;\n    /* stream:features */\n    this.features = null;\n\n    // SASL\n    this._sasl_data = {};\n    this.do_session = false;\n    this.do_bind = false;\n\n    // handler lists\n    this.timedHandlers = [];\n    this.handlers = [];\n    this.removeTimeds = [];\n    this.removeHandlers = [];\n    this.addTimeds = [];\n    this.addHandlers = [];\n    this.protocolErrorHandlers = {\n        'HTTP': {},\n        'websocket': {}\n    };\n\n    this._idleTimeout = null;\n    this._disconnectTimeout = null;\n\n    this.authenticated = false;\n    this.connected = false;\n    this.disconnecting = false;\n    this.do_authentication = true;\n    this.paused = false;\n    this.restored = false;\n\n    this._data = [];\n    this._uniqueId = 0;\n\n    this._sasl_success_handler = null;\n    this._sasl_failure_handler = null;\n    this._sasl_challenge_handler = null;\n\n    // Max retries before disconnecting\n    this.maxRetries = 5;\n\n    // Call onIdle callback every 1/10th of a second\n    // XXX: setTimeout should be called only with function expressions (23974bc1)\n    this._idleTimeout = setTimeout(function() {\n        this._onIdle();\n    }.bind(this), 100);\n\n    utils.addCookies(this.options.cookies);\n    this.registerSASLMechanisms(this.options.mechanisms);\n\n    // initialize plugins\n    for (var k in Strophe._connectionPlugins) {\n        if (Strophe._connectionPlugins.hasOwnProperty(k)) {\n            var ptype = Strophe._connectionPlugins[k];\n            // jslint complaints about the below line, but this is fine\n            var F = function () {}; // jshint ignore:line\n            F.prototype = ptype;\n            this[k] = new F();\n            this[k].init(this);\n        }\n    }\n};\n\nStrophe.Connection.prototype = {\n    /** Function: reset\n     *  Reset the connection.\n     *\n     *  This function should be called after a connection is disconnected\n     *  before that connection is reused.\n     */\n    reset: function () {\n        this._proto._reset();\n\n        // SASL\n        this.do_session = false;\n        this.do_bind = false;\n\n        // handler lists\n        this.timedHandlers = [];\n        this.handlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        this.authenticated = false;\n        this.connected = false;\n        this.disconnecting = false;\n        this.restored = false;\n\n        this._data = [];\n        this._requests = [];\n        this._uniqueId = 0;\n    },\n\n    /** Function: pause\n     *  Pause the request manager.\n     *\n     *  This will prevent Strophe from sending any more requests to the\n     *  server.  This is very useful for temporarily pausing\n     *  BOSH-Connections while a lot of send() calls are happening quickly.\n     *  This causes Strophe to send the data in a single request, saving\n     *  many request trips.\n     */\n    pause: function () {\n        this.paused = true;\n    },\n\n    /** Function: resume\n     *  Resume the request manager.\n     *\n     *  This resumes after pause() has been called.\n     */\n    resume: function () {\n        this.paused = false;\n    },\n\n    /** Function: getUniqueId\n     *  Generate a unique ID for use in <iq/> elements.\n     *\n     *  All <iq/> stanzas are required to have unique id attributes.  This\n     *  function makes creating these easy.  Each connection instance has\n     *  a counter which starts from zero, and the value of this counter\n     *  plus a colon followed by the suffix becomes the unique id. If no\n     *  suffix is supplied, the counter is used as the unique id.\n     *\n     *  Suffixes are used to make debugging easier when reading the stream\n     *  data, and their use is recommended.  The counter resets to 0 for\n     *  every new connection for the same reason.  For connections to the\n     *  same server that authenticate the same way, all the ids should be\n     *  the same, which makes it easy to see changes.  This is useful for\n     *  automated testing as well.\n     *\n     *  Parameters:\n     *    (String) suffix - A optional suffix to append to the id.\n     *\n     *  Returns:\n     *    A unique string to be used for the id attribute.\n     */\n    getUniqueId: function(suffix) {\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0,\n                v = c === 'x' ? r : r & 0x3 | 0x8;\n            return v.toString(16);\n        });\n        if (typeof(suffix) === \"string\" || typeof(suffix) === \"number\") {\n            return uuid + \":\" + suffix;\n        } else {\n            return uuid + \"\";\n        }\n    },\n\n    /** Function: addProtocolErrorHandler\n     *  Register a handler function for when a protocol (websocker or HTTP)\n     *  error occurs.\n     *\n     *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n     *  Patches that handle websocket errors would be very welcome.\n     *\n     *  Parameters:\n     *    (String) protocol - 'HTTP' or 'websocket'\n     *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n     *    (Function) callback - Function that will fire on Http error\n     *\n     *  Example:\n     *  function onError(err_code){\n     *    //do stuff\n     *  }\n     *\n     *  var conn = Strophe.connect('http://example.com/http-bind');\n     *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n     *  // Triggers HTTP 500 error and onError handler will be called\n     *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n     */\n    addProtocolErrorHandler: function(protocol, status_code, callback){\n        this.protocolErrorHandlers[protocol][status_code] = callback;\n    },\n\n\n    /** Function: connect\n     *  Starts the connection process.\n     *\n     *  As the connection process proceeds, the user supplied callback will\n     *  be triggered multiple times with status updates.  The callback\n     *  should take two arguments - the status code and the error condition.\n     *\n     *  The status code will be one of the values in the Strophe.Status\n     *  constants.  The error condition will be one of the conditions\n     *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n     *\n     *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n     *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n     *  of the optional parameters.\n     *\n     *  Parameters:\n     *    (String) jid - The user's JID.  This may be a bare JID,\n     *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n     *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n     *      process the provided password value as an access token).\n     *    (String) pass - The user's password.\n     *    (Function) callback - The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (String) route - The optional route value.\n     *    (String) authcid - The optional alternative authentication identity\n     *      (username) if intending to impersonate another user.\n     *      When using the SASL-EXTERNAL authentication mechanism, for example\n     *      with client certificates, then the authcid value is used to\n     *      determine whether an authorization JID (authzid) should be sent to\n     *      the server. The authzid should not be sent to the server if the\n     *      authzid and authcid are the same. So to prevent it from being sent\n     *      (for example when the JID is already contained in the client\n     *      certificate), set authcid to that same JID. See XEP-178 for more\n     *      details.\n     */\n    connect: function (jid, pass, callback, wait, hold, route, authcid) {\n        this.jid = jid;\n        /** Variable: authzid\n         *  Authorization identity.\n         */\n        this.authzid = Strophe.getBareJidFromJid(this.jid);\n\n        /** Variable: authcid\n         *  Authentication identity (User name).\n         */\n        this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n\n        /** Variable: pass\n         *  Authentication identity (User password).\n         */\n        this.pass = pass;\n\n        /** Variable: servtype\n         *  Digest MD5 compatibility.\n         */\n        this.servtype = \"xmpp\";\n\n        this.connect_callback = callback;\n        this.disconnecting = false;\n        this.connected = false;\n        this.authenticated = false;\n        this.restored = false;\n\n        // parse jid for domain\n        this.domain = Strophe.getDomainFromJid(this.jid);\n\n        this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n        this._proto._connect(wait, hold, route);\n    },\n\n    /** Function: attach\n     *  Attach to an already created and authenticated BOSH session.\n     *\n     *  This function is provided to allow Strophe to attach to BOSH\n     *  sessions which have been created externally, perhaps by a Web\n     *  application.  This is often used to support auto-login type features\n     *  without putting user credentials into the page.\n     *\n     *  Parameters:\n     *    (String) jid - The full JID that is bound by the session.\n     *    (String) sid - The SID of the BOSH session.\n     *    (String) rid - The current RID of the BOSH session.  This RID\n     *      will be used by the next request.\n     *    (Function) callback The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    attach: function (jid, sid, rid, callback, wait, hold, wind) {\n        if (this._proto instanceof Strophe.Bosh) {\n            this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n        } else {\n            throw {\n                name: 'StropheSessionError',\n                message: 'The \"attach\" method can only be used with a BOSH connection.'\n            };\n        }\n    },\n\n    /** Function: restore\n     *  Attempt to restore a cached BOSH session.\n     *\n     *  This function is only useful in conjunction with providing the\n     *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n     *\n     *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n     *  RID (Request ID) and SID (Session ID) and then when this function is\n     *  called, it will attempt to restore the session from those cached\n     *  tokens.\n     *\n     *  This function must therefore be called instead of connect or attach.\n     *\n     *  For an example on how to use it, please see examples/restore.js\n     *\n     *  Parameters:\n     *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n     *    (Function) callback - The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    restore: function (jid, callback, wait, hold, wind) {\n        if (this._sessionCachingSupported()) {\n            this._proto._restore(jid, callback, wait, hold, wind);\n        } else {\n            throw {\n                name: 'StropheSessionError',\n                message: 'The \"restore\" method can only be used with a BOSH connection.'\n            };\n        }\n    },\n\n    /** PrivateFunction: _sessionCachingSupported\n     * Checks whether sessionStorage and JSON are supported and whether we're\n     * using BOSH.\n     */\n    _sessionCachingSupported: function () {\n        if (this._proto instanceof Strophe.Bosh) {\n            if (!JSON) { return false; }\n            try {\n                sessionStorage.setItem('_strophe_', '_strophe_');\n                sessionStorage.removeItem('_strophe_');\n            } catch (e) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    },\n\n    /** Function: xmlInput\n     *  User overrideable function that receives XML data coming into the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.xmlInput = function (elem) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n     *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n     *\n     *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n     *  <Strophe.Bosh.strip> if you want to strip this tag.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML data received by the connection.\n     */\n    /* jshint unused:false */\n    xmlInput: function (elem) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: xmlOutput\n     *  User overrideable function that receives XML data sent to the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.xmlOutput = function (elem) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n     *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n     *\n     *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n     *  <Strophe.Bosh.strip> if you want to strip this tag.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XMLdata sent by the connection.\n     */\n    /* jshint unused:false */\n    xmlOutput: function (elem) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: rawInput\n     *  User overrideable function that receives raw data coming into the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.rawInput = function (data) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Parameters:\n     *    (String) data - The data received by the connection.\n     */\n    /* jshint unused:false */\n    rawInput: function (data) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: rawOutput\n     *  User overrideable function that receives raw data sent to the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.rawOutput = function (data) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Parameters:\n     *    (String) data - The data sent by the connection.\n     */\n    /* jshint unused:false */\n    rawOutput: function (data) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: nextValidRid\n     *  User overrideable function that receives the new valid rid.\n     *\n     *  The default function does nothing. User code can override this with\n     *  > Strophe.Connection.nextValidRid = function (rid) {\n     *  >    (user code)\n     *  > };\n     *\n     *  Parameters:\n     *    (Number) rid - The next valid rid\n     */\n    /* jshint unused:false */\n    nextValidRid: function (rid) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: send\n     *  Send a stanza.\n     *\n     *  This function is called to push data onto the send queue to\n     *  go out over the wire.  Whenever a request is sent to the BOSH\n     *  server, all pending data is sent and the queue is flushed.\n     *\n     *  Parameters:\n     *    (XMLElement |\n     *     [XMLElement] |\n     *     Strophe.Builder) elem - The stanza to send.\n     */\n    send: function (elem) {\n        if (elem === null) { return ; }\n        if (typeof(elem.sort) === \"function\") {\n            for (var i = 0; i < elem.length; i++) {\n                this._queueData(elem[i]);\n            }\n        } else if (typeof(elem.tree) === \"function\") {\n            this._queueData(elem.tree());\n        } else {\n            this._queueData(elem);\n        }\n\n        this._proto._send();\n    },\n\n    /** Function: flush\n     *  Immediately send any pending outgoing data.\n     *\n     *  Normally send() queues outgoing data until the next idle period\n     *  (100ms), which optimizes network use in the common cases when\n     *  several send()s are called in succession. flush() can be used to\n     *  immediately send all pending data.\n     */\n    flush: function () {\n        // cancel the pending idle period and run the idle function\n        // immediately\n        clearTimeout(this._idleTimeout);\n        this._onIdle();\n    },\n\n    /** Function: sendPresence\n     *  Helper function to send presence stanzas. The main benefit is for\n     *  sending presence stanzas for which you expect a responding presence\n     *  stanza with the same id (for example when leaving a chat room).\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza to send.\n     *    (Function) callback - The callback function for a successful request.\n     *    (Function) errback - The callback function for a failed or timed\n     *      out request.  On timeout, the stanza will be null.\n     *    (Integer) timeout - The time specified in milliseconds for a\n     *      timeout to occur.\n     *\n     *  Returns:\n     *    The id used to send the presence.\n     */\n    sendPresence: function(elem, callback, errback, timeout) {\n        var timeoutHandler = null;\n        var that = this;\n        if (typeof(elem.tree) === \"function\") {\n            elem = elem.tree();\n        }\n        var id = elem.getAttribute('id');\n        if (!id) { // inject id if not found\n            id = this.getUniqueId(\"sendPresence\");\n            elem.setAttribute(\"id\", id);\n        }\n\n        if (typeof callback === \"function\" || typeof errback === \"function\") {\n            var handler = this.addHandler(function (stanza) {\n                // remove timeout handler if there is one\n                if (timeoutHandler) {\n                    that.deleteTimedHandler(timeoutHandler);\n                }\n                var type = stanza.getAttribute('type');\n                if (type === 'error') {\n                    if (errback) {\n                        errback(stanza);\n                    }\n                } else if (callback) {\n                    callback(stanza);\n                }\n            }, null, 'presence', null, id);\n\n            // if timeout specified, set up a timeout handler.\n            if (timeout) {\n                timeoutHandler = this.addTimedHandler(timeout, function () {\n                    // get rid of normal handler\n                    that.deleteHandler(handler);\n                    // call errback on timeout with null stanza\n                    if (errback) {\n                        errback(null);\n                    }\n                    return false;\n                });\n            }\n        }\n        this.send(elem);\n        return id;\n    },\n\n    /** Function: sendIQ\n     *  Helper function to send IQ stanzas.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza to send.\n     *    (Function) callback - The callback function for a successful request.\n     *    (Function) errback - The callback function for a failed or timed\n     *      out request.  On timeout, the stanza will be null.\n     *    (Integer) timeout - The time specified in milliseconds for a\n     *      timeout to occur.\n     *\n     *  Returns:\n     *    The id used to send the IQ.\n    */\n    sendIQ: function(elem, callback, errback, timeout) {\n        var timeoutHandler = null;\n        var that = this;\n        if (typeof(elem.tree) === \"function\") {\n            elem = elem.tree();\n        }\n        var id = elem.getAttribute('id');\n        if (!id) { // inject id if not found\n            id = this.getUniqueId(\"sendIQ\");\n            elem.setAttribute(\"id\", id);\n        }\n\n        if (typeof callback === \"function\" || typeof errback === \"function\") {\n            var handler = this.addHandler(function (stanza) {\n                // remove timeout handler if there is one\n                if (timeoutHandler) {\n                    that.deleteTimedHandler(timeoutHandler);\n                }\n                var iqtype = stanza.getAttribute('type');\n                if (iqtype === 'result') {\n                    if (callback) {\n                        callback(stanza);\n                    }\n                } else if (iqtype === 'error') {\n                    if (errback) {\n                        errback(stanza);\n                    }\n                } else {\n                    throw {\n                        name: \"StropheError\",\n                        message: \"Got bad IQ type of \" + iqtype\n                    };\n                }\n            }, null, 'iq', ['error', 'result'], id);\n\n            // if timeout specified, set up a timeout handler.\n            if (timeout) {\n                timeoutHandler = this.addTimedHandler(timeout, function () {\n                    // get rid of normal handler\n                    that.deleteHandler(handler);\n                    // call errback on timeout with null stanza\n                    if (errback) {\n                        errback(null);\n                    }\n                    return false;\n                });\n            }\n        }\n        this.send(elem);\n        return id;\n    },\n\n    /** PrivateFunction: _queueData\n     *  Queue outgoing data for later sending.  Also ensures that the data\n     *  is a DOMElement.\n     */\n    _queueData: function (element) {\n        if (element === null ||\n            !element.tagName ||\n            !element.childNodes) {\n            throw {\n                name: \"StropheError\",\n                message: \"Cannot queue non-DOMElement.\"\n            };\n        }\n        this._data.push(element);\n    },\n\n    /** PrivateFunction: _sendRestart\n     *  Send an xmpp:restart stanza.\n     */\n    _sendRestart: function () {\n        this._data.push(\"restart\");\n        this._proto._sendRestart();\n        // XXX: setTimeout should be called only with function expressions (23974bc1)\n        this._idleTimeout = setTimeout(function() {\n            this._onIdle();\n        }.bind(this), 100);\n    },\n\n    /** Function: addTimedHandler\n     *  Add a timed handler to the connection.\n     *\n     *  This function adds a timed handler.  The provided handler will\n     *  be called every period milliseconds until it returns false,\n     *  the connection is terminated, or the handler is removed.  Handlers\n     *  that wish to continue being invoked should return true.\n     *\n     *  Because of method binding it is necessary to save the result of\n     *  this function if you wish to remove a handler with\n     *  deleteTimedHandler().\n     *\n     *  Note that user handlers are not active until authentication is\n     *  successful.\n     *\n     *  Parameters:\n     *    (Integer) period - The period of the handler.\n     *    (Function) handler - The callback function.\n     *\n     *  Returns:\n     *    A reference to the handler that can be used to remove it.\n     */\n    addTimedHandler: function (period, handler) {\n        var thand = new Strophe.TimedHandler(period, handler);\n        this.addTimeds.push(thand);\n        return thand;\n    },\n\n    /** Function: deleteTimedHandler\n     *  Delete a timed handler for a connection.\n     *\n     *  This function removes a timed handler from the connection.  The\n     *  handRef parameter is *not* the function passed to addTimedHandler(),\n     *  but is the reference returned from addTimedHandler().\n     *\n     *  Parameters:\n     *    (Strophe.TimedHandler) handRef - The handler reference.\n     */\n    deleteTimedHandler: function (handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeTimeds.push(handRef);\n    },\n\n    /** Function: addHandler\n     *  Add a stanza handler for the connection.\n     *\n     *  This function adds a stanza handler to the connection.  The\n     *  handler callback will be called for any stanza that matches\n     *  the parameters.  Note that if multiple parameters are supplied,\n     *  they must all match for the handler to be invoked.\n     *\n     *  The handler will receive the stanza that triggered it as its argument.\n     *  *The handler should return true if it is to be invoked again;\n     *  returning false will remove the handler after it returns.*\n     *\n     *  As a convenience, the ns parameters applies to the top level element\n     *  and also any of its immediate children.  This is primarily to make\n     *  matching /iq/query elements easy.\n     *\n     *  Options\n     *  ~~~~~~~\n     *  With the options argument, you can specify boolean flags that affect how\n     *  matches are being done.\n     *\n     *  Currently two flags exist:\n     *\n     *  - matchBareFromJid:\n     *      When set to true, the from parameter and the\n     *      from attribute on the stanza will be matched as bare JIDs instead\n     *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n     *      value of options. The default value for matchBareFromJid is false.\n     *\n     *  - ignoreNamespaceFragment:\n     *      When set to true, a fragment specified on the stanza's namespace\n     *      URL will be ignored when it's matched with the one configured for\n     *      the handler.\n     *\n     *      This means that if you register like this:\n     *      >   connection.addHandler(\n     *      >       handler,\n     *      >       'http://jabber.org/protocol/muc',\n     *      >       null, null, null, null,\n     *      >       {'ignoreNamespaceFragment': true}\n     *      >   );\n     *\n     *      Then a stanza with XML namespace of\n     *      'http://jabber.org/protocol/muc#user' will also be matched. If\n     *      'ignoreNamespaceFragment' is false, then only stanzas with\n     *      'http://jabber.org/protocol/muc' will be matched.\n     *\n     *  Deleting the handler\n     *  ~~~~~~~~~~~~~~~~~~~~\n     *  The return value should be saved if you wish to remove the handler\n     *  with deleteHandler().\n     *\n     *  Parameters:\n     *    (Function) handler - The user callback.\n     *    (String) ns - The namespace to match.\n     *    (String) name - The stanza name to match.\n     *    (String|Array) type - The stanza type (or types if an array) to match.\n     *    (String) id - The stanza id attribute to match.\n     *    (String) from - The stanza from attribute to match.\n     *    (String) options - The handler options\n     *\n     *  Returns:\n     *    A reference to the handler that can be used to remove it.\n     */\n    addHandler: function (handler, ns, name, type, id, from, options) {\n        var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n        this.addHandlers.push(hand);\n        return hand;\n    },\n\n    /** Function: deleteHandler\n     *  Delete a stanza handler for a connection.\n     *\n     *  This function removes a stanza handler from the connection.  The\n     *  handRef parameter is *not* the function passed to addHandler(),\n     *  but is the reference returned from addHandler().\n     *\n     *  Parameters:\n     *    (Strophe.Handler) handRef - The handler reference.\n     */\n    deleteHandler: function (handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeHandlers.push(handRef);\n        // If a handler is being deleted while it is being added,\n        // prevent it from getting added\n        var i = this.addHandlers.indexOf(handRef);\n        if (i >= 0) {\n            this.addHandlers.splice(i, 1);\n        }\n    },\n\n    /** Function: registerSASLMechanisms\n     *\n     * Register the SASL mechanisms which will be supported by this instance of\n     * Strophe.Connection (i.e. which this XMPP client will support).\n     *\n     *  Parameters:\n     *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n     *\n     */\n    registerSASLMechanisms: function (mechanisms) {\n        this.mechanisms = {};\n        mechanisms = mechanisms || [\n            Strophe.SASLAnonymous,\n            Strophe.SASLExternal,\n            Strophe.SASLMD5,\n            Strophe.SASLOAuthBearer,\n            Strophe.SASLXOAuth2,\n            Strophe.SASLPlain,\n            Strophe.SASLSHA1\n        ];\n        mechanisms.forEach(this.registerSASLMechanism.bind(this));\n    },\n\n    /** Function: registerSASLMechanism\n     *\n     * Register a single SASL mechanism, to be supported by this client.\n     *\n     *  Parameters:\n     *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n     *\n     */\n    registerSASLMechanism: function (mechanism) {\n        this.mechanisms[mechanism.prototype.name] = mechanism;\n    },\n\n    /** Function: disconnect\n     *  Start the graceful disconnection process.\n     *\n     *  This function starts the disconnection process.  This process starts\n     *  by sending unavailable presence and sending BOSH body of type\n     *  terminate.  A timeout handler makes sure that disconnection happens\n     *  even if the BOSH server does not respond.\n     *  If the Connection object isn't connected, at least tries to abort all pending requests\n     *  so the connection object won't generate successful requests (which were already opened).\n     *\n     *  The user supplied connection callback will be notified of the\n     *  progress as this process happens.\n     *\n     *  Parameters:\n     *    (String) reason - The reason the disconnect is occuring.\n     */\n    disconnect: function (reason) {\n        this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n        Strophe.info(\"Disconnect was called because: \" + reason);\n        if (this.connected) {\n            var pres = false;\n            this.disconnecting = true;\n            if (this.authenticated) {\n                pres = $pres({\n                    xmlns: Strophe.NS.CLIENT,\n                    type: 'unavailable'\n                });\n            }\n            // setup timeout handler\n            this._disconnectTimeout = this._addSysTimedHandler(\n                3000, this._onDisconnectTimeout.bind(this));\n            this._proto._disconnect(pres);\n        } else {\n            Strophe.info(\"Disconnect was called before Strophe connected to the server\");\n            this._proto._abortAllRequests();\n            this._doDisconnect();\n        }\n    },\n\n    /** PrivateFunction: _changeConnectStatus\n     *  _Private_ helper function that makes sure plugins and the user's\n     *  callback are notified of connection status changes.\n     *\n     *  Parameters:\n     *    (Integer) status - the new connection status, one of the values\n     *      in Strophe.Status\n     *    (String) condition - the error condition or null\n     *    (XMLElement) elem - The triggering stanza.\n     */\n    _changeConnectStatus: function (status, condition, elem) {\n        // notify all plugins listening for status changes\n        for (var k in Strophe._connectionPlugins) {\n            if (Strophe._connectionPlugins.hasOwnProperty(k)) {\n                var plugin = this[k];\n                if (plugin.statusChanged) {\n                    try {\n                        plugin.statusChanged(status, condition);\n                    } catch (err) {\n                        Strophe.error(\"\" + k + \" plugin caused an exception \" +\n                                      \"changing status: \" + err);\n                    }\n                }\n            }\n        }\n\n        // notify the user's callback\n        if (this.connect_callback) {\n            try {\n                this.connect_callback(status, condition, elem);\n            } catch (e) {\n                Strophe._handleError(e);\n                Strophe.error(\n                    \"User connection callback caused an \"+\"exception: \"+e);\n            }\n        }\n    },\n\n    /** PrivateFunction: _doDisconnect\n     *  _Private_ function to disconnect.\n     *\n     *  This is the last piece of the disconnection logic.  This resets the\n     *  connection and alerts the user's connection callback.\n     */\n    _doDisconnect: function (condition) {\n        if (typeof this._idleTimeout === \"number\") {\n            clearTimeout(this._idleTimeout);\n        }\n\n        // Cancel Disconnect Timeout\n        if (this._disconnectTimeout !== null) {\n            this.deleteTimedHandler(this._disconnectTimeout);\n            this._disconnectTimeout = null;\n        }\n\n        Strophe.info(\"_doDisconnect was called\");\n        this._proto._doDisconnect();\n\n        this.authenticated = false;\n        this.disconnecting = false;\n        this.restored = false;\n\n        // delete handlers\n        this.handlers = [];\n        this.timedHandlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        // tell the parent we disconnected\n        this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n        this.connected = false;\n    },\n\n    /** PrivateFunction: _dataRecv\n     *  _Private_ handler to processes incoming data from the the connection.\n     *\n     *  Except for _connect_cb handling the initial connection request,\n     *  this function handles the incoming data for all requests.  This\n     *  function also fires stanza handlers that match each incoming\n     *  stanza.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The request that has data ready.\n     *    (string) req - The stanza a raw string (optiona).\n     */\n    _dataRecv: function (req, raw) {\n        Strophe.info(\"_dataRecv called\");\n        var elem = this._proto._reqToData(req);\n        if (elem === null) { return; }\n\n        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n            if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                this.xmlInput(elem.childNodes[0]);\n            } else {\n                this.xmlInput(elem);\n            }\n        }\n        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n            if (raw) {\n                this.rawInput(raw);\n            } else {\n                this.rawInput(Strophe.serialize(elem));\n            }\n        }\n\n        // remove handlers scheduled for deletion\n        var i, hand;\n        while (this.removeHandlers.length > 0) {\n            hand = this.removeHandlers.pop();\n            i = this.handlers.indexOf(hand);\n            if (i >= 0) {\n                this.handlers.splice(i, 1);\n            }\n        }\n\n        // add handlers scheduled for addition\n        while (this.addHandlers.length > 0) {\n            this.handlers.push(this.addHandlers.pop());\n        }\n\n        // handle graceful disconnect\n        if (this.disconnecting && this._proto._emptyQueue()) {\n            this._doDisconnect();\n            return;\n        }\n\n        var type = elem.getAttribute(\"type\");\n        var cond, conflict;\n        if (type !== null && type === \"terminate\") {\n            // Don't process stanzas that come in after disconnect\n            if (this.disconnecting) {\n                return;\n            }\n\n            // an error occurred\n            cond = elem.getAttribute(\"condition\");\n            conflict = elem.getElementsByTagName(\"conflict\");\n            if (cond !== null) {\n                if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                    cond = \"conflict\";\n                }\n                this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n            } else {\n                this._changeConnectStatus(\n                    Strophe.Status.CONNFAIL,\n                    Strophe.ErrorCondition.UNKOWN_REASON\n                );\n            }\n            this._doDisconnect(cond);\n            return;\n        }\n\n        // send each incoming stanza through the handler chain\n        var that = this;\n        Strophe.forEachChild(elem, null, function (child) {\n            var i, newList;\n            // process handlers\n            newList = that.handlers;\n            that.handlers = [];\n            for (i = 0; i < newList.length; i++) {\n                var hand = newList[i];\n                // encapsulate 'handler.run' not to lose the whole handler list if\n                // one of the handlers throws an exception\n                try {\n                    if (hand.isMatch(child) &&\n                        (that.authenticated || !hand.user)) {\n                        if (hand.run(child)) {\n                            that.handlers.push(hand);\n                        }\n                    } else {\n                        that.handlers.push(hand);\n                    }\n                } catch(e) {\n                    // if the handler throws an exception, we consider it as false\n                    Strophe.warn('Removing Strophe handlers due to uncaught exception: '+e.message);\n                }\n            }\n        });\n    },\n\n\n    /** Attribute: mechanisms\n     *  SASL Mechanisms available for Connection.\n     */\n    mechanisms: {},\n\n    /** PrivateFunction: _connect_cb\n     *  _Private_ handler for initial connection request.\n     *\n     *  This handler is used to process the initial connection request\n     *  response from the BOSH server. It is used to set up authentication\n     *  handlers and start the authentication process.\n     *\n     *  SASL authentication will be attempted if available, otherwise\n     *  the code will fall back to legacy authentication.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The current request.\n     *    (Function) _callback - low level (xmpp) connect callback function.\n     *      Useful for plugins with their own xmpp connect callback (when they\n     *      want to do something special).\n     */\n    _connect_cb: function (req, _callback, raw) {\n        Strophe.info(\"_connect_cb was called\");\n        this.connected = true;\n\n        var bodyWrap;\n        try {\n            bodyWrap = this._proto._reqToData(req);\n        } catch (e) {\n            if (e !== \"badformat\") { throw e; }\n            this._changeConnectStatus(\n                Strophe.Status.CONNFAIL,\n                Strophe.ErrorCondition.BAD_FORMAT\n            );\n            this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n        }\n        if (!bodyWrap) { return; }\n\n        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n            if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                this.xmlInput(bodyWrap.childNodes[0]);\n            } else {\n                this.xmlInput(bodyWrap);\n            }\n        }\n        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n            if (raw) {\n                this.rawInput(raw);\n            } else {\n                this.rawInput(Strophe.serialize(bodyWrap));\n            }\n        }\n\n        var conncheck = this._proto._connect_cb(bodyWrap);\n        if (conncheck === Strophe.Status.CONNFAIL) {\n            return;\n        }\n\n        // Check for the stream:features tag\n        var hasFeatures;\n        if (bodyWrap.getElementsByTagNameNS) {\n            hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n        } else {\n            hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 ||\n                            bodyWrap.getElementsByTagName(\"features\").length > 0;\n        }\n        if (!hasFeatures) {\n            this._proto._no_auth_received(_callback);\n            return;\n        }\n\n        var matched = [], i, mech;\n        var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n        if (mechanisms.length > 0) {\n            for (i = 0; i < mechanisms.length; i++) {\n                mech = Strophe.getText(mechanisms[i]);\n                if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n            }\n        }\n        if (matched.length === 0) {\n            if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                // There are no matching SASL mechanisms and also no legacy\n                // auth available.\n                this._proto._no_auth_received(_callback);\n                return;\n            }\n        }\n        if (this.do_authentication !== false) {\n            this.authenticate(matched);\n        }\n    },\n\n    /** Function: sortMechanismsByPriority\n     *\n     *  Sorts an array of objects with prototype SASLMechanism according to\n     *  their priorities.\n     *\n     *  Parameters:\n     *    (Array) mechanisms - Array of SASL mechanisms.\n     *\n     */\n    sortMechanismsByPriority: function (mechanisms) {\n        // Sorting mechanisms according to priority.\n        var i, j, higher, swap;\n        for (i = 0; i < mechanisms.length - 1; ++i) {\n            higher = i;\n            for (j = i + 1; j < mechanisms.length; ++j) {\n                if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                    higher = j;\n                }\n            }\n            if (higher !== i) {\n                swap = mechanisms[i];\n                mechanisms[i] = mechanisms[higher];\n                mechanisms[higher] = swap;\n            }\n        }\n        return mechanisms;\n    },\n\n    /** PrivateFunction: _attemptSASLAuth\n     *\n     *  Iterate through an array of SASL mechanisms and attempt authentication\n     *  with the highest priority (enabled) mechanism.\n     *\n     *  Parameters:\n     *    (Array) mechanisms - Array of SASL mechanisms.\n     *\n     *  Returns:\n     *    (Boolean) mechanism_found - true or false, depending on whether a\n     *          valid SASL mechanism was found with which authentication could be\n     *          started.\n     */\n    _attemptSASLAuth: function (mechanisms) {\n        mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n        var i = 0, mechanism_found = false;\n        for (i = 0; i < mechanisms.length; ++i) {\n            if (!mechanisms[i].prototype.test(this)) {\n                continue;\n            }\n            this._sasl_success_handler = this._addSysHandler(\n                this._sasl_success_cb.bind(this), null,\n                \"success\", null, null);\n            this._sasl_failure_handler = this._addSysHandler(\n                this._sasl_failure_cb.bind(this), null,\n                \"failure\", null, null);\n            this._sasl_challenge_handler = this._addSysHandler(\n                this._sasl_challenge_cb.bind(this), null,\n                \"challenge\", null, null);\n\n            this._sasl_mechanism = new mechanisms[i]();\n            this._sasl_mechanism.onStart(this);\n\n            var request_auth_exchange = $build(\"auth\", {\n                xmlns: Strophe.NS.SASL,\n                mechanism: this._sasl_mechanism.name\n            });\n            if (this._sasl_mechanism.isClientFirst) {\n                var response = this._sasl_mechanism.onChallenge(this, null);\n                request_auth_exchange.t(btoa(response));\n            }\n            this.send(request_auth_exchange.tree());\n            mechanism_found = true;\n            break;\n        }\n        return mechanism_found;\n    },\n\n    /** PrivateFunction: _attemptLegacyAuth\n     *\n     *  Attempt legacy (i.e. non-SASL) authentication.\n     *\n     */\n    _attemptLegacyAuth: function () {\n        if (Strophe.getNodeFromJid(this.jid) === null) {\n            // we don't have a node, which is required for non-anonymous\n            // client connections\n            this._changeConnectStatus(\n                Strophe.Status.CONNFAIL,\n                Strophe.ErrorCondition.MISSING_JID_NODE\n            );\n            this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n        } else {\n            // Fall back to legacy authentication\n            this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n            this._addSysHandler(\n                this._auth1_cb.bind(this),\n                null, null, null, \"_auth_1\"\n            );\n            this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                }).c(\"query\", {xmlns: Strophe.NS.AUTH})\n                .c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid))\n                .tree());\n        }\n    },\n\n    /** Function: authenticate\n     * Set up authentication\n     *\n     *  Continues the initial connection request by setting up authentication\n     *  handlers and starting the authentication process.\n     *\n     *  SASL authentication will be attempted if available, otherwise\n     *  the code will fall back to legacy authentication.\n     *\n     *  Parameters:\n     *    (Array) matched - Array of SASL mechanisms supported.\n     *\n     */\n    authenticate: function (matched) {\n        if (!this._attemptSASLAuth(matched)) {\n            this._attemptLegacyAuth();\n        }\n    },\n\n    /** PrivateFunction: _sasl_challenge_cb\n     *  _Private_ handler for the SASL challenge\n     *\n     */\n    _sasl_challenge_cb: function(elem) {\n      var challenge = atob(Strophe.getText(elem));\n      var response = this._sasl_mechanism.onChallenge(this, challenge);\n      var stanza = $build('response', {\n          'xmlns': Strophe.NS.SASL\n      });\n      if (response !== \"\") {\n        stanza.t(btoa(response));\n      }\n      this.send(stanza.tree());\n      return true;\n    },\n\n    /** PrivateFunction: _auth1_cb\n     *  _Private_ handler for legacy authentication.\n     *\n     *  This handler is called in response to the initial <iq type='get'/>\n     *  for legacy authentication.  It builds an authentication <iq/> and\n     *  sends it, creating a handler (calling back to _auth2_cb()) to\n     *  handle the result\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza that triggered the callback.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    /* jshint unused:false */\n    _auth1_cb: function (elem) {\n        // build plaintext auth iq\n        var iq = $iq({type: \"set\", id: \"_auth_2\"})\n            .c('query', {xmlns: Strophe.NS.AUTH})\n            .c('username', {}).t(Strophe.getNodeFromJid(this.jid))\n            .up()\n            .c('password').t(this.pass);\n\n        if (!Strophe.getResourceFromJid(this.jid)) {\n            // since the user has not supplied a resource, we pick\n            // a default one here.  unlike other auth methods, the server\n            // cannot do this for us.\n            this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n        }\n        iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n        this._addSysHandler(this._auth2_cb.bind(this), null,\n                            null, null, \"_auth_2\");\n        this.send(iq.tree());\n        return false;\n    },\n    /* jshint unused:true */\n\n    /** PrivateFunction: _sasl_success_cb\n     *  _Private_ handler for succesful SASL authentication.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_success_cb: function (elem) {\n        if (this._sasl_data[\"server-signature\"]) {\n            var serverSignature;\n            var success = atob(Strophe.getText(elem));\n            var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n            var matches = success.match(attribMatch);\n            if (matches[1] === \"v\") {\n                serverSignature = matches[2];\n            }\n\n            if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n              // remove old handlers\n              this.deleteHandler(this._sasl_failure_handler);\n              this._sasl_failure_handler = null;\n              if (this._sasl_challenge_handler) {\n                this.deleteHandler(this._sasl_challenge_handler);\n                this._sasl_challenge_handler = null;\n              }\n\n              this._sasl_data = {};\n              return this._sasl_failure_cb(null);\n            }\n        }\n        Strophe.info(\"SASL authentication succeeded.\");\n\n        if (this._sasl_mechanism) {\n          this._sasl_mechanism.onSuccess();\n        }\n\n        // remove old handlers\n        this.deleteHandler(this._sasl_failure_handler);\n        this._sasl_failure_handler = null;\n        if (this._sasl_challenge_handler) {\n            this.deleteHandler(this._sasl_challenge_handler);\n            this._sasl_challenge_handler = null;\n        }\n\n        var streamfeature_handlers = [];\n        var wrapper = function(handlers, elem) {\n            while (handlers.length) {\n                this.deleteHandler(handlers.pop());\n            }\n            this._sasl_auth1_cb.bind(this)(elem);\n            return false;\n        };\n        streamfeature_handlers.push(this._addSysHandler(function(elem) {\n            wrapper.bind(this)(streamfeature_handlers, elem);\n        }.bind(this), null, \"stream:features\", null, null));\n        streamfeature_handlers.push(this._addSysHandler(function(elem) {\n            wrapper.bind(this)(streamfeature_handlers, elem);\n        }.bind(this), Strophe.NS.STREAM, \"features\", null, null));\n\n        // we must send an xmpp:restart now\n        this._sendRestart();\n\n        return false;\n    },\n\n    /** PrivateFunction: _sasl_auth1_cb\n     *  _Private_ handler to start stream binding.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_auth1_cb: function (elem) {\n        // save stream:features for future usage\n        this.features = elem;\n        var i, child;\n        for (i = 0; i < elem.childNodes.length; i++) {\n            child = elem.childNodes[i];\n            if (child.nodeName === 'bind') {\n                this.do_bind = true;\n            }\n\n            if (child.nodeName === 'session') {\n                this.do_session = true;\n            }\n        }\n\n        if (!this.do_bind) {\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n            return false;\n        } else {\n            this._addSysHandler(this._sasl_bind_cb.bind(this), null, null,\n                                null, \"_bind_auth_2\");\n\n            var resource = Strophe.getResourceFromJid(this.jid);\n            if (resource) {\n                this.send($iq({type: \"set\", id: \"_bind_auth_2\"})\n                          .c('bind', {xmlns: Strophe.NS.BIND})\n                          .c('resource', {}).t(resource).tree());\n            } else {\n                this.send($iq({type: \"set\", id: \"_bind_auth_2\"})\n                          .c('bind', {xmlns: Strophe.NS.BIND})\n                          .tree());\n            }\n        }\n        return false;\n    },\n\n    /** PrivateFunction: _sasl_bind_cb\n     *  _Private_ handler for binding result and session start.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_bind_cb: function (elem) {\n        if (elem.getAttribute(\"type\") === \"error\") {\n            Strophe.info(\"SASL binding failed.\");\n            var conflict = elem.getElementsByTagName(\"conflict\"), condition;\n            if (conflict.length > 0) {\n                condition = Strophe.ErrorCondition.CONFLICT;\n            }\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n            return false;\n        }\n\n        // TODO - need to grab errors\n        var bind = elem.getElementsByTagName(\"bind\");\n        var jidNode;\n        if (bind.length > 0) {\n            // Grab jid\n            jidNode = bind[0].getElementsByTagName(\"jid\");\n            if (jidNode.length > 0) {\n                this.jid = Strophe.getText(jidNode[0]);\n\n                if (this.do_session) {\n                    this._addSysHandler(this._sasl_session_cb.bind(this),\n                                        null, null, null, \"_session_auth_2\");\n\n                    this.send($iq({type: \"set\", id: \"_session_auth_2\"})\n                                  .c('session', {xmlns: Strophe.NS.SESSION})\n                                  .tree());\n                } else {\n                    this.authenticated = true;\n                    this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                }\n            }\n        } else {\n            Strophe.info(\"SASL binding failed.\");\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n            return false;\n        }\n    },\n\n    /** PrivateFunction: _sasl_session_cb\n     *  _Private_ handler to finish successful SASL connection.\n     *\n     *  This sets Connection.authenticated to true on success, which\n     *  starts the processing of user handlers.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_session_cb: function (elem) {\n        if (elem.getAttribute(\"type\") === \"result\") {\n            this.authenticated = true;\n            this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n        } else if (elem.getAttribute(\"type\") === \"error\") {\n            Strophe.info(\"Session creation failed.\");\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n            return false;\n        }\n        return false;\n    },\n\n    /** PrivateFunction: _sasl_failure_cb\n     *  _Private_ handler for SASL authentication failure.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    /* jshint unused:false */\n    _sasl_failure_cb: function (elem) {\n        // delete unneeded handlers\n        if (this._sasl_success_handler) {\n            this.deleteHandler(this._sasl_success_handler);\n            this._sasl_success_handler = null;\n        }\n        if (this._sasl_challenge_handler) {\n            this.deleteHandler(this._sasl_challenge_handler);\n            this._sasl_challenge_handler = null;\n        }\n\n        if(this._sasl_mechanism)\n          this._sasl_mechanism.onFailure();\n        this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n        return false;\n    },\n    /* jshint unused:true */\n\n    /** PrivateFunction: _auth2_cb\n     *  _Private_ handler to finish legacy authentication.\n     *\n     *  This handler is called when the result from the jabber:iq:auth\n     *  <iq/> stanza is returned.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza that triggered the callback.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _auth2_cb: function (elem) {\n        if (elem.getAttribute(\"type\") === \"result\") {\n            this.authenticated = true;\n            this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n        } else if (elem.getAttribute(\"type\") === \"error\") {\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n            this.disconnect('authentication failed');\n        }\n        return false;\n    },\n\n    /** PrivateFunction: _addSysTimedHandler\n     *  _Private_ function to add a system level timed handler.\n     *\n     *  This function is used to add a Strophe.TimedHandler for the\n     *  library code.  System timed handlers are allowed to run before\n     *  authentication is complete.\n     *\n     *  Parameters:\n     *    (Integer) period - The period of the handler.\n     *    (Function) handler - The callback function.\n     */\n    _addSysTimedHandler: function (period, handler) {\n        var thand = new Strophe.TimedHandler(period, handler);\n        thand.user = false;\n        this.addTimeds.push(thand);\n        return thand;\n    },\n\n    /** PrivateFunction: _addSysHandler\n     *  _Private_ function to add a system level stanza handler.\n     *\n     *  This function is used to add a Strophe.Handler for the\n     *  library code.  System stanza handlers are allowed to run before\n     *  authentication is complete.\n     *\n     *  Parameters:\n     *    (Function) handler - The callback function.\n     *    (String) ns - The namespace to match.\n     *    (String) name - The stanza name to match.\n     *    (String) type - The stanza type attribute to match.\n     *    (String) id - The stanza id attribute to match.\n     */\n    _addSysHandler: function (handler, ns, name, type, id) {\n        var hand = new Strophe.Handler(handler, ns, name, type, id);\n        hand.user = false;\n        this.addHandlers.push(hand);\n        return hand;\n    },\n\n    /** PrivateFunction: _onDisconnectTimeout\n     *  _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     *  If the graceful disconnect process does not complete within the\n     *  time allotted, this handler finishes the disconnect anyway.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _onDisconnectTimeout: function () {\n        Strophe.info(\"_onDisconnectTimeout was called\");\n        this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n        this._proto._onDisconnectTimeout();\n        // actually disconnect\n        this._doDisconnect();\n        return false;\n    },\n\n    /** PrivateFunction: _onIdle\n     *  _Private_ handler to process events during idle cycle.\n     *\n     *  This handler is called every 100ms to fire timed handlers that\n     *  are ready and keep poll requests going.\n     */\n    _onIdle: function () {\n        var i, thand, since, newList;\n\n        // add timed handlers scheduled for addition\n        // NOTE: we add before remove in the case a timed handler is\n        // added and then deleted before the next _onIdle() call.\n        while (this.addTimeds.length > 0) {\n            this.timedHandlers.push(this.addTimeds.pop());\n        }\n\n        // remove timed handlers that have been scheduled for deletion\n        while (this.removeTimeds.length > 0) {\n            thand = this.removeTimeds.pop();\n            i = this.timedHandlers.indexOf(thand);\n            if (i >= 0) {\n                this.timedHandlers.splice(i, 1);\n            }\n        }\n\n        // call ready timed handlers\n        var now = new Date().getTime();\n        newList = [];\n        for (i = 0; i < this.timedHandlers.length; i++) {\n            thand = this.timedHandlers[i];\n            if (this.authenticated || !thand.user) {\n                since = thand.lastCalled + thand.period;\n                if (since - now <= 0) {\n                    if (thand.run()) {\n                        newList.push(thand);\n                    }\n                } else {\n                    newList.push(thand);\n                }\n            }\n        }\n        this.timedHandlers = newList;\n\n        clearTimeout(this._idleTimeout);\n\n        this._proto._onIdle();\n\n        // reactivate the timer only if connected\n        if (this.connected) {\n            // XXX: setTimeout should be called only with function expressions (23974bc1)\n            this._idleTimeout = setTimeout(function() {\n                this._onIdle();\n            }.bind(this), 100);\n        }\n    }\n};\n\n/** Class: Strophe.SASLMechanism\n *\n *  encapsulates SASL authentication mechanisms.\n *\n *  User code may override the priority for each mechanism or disable it completely.\n *  See <priority> for information about changing priority and <test> for informatian on\n *  how to disable a mechanism.\n *\n *  By default, all mechanisms are enabled and the priorities are\n *\n *      OAUTHBEARER - 60\n *      SCRAM-SHA1 - 50\n *      DIGEST-MD5 - 40\n *      PLAIN - 30\n *      ANONYMOUS - 20\n *      EXTERNAL - 10\n *\n *  See: Strophe.Connection.addSupportedSASLMechanisms\n */\n\n/**\n * PrivateConstructor: Strophe.SASLMechanism\n * SASL auth mechanism abstraction.\n *\n *  Parameters:\n *    (String) name - SASL Mechanism name.\n *    (Boolean) isClientFirst - If client should send response first without challenge.\n *    (Number) priority - Priority.\n *\n *  Returns:\n *    A new Strophe.SASLMechanism object.\n */\nStrophe.SASLMechanism = function(name, isClientFirst, priority) {\n  /** PrivateVariable: name\n   *  Mechanism name.\n   */\n  this.name = name;\n  /** PrivateVariable: isClientFirst\n   *  If client sends response without initial server challenge.\n   */\n  this.isClientFirst = isClientFirst;\n  /** Variable: priority\n   *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n   *  Users may override this to prioritize mechanisms differently.\n   *\n   *  In the default configuration the priorities are\n   *\n   *  SCRAM-SHA1 - 40\n   *  DIGEST-MD5 - 30\n   *  Plain - 20\n   *\n   *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n   *\n   *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n   *\n   *  See <SASL mechanisms> for a list of available mechanisms.\n   *\n   */\n  this.priority = priority;\n};\n\nStrophe.SASLMechanism.prototype = {\n  /**\n   *  Function: test\n   *  Checks if mechanism able to run.\n   *  To disable a mechanism, make this return false;\n   *\n   *  To disable plain authentication run\n   *  > Strophe.SASLPlain.test = function() {\n   *  >   return false;\n   *  > }\n   *\n   *  See <SASL mechanisms> for a list of available mechanisms.\n   *\n   *  Parameters:\n   *    (Strophe.Connection) connection - Target Connection.\n   *\n   *  Returns:\n   *    (Boolean) If mechanism was able to run.\n   */\n  /* jshint unused:false */\n  test: function(connection) {\n    return true;\n  },\n  /* jshint unused:true */\n\n  /** PrivateFunction: onStart\n   *  Called before starting mechanism on some connection.\n   *\n   *  Parameters:\n   *    (Strophe.Connection) connection - Target Connection.\n   */\n  onStart: function(connection) {\n    this._connection = connection;\n  },\n\n  /** PrivateFunction: onChallenge\n   *  Called by protocol implementation on incoming challenge. If client is\n   *  first (isClientFirst === true) challenge will be null on the first call.\n   *\n   *  Parameters:\n   *    (Strophe.Connection) connection - Target Connection.\n   *    (String) challenge - current challenge to handle.\n   *\n   *  Returns:\n   *    (String) Mechanism response.\n   */\n  /* jshint unused:false */\n  onChallenge: function(connection, challenge) {\n    throw new Error(\"You should implement challenge handling!\");\n  },\n  /* jshint unused:true */\n\n  /** PrivateFunction: onFailure\n   *  Protocol informs mechanism implementation about SASL failure.\n   */\n  onFailure: function() {\n    this._connection = null;\n  },\n\n  /** PrivateFunction: onSuccess\n   *  Protocol informs mechanism implementation about SASL success.\n   */\n  onSuccess: function() {\n    this._connection = null;\n  }\n};\n\n  /** Constants: SASL mechanisms\n   *  Available authentication mechanisms\n   *\n   *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n   *  Strophe.SASLPlain - SASL PLAIN authentication.\n   *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n   *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n   *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n   *  Strophe.SASLExternal - SASL EXTERNAL authentication\n   *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n   */\n\n// Building SASL callbacks\n\n/** PrivateConstructor: SASLAnonymous\n *  SASL ANONYMOUS authentication.\n */\nStrophe.SASLAnonymous = function() {};\nStrophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\nStrophe.SASLAnonymous.prototype.test = function(connection) {\n    return connection.authcid === null;\n};\n\n\n/** PrivateConstructor: SASLPlain\n *  SASL PLAIN authentication.\n */\nStrophe.SASLPlain = function() {};\nStrophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\nStrophe.SASLPlain.prototype.test = function(connection) {\n    return connection.authcid !== null;\n};\n\nStrophe.SASLPlain.prototype.onChallenge = function(connection) {\n    var auth_str = connection.authzid;\n    auth_str = auth_str + \"\\u0000\";\n    auth_str = auth_str + connection.authcid;\n    auth_str = auth_str + \"\\u0000\";\n    auth_str = auth_str + connection.pass;\n    return utils.utf16to8(auth_str);\n};\n\n\n/** PrivateConstructor: SASLSHA1\n *  SASL SCRAM SHA 1 authentication.\n */\nStrophe.SASLSHA1 = function() {};\nStrophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\nStrophe.SASLSHA1.prototype.test = function(connection) {\n    return connection.authcid !== null;\n};\n\nStrophe.SASLSHA1.prototype.onChallenge = function(connection, challenge, test_cnonce) {\n  var cnonce = test_cnonce || MD5.hexdigest(Math.random() * 1234567890);\n  var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n  auth_str += \",r=\";\n  auth_str += cnonce;\n  connection._sasl_data.cnonce = cnonce;\n  connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n\n  auth_str = \"n,,\" + auth_str;\n\n  this.onChallenge = function (connection, challenge) {\n    var nonce, salt, iter, Hi, U, U_old, i, k, pass;\n    var clientKey, serverKey, clientSignature;\n    var responseText = \"c=biws,\";\n    var authMessage = connection._sasl_data[\"client-first-message-bare\"] + \",\" +\n      challenge + \",\";\n    var cnonce = connection._sasl_data.cnonce;\n    var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n    while (challenge.match(attribMatch)) {\n      var matches = challenge.match(attribMatch);\n      challenge = challenge.replace(matches[0], \"\");\n      switch (matches[1]) {\n      case \"r\":\n        nonce = matches[2];\n        break;\n      case \"s\":\n        salt = matches[2];\n        break;\n      case \"i\":\n        iter = matches[2];\n        break;\n      }\n    }\n\n    if (nonce.substr(0, cnonce.length) !== cnonce) {\n      connection._sasl_data = {};\n      return connection._sasl_failure_cb();\n    }\n\n    responseText += \"r=\" + nonce;\n    authMessage += responseText;\n\n    salt = atob(salt);\n    salt += \"\\x00\\x00\\x00\\x01\";\n\n    pass = utils.utf16to8(connection.pass);\n    Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n    for (i = 1; i < iter; i++) {\n      U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n      for (k = 0; k < 5; k++) {\n        Hi[k] ^= U[k];\n      }\n      U_old = U;\n    }\n    Hi = SHA1.binb2str(Hi);\n\n    clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n    serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n    clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n    connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n    for (k = 0; k < 5; k++) {\n      clientKey[k] ^= clientSignature[k];\n    }\n\n    responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n    return responseText;\n  }.bind(this);\n\n  return auth_str;\n};\n\n\n/** PrivateConstructor: SASLMD5\n *  SASL DIGEST MD5 authentication.\n */\nStrophe.SASLMD5 = function() {};\nStrophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\nStrophe.SASLMD5.prototype.test = function(connection) {\n    return connection.authcid !== null;\n};\n\n/** PrivateFunction: _quote\n *  _Private_ utility function to backslash escape and quote strings.\n *\n *  Parameters:\n *    (String) str - The string to be quoted.\n *\n *  Returns:\n *    quoted string\n */\nStrophe.SASLMD5.prototype._quote = function (str) {\n    return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"';\n    //\" end string workaround for emacs\n};\n\nStrophe.SASLMD5.prototype.onChallenge = function(connection, challenge, test_cnonce) {\n  var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n  var cnonce = test_cnonce || MD5.hexdigest(\"\" + (Math.random() * 1234567890));\n  var realm = \"\";\n  var host = null;\n  var nonce = \"\";\n  var qop = \"\";\n  var matches;\n\n  while (challenge.match(attribMatch)) {\n    matches = challenge.match(attribMatch);\n    challenge = challenge.replace(matches[0], \"\");\n    matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n    switch (matches[1]) {\n    case \"realm\":\n      realm = matches[2];\n      break;\n    case \"nonce\":\n      nonce = matches[2];\n      break;\n    case \"qop\":\n      qop = matches[2];\n      break;\n    case \"host\":\n      host = matches[2];\n      break;\n    }\n  }\n\n  var digest_uri = connection.servtype + \"/\" + connection.domain;\n  if (host !== null) {\n    digest_uri = digest_uri + \"/\" + host;\n  }\n\n  var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n  var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n  var A2 = 'AUTHENTICATE:' + digest_uri;\n\n  var responseText = \"\";\n  responseText += 'charset=utf-8,';\n  responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n  responseText += 'realm=' + this._quote(realm) + ',';\n  responseText += 'nonce=' + this._quote(nonce) + ',';\n  responseText += 'nc=00000001,';\n  responseText += 'cnonce=' + this._quote(cnonce) + ',';\n  responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n  responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" +\n                                              nonce + \":00000001:\" +\n                                              cnonce + \":auth:\" +\n                                              MD5.hexdigest(A2)) + \",\";\n  responseText += 'qop=auth';\n\n  this.onChallenge = function () {\n      return \"\";\n  };\n  return responseText;\n};\n\n\n/** PrivateConstructor: SASLOAuthBearer\n *  SASL OAuth Bearer authentication.\n */\nStrophe.SASLOAuthBearer = function() {};\nStrophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\nStrophe.SASLOAuthBearer.prototype.test = function(connection) {\n    return connection.pass !== null;\n};\n\nStrophe.SASLOAuthBearer.prototype.onChallenge = function(connection) {\n    var auth_str = 'n,';\n    if (connection.authcid !== null) {\n      auth_str = auth_str + 'a=' + connection.authzid;\n    }\n    auth_str = auth_str + ',';\n    auth_str = auth_str + \"\\u0001\";\n    auth_str = auth_str + 'auth=Bearer ';\n    auth_str = auth_str + connection.pass;\n    auth_str = auth_str + \"\\u0001\";\n    auth_str = auth_str + \"\\u0001\";\n\n    return utils.utf16to8(auth_str);\n};\n\n\n/** PrivateConstructor: SASLExternal\n *  SASL EXTERNAL authentication.\n *\n *  The EXTERNAL mechanism allows a client to request the server to use\n *  credentials established by means external to the mechanism to\n *  authenticate the client. The external means may be, for instance,\n *  TLS services.\n */\nStrophe.SASLExternal = function() {};\nStrophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\nStrophe.SASLExternal.prototype.onChallenge = function(connection) {\n    /** According to XEP-178, an authzid SHOULD NOT be presented when the\n     * authcid contained or implied in the client certificate is the JID (i.e.\n     * authzid) with which the user wants to log in as.\n     *\n     * To NOT send the authzid, the user should therefore set the authcid equal\n     * to the JID when instantiating a new Strophe.Connection object.\n     */\n    return connection.authcid === connection.authzid ? '' : connection.authzid;\n};\n\n\n/** PrivateConstructor: SASLXOAuth2\n *  SASL X-OAuth2 authentication.\n */\nStrophe.SASLXOAuth2 = function () { };\nStrophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\nStrophe.SASLXOAuth2.prototype.test = function (connection) {\n    return connection.pass !== null;\n};\n\nStrophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n    var auth_str = '\\u0000';\n    if (connection.authcid !== null) {\n        auth_str = auth_str + connection.authzid;\n    }\n    auth_str = auth_str + \"\\u0000\";\n    auth_str = auth_str + connection.pass;\n\n    return utils.utf16to8(auth_str);\n};\n\n\nreturn {\n    'Strophe':         Strophe,\n    '$build':          $build,\n    '$iq':             $iq,\n    '$msg':            $msg,\n    '$pres':           $pres,\n    'SHA1':            SHA1,\n    'MD5':             MD5,\n    'b64_hmac_sha1':   SHA1.b64_hmac_sha1,\n    'b64_sha1':        SHA1.b64_sha1,\n    'str_hmac_sha1':   SHA1.str_hmac_sha1,\n    'str_sha1':        SHA1.str_sha1\n};\n}));\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/* global define, window, setTimeout, clearTimeout, XMLHttpRequest, ActiveXObject, Strophe, $build */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-bosh',['strophe-core'], function (core) {\n            return factory(\n                core.Strophe,\n                core.$build\n            );\n        });\n    } else if (typeof exports === 'object') {\n        var core = require('./core');\n\n        module.exports = factory(core.Strophe, core.$build);\n    } else {\n        // Browser globals\n        return factory(Strophe, $build);\n    }\n}(this, function (Strophe, $build) {\n\n/** PrivateClass: Strophe.Request\n *  _Private_ helper class that provides a cross implementation abstraction\n *  for a BOSH related XMLHttpRequest.\n *\n *  The Strophe.Request class is used internally to encapsulate BOSH request\n *  information.  It is not meant to be used from user's code.\n */\n\n/** PrivateConstructor: Strophe.Request\n *  Create and initialize a new Strophe.Request object.\n *\n *  Parameters:\n *    (XMLElement) elem - The XML data to be sent in the request.\n *    (Function) func - The function that will be called when the\n *      XMLHttpRequest readyState changes.\n *    (Integer) rid - The BOSH rid attribute associated with this request.\n *    (Integer) sends - The number of times this same request has been sent.\n */\nStrophe.Request = function (elem, func, rid, sends) {\n    this.id = ++Strophe._requestId;\n    this.xmlData = elem;\n    this.data = Strophe.serialize(elem);\n    // save original function in case we need to make a new request\n    // from this one.\n    this.origFunc = func;\n    this.func = func;\n    this.rid = rid;\n    this.date = NaN;\n    this.sends = sends || 0;\n    this.abort = false;\n    this.dead = null;\n\n    this.age = function () {\n        if (!this.date) { return 0; }\n        var now = new Date();\n        return (now - this.date) / 1000;\n    };\n    this.timeDead = function () {\n        if (!this.dead) { return 0; }\n        var now = new Date();\n        return (now - this.dead) / 1000;\n    };\n    this.xhr = this._newXHR();\n};\n\nStrophe.Request.prototype = {\n    /** PrivateFunction: getResponse\n     *  Get a response from the underlying XMLHttpRequest.\n     *\n     *  This function attempts to get a response from the request and checks\n     *  for errors.\n     *\n     *  Throws:\n     *    \"parsererror\" - A parser error occured.\n     *    \"badformat\" - The entity has sent XML that cannot be processed.\n     *\n     *  Returns:\n     *    The DOM element tree of the response.\n     */\n    getResponse: function () {\n        var node = null;\n        if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n            node = this.xhr.responseXML.documentElement;\n            if (node.tagName === \"parsererror\") {\n                Strophe.error(\"invalid response received\");\n                Strophe.error(\"responseText: \" + this.xhr.responseText);\n                Strophe.error(\"responseXML: \" +\n                              Strophe.serialize(this.xhr.responseXML));\n                throw \"parsererror\";\n            }\n        } else if (this.xhr.responseText) {\n            // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n            Strophe.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n            node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n            if (!node) {\n                throw new Error('Parsing produced null node');\n            } else if (node.querySelector('parsererror')) {\n                Strophe.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                Strophe.error(\"responseText: \" + this.xhr.responseText);\n                throw \"badformat\";\n            }\n        }\n        return node;\n    },\n\n    /** PrivateFunction: _newXHR\n     *  _Private_ helper function to create XMLHttpRequests.\n     *\n     *  This function creates XMLHttpRequests across all implementations.\n     *\n     *  Returns:\n     *    A new XMLHttpRequest.\n     */\n    _newXHR: function () {\n        var xhr = null;\n        if (window.XMLHttpRequest) {\n            xhr = new XMLHttpRequest();\n            if (xhr.overrideMimeType) {\n                xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n            }\n        } else if (window.ActiveXObject) {\n            xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        // use Function.bind() to prepend ourselves as an argument\n        xhr.onreadystatechange = this.func.bind(null, this);\n        return xhr;\n    }\n};\n\n/** Class: Strophe.Bosh\n *  _Private_ helper class that handles BOSH Connections\n *\n *  The Strophe.Bosh class is used internally by Strophe.Connection\n *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n */\n\n/** File: bosh.js\n *  A JavaScript library to enable BOSH in Strophejs.\n *\n *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n *  More information on BOSH can be found in XEP 124.\n */\n\n/** PrivateConstructor: Strophe.Bosh\n *  Create and initialize a Strophe.Bosh object.\n *\n *  Parameters:\n *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n *\n *  Returns:\n *    A new Strophe.Bosh object.\n */\nStrophe.Bosh = function(connection) {\n    this._conn = connection;\n    /* request id for body tags */\n    this.rid = Math.floor(Math.random() * 4294967295);\n    /* The current session ID. */\n    this.sid = null;\n\n    // default BOSH values\n    this.hold = 1;\n    this.wait = 60;\n    this.window = 5;\n    this.errors = 0;\n    this.inactivity = null;\n\n    this.lastResponseHeaders = null;\n\n    this._requests = [];\n};\n\nStrophe.Bosh.prototype = {\n    /** Variable: strip\n     *\n     *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n     *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n     *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n     *\n     *  > Strophe.Bosh.prototype.strip = \"body\";\n     *\n     *  This will enable stripping of the body tag in both\n     *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n     */\n    strip: null,\n\n    /** PrivateFunction: _buildBody\n     *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n     *\n     *  Returns:\n     *    A Strophe.Builder with a <body/> element.\n     */\n    _buildBody: function () {\n        var bodyWrap = $build('body', {\n            rid: this.rid++,\n            xmlns: Strophe.NS.HTTPBIND\n        });\n        if (this.sid !== null) {\n            bodyWrap.attrs({sid: this.sid});\n        }\n        if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n            this._cacheSession();\n        }\n        return bodyWrap;\n    },\n\n    /** PrivateFunction: _reset\n     *  Reset the connection.\n     *\n     *  This function is called by the reset function of the Strophe Connection\n     */\n    _reset: function () {\n        this.rid = Math.floor(Math.random() * 4294967295);\n        this.sid = null;\n        this.errors = 0;\n        if (this._conn._sessionCachingSupported()) {\n            window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n    },\n\n    /** PrivateFunction: _connect\n     *  _Private_ function that initializes the BOSH connection.\n     *\n     *  Creates and sends the Request that initializes the BOSH connection.\n     */\n    _connect: function (wait, hold, route) {\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.errors = 0;\n\n        // build the body tag\n        var body = this._buildBody().attrs({\n            to: this._conn.domain,\n            \"xml:lang\": \"en\",\n            wait: this.wait,\n            hold: this.hold,\n            content: \"text/xml; charset=utf-8\",\n            ver: \"1.6\",\n            \"xmpp:version\": \"1.0\",\n            \"xmlns:xmpp\": Strophe.NS.BOSH\n        });\n\n        if(route){\n            body.attrs({\n                route: route\n            });\n        }\n\n        var _connect_cb = this._conn._connect_cb;\n\n        this._requests.push(\n            new Strophe.Request(body.tree(),\n                                this._onRequestStateChange.bind(\n                                    this, _connect_cb.bind(this._conn)),\n                                body.tree().getAttribute(\"rid\")));\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _attach\n     *  Attach to an already created and authenticated BOSH session.\n     *\n     *  This function is provided to allow Strophe to attach to BOSH\n     *  sessions which have been created externally, perhaps by a Web\n     *  application.  This is often used to support auto-login type features\n     *  without putting user credentials into the page.\n     *\n     *  Parameters:\n     *    (String) jid - The full JID that is bound by the session.\n     *    (String) sid - The SID of the BOSH session.\n     *    (String) rid - The current RID of the BOSH session.  This RID\n     *      will be used by the next request.\n     *    (Function) callback The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    _attach: function (jid, sid, rid, callback, wait, hold, wind) {\n        this._conn.jid = jid;\n        this.sid = sid;\n        this.rid = rid;\n\n        this._conn.connect_callback = callback;\n\n        this._conn.domain = Strophe.getDomainFromJid(this._conn.jid);\n\n        this._conn.authenticated = true;\n        this._conn.connected = true;\n\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.window = wind || this.window;\n\n        this._conn._changeConnectStatus(Strophe.Status.ATTACHED, null);\n    },\n\n    /** PrivateFunction: _restore\n     *  Attempt to restore a cached BOSH session\n     *\n     *  Parameters:\n     *    (String) jid - The full JID that is bound by the session.\n     *      This parameter is optional but recommended, specifically in cases\n     *      where prebinded BOSH sessions are used where it's important to know\n     *      that the right session is being restored.\n     *    (Function) callback The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    _restore: function (jid, callback, wait, hold, wind) {\n        var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n        if (typeof session !== \"undefined\" &&\n                   session !== null &&\n                   session.rid &&\n                   session.sid &&\n                   session.jid &&\n                   (    typeof jid === \"undefined\" ||\n                        jid === null ||\n                        Strophe.getBareJidFromJid(session.jid) === Strophe.getBareJidFromJid(jid) ||\n                        // If authcid is null, then it's an anonymous login, so\n                        // we compare only the domains:\n                        ((Strophe.getNodeFromJid(jid) === null) && (Strophe.getDomainFromJid(session.jid) === jid))\n                    )\n        ) {\n            this._conn.restored = true;\n            this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n        } else {\n            throw { name: \"StropheSessionError\", message: \"_restore: no restoreable session.\" };\n        }\n    },\n\n    /** PrivateFunction: _cacheSession\n     *  _Private_ handler for the beforeunload event.\n     *\n     *  This handler is used to process the Bosh-part of the initial request.\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     */\n    _cacheSession: function () {\n        if (this._conn.authenticated) {\n            if (this._conn.jid && this.rid && this.sid) {\n                window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                    'jid': this._conn.jid,\n                    'rid': this.rid,\n                    'sid': this.sid\n                }));\n            }\n        } else {\n            window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n    },\n\n    /** PrivateFunction: _connect_cb\n     *  _Private_ handler for initial connection request.\n     *\n     *  This handler is used to process the Bosh-part of the initial request.\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     */\n    _connect_cb: function (bodyWrap) {\n        var typ = bodyWrap.getAttribute(\"type\");\n        var cond, conflict;\n        if (typ !== null && typ === \"terminate\") {\n            // an error occurred\n            cond = bodyWrap.getAttribute(\"condition\");\n            Strophe.error(\"BOSH-Connection failed: \" + cond);\n            conflict = bodyWrap.getElementsByTagName(\"conflict\");\n            if (cond !== null) {\n                if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                    cond = \"conflict\";\n                }\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n            } else {\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"unknown\");\n            }\n            this._conn._doDisconnect(cond);\n            return Strophe.Status.CONNFAIL;\n        }\n\n        // check to make sure we don't overwrite these if _connect_cb is\n        // called multiple times in the case of missing stream:features\n        if (!this.sid) {\n            this.sid = bodyWrap.getAttribute(\"sid\");\n        }\n        var wind = bodyWrap.getAttribute('requests');\n        if (wind) { this.window = parseInt(wind, 10); }\n        var hold = bodyWrap.getAttribute('hold');\n        if (hold) { this.hold = parseInt(hold, 10); }\n        var wait = bodyWrap.getAttribute('wait');\n        if (wait) { this.wait = parseInt(wait, 10); }\n        var inactivity = bodyWrap.getAttribute('inactivity');\n        if (inactivity) { this.inactivity = parseInt(inactivity, 10); }\n    },\n\n    /** PrivateFunction: _disconnect\n     *  _Private_ part of Connection.disconnect for Bosh\n     *\n     *  Parameters:\n     *    (Request) pres - This stanza will be sent before disconnecting.\n     */\n    _disconnect: function (pres) {\n        this._sendTerminate(pres);\n    },\n\n    /** PrivateFunction: _doDisconnect\n     *  _Private_ function to disconnect.\n     *\n     *  Resets the SID and RID.\n     */\n    _doDisconnect: function () {\n        this.sid = null;\n        this.rid = Math.floor(Math.random() * 4294967295);\n        if (this._conn._sessionCachingSupported()) {\n            window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n    },\n\n    /** PrivateFunction: _emptyQueue\n     * _Private_ function to check if the Request queue is empty.\n     *\n     *  Returns:\n     *    True, if there are no Requests queued, False otherwise.\n     */\n    _emptyQueue: function () {\n        return this._requests.length === 0;\n    },\n\n    /** PrivateFunction: _callProtocolErrorHandlers\n     *  _Private_ function to call error handlers registered for HTTP errors.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The request that is changing readyState.\n     */\n    _callProtocolErrorHandlers: function (req) {\n        var reqStatus = this._getRequestStatus(req),\n            err_callback;\n        err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n        if (err_callback) {\n            err_callback.call(this, reqStatus);\n        }\n    },\n\n    /** PrivateFunction: _hitError\n     *  _Private_ function to handle the error count.\n     *\n     *  Requests are resent automatically until their error count reaches\n     *  5.  Each time an error is encountered, this function is called to\n     *  increment the count and disconnect if the count is too high.\n     *\n     *  Parameters:\n     *    (Integer) reqStatus - The request status.\n     */\n    _hitError: function (reqStatus) {\n        this.errors++;\n        Strophe.warn(\"request errored, status: \" + reqStatus +\n                     \", number of errors: \" + this.errors);\n        if (this.errors > 4) {\n            this._conn._onDisconnectTimeout();\n        }\n    },\n\n    /** PrivateFunction: _no_auth_received\n     *\n     * Called on stream start/restart when no stream:features\n     * has been received and sends a blank poll request.\n     */\n    _no_auth_received: function (callback) {\n        Strophe.warn(\"Server did not yet offer a supported authentication \"+\n                     \"mechanism. Sending a blank poll request.\");\n        if (callback) {\n            callback = callback.bind(this._conn);\n        } else {\n            callback = this._conn._connect_cb.bind(this._conn);\n        }\n        var body = this._buildBody();\n        this._requests.push(\n            new Strophe.Request(\n                body.tree(),\n                this._onRequestStateChange.bind(this, callback),\n                body.tree().getAttribute(\"rid\")\n            )\n        );\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _onDisconnectTimeout\n     *  _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     *  Cancels all remaining Requests and clears the queue.\n     */\n    _onDisconnectTimeout: function () {\n        this._abortAllRequests();\n    },\n\n    /** PrivateFunction: _abortAllRequests\n     *  _Private_ helper function that makes sure all pending requests are aborted.\n     */\n    _abortAllRequests: function _abortAllRequests() {\n        var req;\n        while (this._requests.length > 0) {\n            req = this._requests.pop();\n            req.abort = true;\n            req.xhr.abort();\n            // jslint complains, but this is fine. setting to empty func\n            // is necessary for IE6\n            req.xhr.onreadystatechange = function () {}; // jshint ignore:line\n        }\n    },\n\n    /** PrivateFunction: _onIdle\n     *  _Private_ handler called by Strophe.Connection._onIdle\n     *\n     *  Sends all queued Requests or polls with empty Request if there are none.\n     */\n    _onIdle: function () {\n        var data = this._conn._data;\n        // if no requests are in progress, poll\n        if (this._conn.authenticated && this._requests.length === 0 &&\n            data.length === 0 && !this._conn.disconnecting) {\n            Strophe.info(\"no requests during idle cycle, sending \" +\n                         \"blank request\");\n            data.push(null);\n        }\n\n        if (this._conn.paused) {\n            return;\n        }\n\n        if (this._requests.length < 2 && data.length > 0) {\n            var body = this._buildBody();\n            for (var i = 0; i < data.length; i++) {\n                if (data[i] !== null) {\n                    if (data[i] === \"restart\") {\n                        body.attrs({\n                            to: this._conn.domain,\n                            \"xml:lang\": \"en\",\n                            \"xmpp:restart\": \"true\",\n                            \"xmlns:xmpp\": Strophe.NS.BOSH\n                        });\n                    } else {\n                        body.cnode(data[i]).up();\n                    }\n                }\n            }\n            delete this._conn._data;\n            this._conn._data = [];\n            this._requests.push(\n                new Strophe.Request(body.tree(),\n                                    this._onRequestStateChange.bind(\n                                        this, this._conn._dataRecv.bind(this._conn)),\n                                    body.tree().getAttribute(\"rid\")));\n            this._throttledRequestHandler();\n        }\n\n        if (this._requests.length > 0) {\n            var time_elapsed = this._requests[0].age();\n            if (this._requests[0].dead !== null) {\n                if (this._requests[0].timeDead() >\n                    Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n                    this._throttledRequestHandler();\n                }\n            }\n\n            if (time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait)) {\n                Strophe.warn(\"Request \" +\n                             this._requests[0].id +\n                             \" timed out, over \" + Math.floor(Strophe.TIMEOUT * this.wait) +\n                             \" seconds since last activity\");\n                this._throttledRequestHandler();\n            }\n        }\n    },\n\n    /** PrivateFunction: _getRequestStatus\n     *\n     *  Returns the HTTP status code from a Strophe.Request\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The Strophe.Request instance.\n     *    (Integer) def - The default value that should be returned if no\n     *          status value was found.\n     */\n    _getRequestStatus: function (req, def) {\n        var reqStatus;\n        if (req.xhr.readyState === 4) {\n            try {\n                reqStatus = req.xhr.status;\n            } catch (e) {\n                // ignore errors from undefined status attribute. Works\n                // around a browser bug\n                Strophe.error(\n                    \"Caught an error while retrieving a request's status, \" +\n                    \"reqStatus: \" + reqStatus);\n            }\n        }\n        if (typeof(reqStatus) === \"undefined\") {\n            reqStatus = typeof def === 'number' ? def : 0;\n        }\n        return reqStatus;\n    },\n\n    /** PrivateFunction: _onRequestStateChange\n     *  _Private_ handler for Strophe.Request state changes.\n     *\n     *  This function is called when the XMLHttpRequest readyState changes.\n     *  It contains a lot of error handling logic for the many ways that\n     *  requests can fail, and calls the request callback when requests\n     *  succeed.\n     *\n     *  Parameters:\n     *    (Function) func - The handler for the request.\n     *    (Strophe.Request) req - The request that is changing readyState.\n     */\n    _onRequestStateChange: function (func, req) {\n        Strophe.debug(\"request id \"+req.id+\".\"+req.sends+\n                      \" state changed to \"+req.xhr.readyState);\n        if (req.abort) {\n            req.abort = false;\n            return;\n        }\n        if (req.xhr.readyState !== 4) {\n            // The request is not yet complete\n            return;\n        }\n        var reqStatus = this._getRequestStatus(req);\n        this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n        if (this.disconnecting && reqStatus >= 400) {\n            this._hitError(reqStatus);\n            this._callProtocolErrorHandlers(req);\n            return;\n        }\n\n        var valid_request = reqStatus > 0 && reqStatus < 500;\n        var too_many_retries = req.sends > this._conn.maxRetries;\n        if (valid_request || too_many_retries) {\n            // remove from internal queue\n            this._removeRequest(req);\n            Strophe.debug(\"request id \"+req.id+\" should now be removed\");\n        }\n\n        if (reqStatus === 200) {\n            // request succeeded\n            var reqIs0 = (this._requests[0] === req);\n            var reqIs1 = (this._requests[1] === req);\n            // if request 1 finished, or request 0 finished and request\n            // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n            // restart the other - both will be in the first spot, as the\n            // completed request has been removed from the queue already\n            if (reqIs1 ||\n                (reqIs0 && this._requests.length > 0 &&\n                    this._requests[0].age() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait))) {\n                this._restartRequest(0);\n            }\n            this._conn.nextValidRid(Number(req.rid) + 1);\n            Strophe.debug(\"request id \"+req.id+\".\"+req.sends+\" got 200\");\n            func(req); // call handler\n            this.errors = 0;\n        } else if (reqStatus === 0 ||\n                   (reqStatus >= 400 && reqStatus < 600) ||\n                   reqStatus >= 12000) {\n            // request failed\n            Strophe.error(\"request id \"+req.id+\".\"+req.sends+\" error \"+reqStatus+\" happened\");\n            this._hitError(reqStatus);\n            this._callProtocolErrorHandlers(req);\n            if (reqStatus >= 400 && reqStatus < 500) {\n                this._conn._changeConnectStatus(Strophe.Status.DISCONNECTING, null);\n                this._conn._doDisconnect();\n            }\n        } else {\n            Strophe.error(\"request id \"+req.id+\".\"+req.sends+\" error \"+reqStatus+\" happened\");\n        }\n\n        if (!valid_request && !too_many_retries) {\n            this._throttledRequestHandler();\n        } else if (too_many_retries && !this._conn.connected) {\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"giving-up\");\n        }\n    },\n\n    /** PrivateFunction: _processRequest\n     *  _Private_ function to process a request in the queue.\n     *\n     *  This function takes requests off the queue and sends them and\n     *  restarts dead requests.\n     *\n     *  Parameters:\n     *    (Integer) i - The index of the request in the queue.\n     */\n    _processRequest: function (i) {\n        var self = this;\n        var req = this._requests[i];\n        var reqStatus = this._getRequestStatus(req, -1);\n\n        // make sure we limit the number of retries\n        if (req.sends > this._conn.maxRetries) {\n            this._conn._onDisconnectTimeout();\n            return;\n        }\n\n        var time_elapsed = req.age();\n        var primaryTimeout = (!isNaN(time_elapsed) &&\n                              time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait));\n        var secondaryTimeout = (req.dead !== null &&\n                                req.timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait));\n        var requestCompletedWithServerError = (req.xhr.readyState === 4 &&\n                                               (reqStatus < 1 || reqStatus >= 500));\n        if (primaryTimeout || secondaryTimeout ||\n            requestCompletedWithServerError) {\n            if (secondaryTimeout) {\n                Strophe.error(\"Request \" + this._requests[i].id +\n                              \" timed out (secondary), restarting\");\n            }\n            req.abort = true;\n            req.xhr.abort();\n            // setting to null fails on IE6, so set to empty function\n            req.xhr.onreadystatechange = function () {};\n            this._requests[i] = new Strophe.Request(req.xmlData,\n                                                    req.origFunc,\n                                                    req.rid,\n                                                    req.sends);\n            req = this._requests[i];\n        }\n\n        if (req.xhr.readyState === 0) {\n            Strophe.debug(\"request id \"+req.id+\".\"+req.sends+\" posting\");\n\n            try {\n                var contentType = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n                if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                    // IE9 doesn't have setRequestHeader\n                    req.xhr.setRequestHeader(\"Content-Type\", contentType);\n                }\n                if (this._conn.options.withCredentials) {\n                    req.xhr.withCredentials = true;\n                }\n            } catch (e2) {\n                Strophe.error(\"XHR open failed: \" + e2.toString());\n                if (!this._conn.connected) {\n                    this._conn._changeConnectStatus(\n                            Strophe.Status.CONNFAIL, \"bad-service\");\n                }\n                this._conn.disconnect();\n                return;\n            }\n\n            // Fires the XHR request -- may be invoked immediately\n            // or on a gradually expanding retry window for reconnects\n            var sendFunc = function () {\n                req.date = new Date();\n                if (self._conn.options.customHeaders){\n                    var headers = self._conn.options.customHeaders;\n                    for (var header in headers) {\n                        if (headers.hasOwnProperty(header)) {\n                            req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                    }\n                }\n                req.xhr.send(req.data);\n            };\n\n            // Implement progressive backoff for reconnects --\n            // First retry (send === 1) should also be instantaneous\n            if (req.sends > 1) {\n                // Using a cube of the retry number creates a nicely\n                // expanding retry window\n                var backoff = Math.min(Math.floor(Strophe.TIMEOUT * this.wait),\n                                       Math.pow(req.sends, 3)) * 1000;\n                setTimeout(function() {\n                    // XXX: setTimeout should be called only with function expressions (23974bc1)\n                    sendFunc();\n                }, backoff);\n            } else {\n                sendFunc();\n            }\n\n            req.sends++;\n\n            if (this._conn.xmlOutput !== Strophe.Connection.prototype.xmlOutput) {\n                if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                    this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                } else {\n                    this._conn.xmlOutput(req.xmlData);\n                }\n            }\n            if (this._conn.rawOutput !== Strophe.Connection.prototype.rawOutput) {\n                this._conn.rawOutput(req.data);\n            }\n        } else {\n            Strophe.debug(\"_processRequest: \" +\n                          (i === 0 ? \"first\" : \"second\") +\n                          \" request has readyState of \" +\n                          req.xhr.readyState);\n        }\n    },\n\n    /** PrivateFunction: _removeRequest\n     *  _Private_ function to remove a request from the queue.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The request to remove.\n     */\n    _removeRequest: function (req) {\n        Strophe.debug(\"removing request\");\n        var i;\n        for (i = this._requests.length - 1; i >= 0; i--) {\n            if (req === this._requests[i]) {\n                this._requests.splice(i, 1);\n            }\n        }\n        // IE6 fails on setting to null, so set to empty function\n        req.xhr.onreadystatechange = function () {};\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _restartRequest\n     *  _Private_ function to restart a request that is presumed dead.\n     *\n     *  Parameters:\n     *    (Integer) i - The index of the request in the queue.\n     */\n    _restartRequest: function (i) {\n        var req = this._requests[i];\n        if (req.dead === null) {\n            req.dead = new Date();\n        }\n\n        this._processRequest(i);\n    },\n\n    /** PrivateFunction: _reqToData\n     * _Private_ function to get a stanza out of a request.\n     *\n     * Tries to extract a stanza out of a Request Object.\n     * When this fails the current connection will be disconnected.\n     *\n     *  Parameters:\n     *    (Object) req - The Request.\n     *\n     *  Returns:\n     *    The stanza that was passed.\n     */\n    _reqToData: function (req) {\n        try {\n            return req.getResponse();\n        } catch (e) {\n            if (e !== \"parsererror\") { throw e; }\n            this._conn.disconnect(\"strophe-parsererror\");\n        }\n    },\n\n    /** PrivateFunction: _sendTerminate\n     *  _Private_ function to send initial disconnect sequence.\n     *\n     *  This is the first step in a graceful disconnect.  It sends\n     *  the BOSH server a terminate body and includes an unavailable\n     *  presence if authentication has completed.\n     */\n    _sendTerminate: function (pres) {\n        Strophe.info(\"_sendTerminate was called\");\n        var body = this._buildBody().attrs({type: \"terminate\"});\n        if (pres) {\n            body.cnode(pres.tree());\n        }\n        var req = new Strophe.Request(\n            body.tree(),\n            this._onRequestStateChange.bind(\n            this, this._conn._dataRecv.bind(this._conn)),\n            body.tree().getAttribute(\"rid\")\n        );\n        this._requests.push(req);\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _send\n     *  _Private_ part of the Connection.send function for BOSH\n     *\n     * Just triggers the RequestHandler to send the messages that are in the queue\n     */\n    _send: function () {\n        clearTimeout(this._conn._idleTimeout);\n        this._throttledRequestHandler();\n\n        // XXX: setTimeout should be called only with function expressions (23974bc1)\n        this._conn._idleTimeout = setTimeout(function() {\n            this._onIdle();\n        }.bind(this._conn), 100);\n    },\n\n    /** PrivateFunction: _sendRestart\n     *\n     *  Send an xmpp:restart stanza.\n     */\n    _sendRestart: function () {\n        this._throttledRequestHandler();\n        clearTimeout(this._conn._idleTimeout);\n    },\n\n    /** PrivateFunction: _throttledRequestHandler\n     *  _Private_ function to throttle requests to the connection window.\n     *\n     *  This function makes sure we don't send requests so fast that the\n     *  request ids overflow the connection window in the case that one\n     *  request died.\n     */\n    _throttledRequestHandler: function () {\n        if (!this._requests) {\n            Strophe.debug(\"_throttledRequestHandler called with \" +\n                          \"undefined requests\");\n        } else {\n            Strophe.debug(\"_throttledRequestHandler called with \" +\n                          this._requests.length + \" requests\");\n        }\n\n        if (!this._requests || this._requests.length === 0) {\n            return;\n        }\n\n        if (this._requests.length > 0) {\n            this._processRequest(0);\n        }\n\n        if (this._requests.length > 1 &&\n            Math.abs(this._requests[0].rid -\n                     this._requests[1].rid) < this.window) {\n            this._processRequest(1);\n        }\n    }\n};\nreturn Strophe;\n}));\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/* global define, window, clearTimeout, WebSocket, DOMParser, Strophe, $build */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-websocket',['strophe-core'], function (core) {\n            return factory(\n                core.Strophe,\n                core.$build\n            );\n        });\n    } else if (typeof exports === 'object') {\n        var core = require('./core');\n\n        module.exports = factory(core.Strophe, core.$build);\n    } else {\n        // Browser globals\n        return factory(Strophe, $build);\n    }\n}(this, function (Strophe, $build) {\n\n/** Class: Strophe.WebSocket\n *  _Private_ helper class that handles WebSocket Connections\n *\n *  The Strophe.WebSocket class is used internally by Strophe.Connection\n *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n */\n\n/** File: websocket.js\n *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n *\n *  This file implements XMPP over WebSockets for Strophejs.\n *  If a Connection is established with a Websocket url (ws://...)\n *  Strophe will use WebSockets.\n *  For more information on XMPP-over-WebSocket see RFC 7395:\n *  http://tools.ietf.org/html/rfc7395\n *\n *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n */\n\n/** PrivateConstructor: Strophe.Websocket\n *  Create and initialize a Strophe.WebSocket object.\n *  Currently only sets the connection Object.\n *\n *  Parameters:\n *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n *\n *  Returns:\n *    A new Strophe.WebSocket object.\n */\nStrophe.Websocket = function(connection) {\n    this._conn = connection;\n    this.strip = \"wrapper\";\n\n    var service = connection.service;\n    if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n        // If the service is not an absolute URL, assume it is a path and put the absolute\n        // URL together from options, current URL and the path.\n        var new_service = \"\";\n\n        if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n            new_service += \"ws\";\n        } else {\n            new_service += \"wss\";\n        }\n\n        new_service += \"://\" + window.location.host;\n\n        if (service.indexOf(\"/\") !== 0) {\n            new_service += window.location.pathname + service;\n        } else {\n            new_service += service;\n        }\n\n        connection.service = new_service;\n    }\n};\n\nStrophe.Websocket.prototype = {\n    /** PrivateFunction: _buildStream\n     *  _Private_ helper function to generate the <stream> start tag for WebSockets\n     *\n     *  Returns:\n     *    A Strophe.Builder with a <stream> element.\n     */\n    _buildStream: function () {\n        return $build(\"open\", {\n            \"xmlns\": Strophe.NS.FRAMING,\n            \"to\": this._conn.domain,\n            \"version\": '1.0'\n        });\n    },\n\n    /** PrivateFunction: _check_streamerror\n     * _Private_ checks a message for stream:error\n     *\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     *    connectstatus - The ConnectStatus that will be set on error.\n     *  Returns:\n     *     true if there was a streamerror, false otherwise.\n     */\n    _check_streamerror: function (bodyWrap, connectstatus) {\n        var errors;\n        if (bodyWrap.getElementsByTagNameNS) {\n            errors = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"error\");\n        } else {\n            errors = bodyWrap.getElementsByTagName(\"stream:error\");\n        }\n        if (errors.length === 0) {\n            return false;\n        }\n        var error = errors[0];\n\n        var condition = \"\";\n        var text = \"\";\n\n        var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n        for (var i = 0; i < error.childNodes.length; i++) {\n            var e = error.childNodes[i];\n            if (e.getAttribute(\"xmlns\") !== ns) {\n                break;\n            } if (e.nodeName === \"text\") {\n                text = e.textContent;\n            } else {\n                condition = e.nodeName;\n            }\n        }\n\n        var errorString = \"WebSocket stream error: \";\n\n        if (condition) {\n            errorString += condition;\n        } else {\n            errorString += \"unknown\";\n        }\n\n        if (text) {\n            errorString += \" - \" + text;\n        }\n\n        Strophe.error(errorString);\n\n        // close the connection on stream_error\n        this._conn._changeConnectStatus(connectstatus, condition);\n        this._conn._doDisconnect();\n        return true;\n    },\n\n    /** PrivateFunction: _reset\n     *  Reset the connection.\n     *\n     *  This function is called by the reset function of the Strophe Connection.\n     *  Is not needed by WebSockets.\n     */\n    _reset: function () {\n        return;\n    },\n\n    /** PrivateFunction: _connect\n     *  _Private_ function called by Strophe.Connection.connect\n     *\n     *  Creates a WebSocket for a connection and assigns Callbacks to it.\n     *  Does nothing if there already is a WebSocket.\n     */\n    _connect: function () {\n        // Ensure that there is no open WebSocket from a previous Connection.\n        this._closeSocket();\n\n        // Create the new WobSocket\n        this.socket = new WebSocket(this._conn.service, \"xmpp\");\n        this.socket.onopen = this._onOpen.bind(this);\n        this.socket.onerror = this._onError.bind(this);\n        this.socket.onclose = this._onClose.bind(this);\n        this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n    },\n\n    /** PrivateFunction: _connect_cb\n     *  _Private_ function called by Strophe.Connection._connect_cb\n     *\n     * checks for stream:error\n     *\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     */\n    _connect_cb: function(bodyWrap) {\n        var error = this._check_streamerror(bodyWrap, Strophe.Status.CONNFAIL);\n        if (error) {\n            return Strophe.Status.CONNFAIL;\n        }\n    },\n\n    /** PrivateFunction: _handleStreamStart\n     * _Private_ function that checks the opening <open /> tag for errors.\n     *\n     * Disconnects if there is an error and returns false, true otherwise.\n     *\n     *  Parameters:\n     *    (Node) message - Stanza containing the <open /> tag.\n     */\n    _handleStreamStart: function(message) {\n        var error = false;\n\n        // Check for errors in the <open /> tag\n        var ns = message.getAttribute(\"xmlns\");\n        if (typeof ns !== \"string\") {\n            error = \"Missing xmlns in <open />\";\n        } else if (ns !== Strophe.NS.FRAMING) {\n            error = \"Wrong xmlns in <open />: \" + ns;\n        }\n\n        var ver = message.getAttribute(\"version\");\n        if (typeof ver !== \"string\") {\n            error = \"Missing version in <open />\";\n        } else if (ver !== \"1.0\") {\n            error = \"Wrong version in <open />: \" + ver;\n        }\n\n        if (error) {\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, error);\n            this._conn._doDisconnect();\n            return false;\n        }\n\n        return true;\n    },\n\n    /** PrivateFunction: _connect_cb_wrapper\n     * _Private_ function that handles the first connection messages.\n     *\n     * On receiving an opening stream tag this callback replaces itself with the real\n     * message handler. On receiving a stream error the connection is terminated.\n     */\n    _connect_cb_wrapper: function(message) {\n        if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n            // Strip the XML Declaration, if there is one\n            var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n            if (data === '') return;\n\n            var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n            this._conn.xmlInput(streamStart);\n            this._conn.rawInput(message.data);\n\n            //_handleStreamSteart will check for XML errors and disconnect on error\n            if (this._handleStreamStart(streamStart)) {\n                //_connect_cb will check for stream:error and disconnect on error\n                this._connect_cb(streamStart);\n            }\n        } else if (message.data.indexOf(\"<close \") === 0) { // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n            // Parse the raw string to an XML element\n            var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n            // Report this input to the raw and xml handlers\n            this._conn.xmlInput(parsedMessage);\n            this._conn.rawInput(message.data);\n            var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n            if (see_uri) {\n                var service = this._conn.service;\n                // Valid scenarios: WSS->WSS, WS->ANY\n                var isSecureRedirect = (service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0) || (service.indexOf(\"ws:\") >= 0);\n                if(isSecureRedirect) {\n                    this._conn._changeConnectStatus(\n                        Strophe.Status.REDIRECT,\n                        \"Received see-other-uri, resetting connection\"\n                    );\n                    this._conn.reset();\n                    this._conn.service = see_uri;\n                    this._connect();\n                }\n            } else {\n                this._conn._changeConnectStatus(\n                    Strophe.Status.CONNFAIL,\n                    \"Received closing stream\"\n                );\n                this._conn._doDisconnect();\n            }\n        } else {\n            var string = this._streamWrap(message.data);\n            var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n            this.socket.onmessage = this._onMessage.bind(this);\n            this._conn._connect_cb(elem, null, message.data);\n        }\n    },\n\n    /** PrivateFunction: _disconnect\n     *  _Private_ function called by Strophe.Connection.disconnect\n     *\n     *  Disconnects and sends a last stanza if one is given\n     *\n     *  Parameters:\n     *    (Request) pres - This stanza will be sent before disconnecting.\n     */\n    _disconnect: function (pres) {\n        if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n            if (pres) {\n                this._conn.send(pres);\n            }\n            var close = $build(\"close\", { \"xmlns\": Strophe.NS.FRAMING });\n            this._conn.xmlOutput(close.tree());\n            var closeString = Strophe.serialize(close);\n            this._conn.rawOutput(closeString);\n            try {\n                this.socket.send(closeString);\n            } catch (e) {\n                Strophe.info(\"Couldn't send <close /> tag.\");\n            }\n        }\n        this._conn._doDisconnect();\n    },\n\n    /** PrivateFunction: _doDisconnect\n     *  _Private_ function to disconnect.\n     *\n     *  Just closes the Socket for WebSockets\n     */\n    _doDisconnect: function () {\n        Strophe.info(\"WebSockets _doDisconnect was called\");\n        this._closeSocket();\n    },\n\n    /** PrivateFunction _streamWrap\n     *  _Private_ helper function to wrap a stanza in a <stream> tag.\n     *  This is used so Strophe can process stanzas from WebSockets like BOSH\n     */\n    _streamWrap: function (stanza) {\n        return \"<wrapper>\" + stanza + '</wrapper>';\n    },\n\n\n    /** PrivateFunction: _closeSocket\n     *  _Private_ function to close the WebSocket.\n     *\n     *  Closes the socket if it is still open and deletes it\n     */\n    _closeSocket: function () {\n        if (this.socket) { try {\n            this.socket.onerror = null;\n            this.socket.close();\n        } catch (e) {} }\n        this.socket = null;\n    },\n\n    /** PrivateFunction: _emptyQueue\n     * _Private_ function to check if the message queue is empty.\n     *\n     *  Returns:\n     *    True, because WebSocket messages are send immediately after queueing.\n     */\n    _emptyQueue: function () {\n        return true;\n    },\n\n    /** PrivateFunction: _onClose\n     * _Private_ function to handle websockets closing.\n     *\n     * Nothing to do here for WebSockets\n     */\n    _onClose: function(e) {\n        if(this._conn.connected && !this._conn.disconnecting) {\n            Strophe.error(\"Websocket closed unexpectedly\");\n            this._conn._doDisconnect();\n        } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n            // in case the onError callback was not called (Safari 10 does not\n            // call onerror when the initial connection fails) we need to\n            // dispatch a CONNFAIL status update to be consistent with the\n            // behavior on other browsers.\n            Strophe.error(\"Websocket closed unexcectedly\");\n            this._conn._changeConnectStatus(\n                Strophe.Status.CONNFAIL,\n                \"The WebSocket connection could not be established or was disconnected.\"\n            );\n            this._conn._doDisconnect();\n        } else {\n            Strophe.info(\"Websocket closed\");\n        }\n    },\n\n    /** PrivateFunction: _no_auth_received\n     *\n     * Called on stream start/restart when no stream:features\n     * has been received.\n     */\n    _no_auth_received: function (callback) {\n        Strophe.error(\"Server did not offer a supported authentication mechanism\");\n        this._changeConnectStatus(\n            Strophe.Status.CONNFAIL,\n            Strophe.ErrorCondition.NO_AUTH_MECH\n        );\n        if (callback) {\n            callback.call(this._conn);\n        }\n        this._conn._doDisconnect();\n    },\n\n    /** PrivateFunction: _onDisconnectTimeout\n     *  _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     *  This does nothing for WebSockets\n     */\n    _onDisconnectTimeout: function () {},\n\n    /** PrivateFunction: _abortAllRequests\n     *  _Private_ helper function that makes sure all pending requests are aborted.\n     */\n    _abortAllRequests: function () {},\n\n    /** PrivateFunction: _onError\n     * _Private_ function to handle websockets errors.\n     *\n     * Parameters:\n     * (Object) error - The websocket error.\n     */\n    _onError: function(error) {\n        Strophe.error(\"Websocket error \" + error);\n        this._conn._changeConnectStatus(\n            Strophe.Status.CONNFAIL,\n            \"The WebSocket connection could not be established or was disconnected.\"\n        );\n        this._disconnect();\n    },\n\n    /** PrivateFunction: _onIdle\n     *  _Private_ function called by Strophe.Connection._onIdle\n     *\n     *  sends all queued stanzas\n     */\n    _onIdle: function () {\n        var data = this._conn._data;\n        if (data.length > 0 && !this._conn.paused) {\n            for (var i = 0; i < data.length; i++) {\n                if (data[i] !== null) {\n                    var stanza, rawStanza;\n                    if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                    } else {\n                        stanza = data[i];\n                    }\n                    rawStanza = Strophe.serialize(stanza);\n                    this._conn.xmlOutput(stanza);\n                    this._conn.rawOutput(rawStanza);\n                    this.socket.send(rawStanza);\n                }\n            }\n            this._conn._data = [];\n        }\n    },\n\n    /** PrivateFunction: _onMessage\n     * _Private_ function to handle websockets messages.\n     *\n     * This function parses each of the messages as if they are full documents.\n     * [TODO : We may actually want to use a SAX Push parser].\n     *\n     * Since all XMPP traffic starts with\n     *  <stream:stream version='1.0'\n     *                 xml:lang='en'\n     *                 xmlns='jabber:client'\n     *                 xmlns:stream='http://etherx.jabber.org/streams'\n     *                 id='3697395463'\n     *                 from='SERVER'>\n     *\n     * The first stanza will always fail to be parsed.\n     *\n     * Additionally, the seconds stanza will always be <stream:features> with\n     * the stream NS defined in the previous stanza, so we need to 'force'\n     * the inclusion of the NS in this stanza.\n     *\n     * Parameters:\n     * (string) message - The websocket message.\n     */\n    _onMessage: function(message) {\n        var elem, data;\n        // check for closing stream\n        var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n        if (message.data === close) {\n            this._conn.rawInput(close);\n            this._conn.xmlInput(message);\n            if (!this._conn.disconnecting) {\n                this._conn._doDisconnect();\n            }\n            return;\n        } else if (message.data.search(\"<open \") === 0) {\n            // This handles stream restarts\n            elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n            if (!this._handleStreamStart(elem)) {\n                return;\n            }\n        } else {\n            data = this._streamWrap(message.data);\n            elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n        }\n\n        if (this._check_streamerror(elem, Strophe.Status.ERROR)) {\n            return;\n        }\n\n        //handle unavailable presence stanza before disconnecting\n        if (this._conn.disconnecting &&\n                elem.firstChild.nodeName === \"presence\" &&\n                elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n            this._conn.xmlInput(elem);\n            this._conn.rawInput(Strophe.serialize(elem));\n            // if we are already disconnecting we will ignore the unavailable stanza and\n            // wait for the </stream:stream> tag before we close the connection\n            return;\n        }\n        this._conn._dataRecv(elem, message.data);\n    },\n\n    /** PrivateFunction: _onOpen\n     * _Private_ function to handle websockets connection setup.\n     *\n     * The opening stream tag is sent here.\n     */\n    _onOpen: function() {\n        Strophe.info(\"Websocket open\");\n        var start = this._buildStream();\n        this._conn.xmlOutput(start.tree());\n\n        var startString = Strophe.serialize(start);\n        this._conn.rawOutput(startString);\n        this.socket.send(startString);\n    },\n\n    /** PrivateFunction: _reqToData\n     * _Private_ function to get a stanza out of a request.\n     *\n     * WebSockets don't use requests, so the passed argument is just returned.\n     *\n     *  Parameters:\n     *    (Object) stanza - The stanza.\n     *\n     *  Returns:\n     *    The stanza that was passed.\n     */\n    _reqToData: function (stanza) {\n        return stanza;\n    },\n\n    /** PrivateFunction: _send\n     *  _Private_ part of the Connection.send function for WebSocket\n     *\n     * Just flushes the messages that are in the queue\n     */\n    _send: function () {\n        this._conn.flush();\n    },\n\n    /** PrivateFunction: _sendRestart\n     *\n     *  Send an xmpp:restart stanza.\n     */\n    _sendRestart: function () {\n        clearTimeout(this._conn._idleTimeout);\n        this._conn._onIdle.bind(this._conn)();\n    }\n};\nreturn Strophe;\n}));\n\n(function(root){\n    if(typeof define === 'function' && define.amd){\n        define('strophe',[\n            \"strophe-core\",\n            \"strophe-bosh\",\n            \"strophe-websocket\"\n        ], function (wrapper) {\n            return wrapper;\n        });\n    } else if (typeof exports === 'object') {\n        var core = require('./core');\n        require('./bosh');\n        require('./websocket');\n        module.exports = core;\n    }\n})(this);\n\n\nrequire([\"strophe-polyfill\"]);\n/* jshint ignore:start */\n    //The modules for your project will be inlined above\n    //this snippet. Ask almond to synchronously require the\n    //module value for 'main' here and return it as the\n    //value to use for the public API for the built file.\n    return require('strophe');\n}));\n/* jshint ignore:end */\n","/**\n * The events for the conference.\n */\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * A participant avatar has changed.\n */\nexport const AVATAR_CHANGED = 'conference.avatarChanged';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","import EventEmitter from 'events';\n\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport RTPStats from './RTPStatsCollector';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as StatisticsEvents from '../../service/statistics/Events';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl\n                || 'https://api.callstats.io/static/callstats-ws.min.js',\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    const userName = Settings.callStatsUserName;\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.swapUserNameAndAlias\n            ? options.callStatsAliasName : userName,\n        aliasName: options.swapUserNameAndAlias\n            ? userName : options.callStatsAliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} callStatsAliasName - The alias name to use when\n * initializing callstats.\n * @property {string} callStatsConfIDNamespace - A namespace to prepend the\n * callstats conference ID with.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {boolean} swapUserNameAndAlias - Whether to swap the places of\n * username and alias when initiating callstats.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.callStatsConfIDNamespace) {\n            logger.warn('\"callStatsConfIDNamespace\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                2000,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this._getCallStatsConfID(),\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Constructs the CallStats conference ID based on the options currently\n * configured in this instance.\n * @return {string}\n * @private\n */\nStatistics.prototype._getCallStatsConfID = function() {\n    // The conference ID is case sensitive!!!\n    return this.options.callStatsConfIDNamespace\n        ? `${this.options.callStatsConfIDNamespace}/${this.options.roomName}`\n        : this.options.roomName;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    CallStats.sendFeedback(this._getCallStatsConfID(), overall, comment);\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport RandomUtil from '../util/RandomUtil';\nimport browser from '../browser';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.log(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.log(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.log('did not find typ in the right place');\n            logger.log(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribtue is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by\n     *  moving it to the beginning of the payload types\n     *  list (modifies the given mline in place).  If there\n     *  are multiple options within the same codec (multiple h264\n     *  profiles, for instance), this will prefer the first one\n     *  that is found.\n     * @param {object} videoMLine the video mline object from\n     *  an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferVideoCodec(videoMLine, codecName) {\n        let payloadType = null;\n\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        for (let i = 0; i < videoMLine.rtp.length; ++i) {\n            const rtp = videoMLine.rtp[i];\n\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                payloadType = rtp.payload;\n                break;\n            }\n        }\n        if (payloadType) {\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const payloadTypes\n                = videoMLine.payloads\n                    .toString()\n                    .split(' ')\n                    .map(p => parseInt(p, 10));\n            const payloadIndex = payloadTypes.indexOf(payloadType);\n\n            payloadTypes.splice(payloadIndex, 1);\n            payloadTypes.unshift(payloadType);\n            videoMLine.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} videoMLine the video mline object from an sdp as parsed\n     * by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     */\n    stripVideoCodec(videoMLine, codecName) {\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        const removePts = [];\n\n        for (const rtp of videoMLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                removePts.push(rtp.payload);\n            }\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = videoMLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = videoMLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other video codecs, disable the stream.\n                videoMLine.port = 0;\n                videoMLine.direction = 'inactive';\n                videoMLine.payloads = '*';\n            } else {\n                videoMLine.payloads = keepPts.join(' ');\n            }\n\n            videoMLine.rtp = videoMLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            videoMLine.fmtp = videoMLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (videoMLine.rtcpFb) {\n                videoMLine.rtcpFb = videoMLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    GRANTED_PERMISSIONS: 'rtc.granted_permissions',\n\n    IS_SELECTED_CHANGED: 'rtc.is_selected_change',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType) {\n    return {\n        attributes: { 'media_type': mediaType },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function() {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted'\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport Listenable from '../util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport screenObtainer from './ScreenObtainer';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default resolution to obtain for video tracks if no resolution is specified.\n * This default is used for old gum flow only, as new gum flow uses\n * {@link DEFAULT_CONSTRAINTS}.\n */\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\n\n/**\n * Default devices to obtain when no specific devices are specified. This\n * default is used for old gum flow only.\n */\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        aspectRatio: 16 / 9,\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 240\n        }\n    }\n};\n\n/**\n * The default frame rate for Screen Sharing.\n */\nconst SS_DEFAULT_FRAME_RATE = 5;\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Disables Highpass Filter\nlet disableHPF = false;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices;\nlet availableDevicesPollTimer;\n\n/**\n * Initialize wrapper function for enumerating devices.\n * TODO: remove this, it should no longer be needed.\n *\n * @returns {?Function}\n */\nfunction initEnumerateDevicesWithCallback() {\n    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n        return callback => {\n            navigator.mediaDevices.enumerateDevices()\n                .then(callback, () => callback([]));\n        };\n    }\n}\n\n/**\n *\n * @param constraints\n * @param isNewStyleConstraintsSupported\n * @param resolution\n */\nfunction setResolutionConstraints(\n        constraints,\n        isNewStyleConstraintsSupported,\n        resolution) {\n    if (Resolutions[resolution]) {\n        if (isNewStyleConstraintsSupported) {\n            constraints.video.width = {\n                ideal: Resolutions[resolution].width\n            };\n            constraints.video.height = {\n                ideal: Resolutions[resolution].height\n            };\n        }\n\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\n    }\n\n    if (constraints.video.mandatory.minWidth) {\n        constraints.video.mandatory.maxWidth\n            = constraints.video.mandatory.minWidth;\n    }\n\n    if (constraints.video.mandatory.minHeight) {\n        constraints.video.mandatory.maxHeight\n            = constraints.video.mandatory.minHeight;\n    }\n}\n\n/**\n * @param {string[]} um required user media types\n *\n * @param {Object} [options={}] optional parameters\n * @param {string} options.resolution\n * @param {number} options.bandwidth\n * @param {number} options.fps\n * @param {string} options.desktopStream\n * @param {string} options.cameraDeviceId\n * @param {string} options.micDeviceId\n * @param {CameraFacingMode} options.facingMode\n * @param {bool} firefox_fake_device\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n */\nfunction getConstraints(um, options = {}) {\n    const constraints = {\n        audio: false,\n        video: false\n    };\n\n    // Don't mix new and old style settings for Chromium as this leads\n    // to TypeError in new Chromium versions. @see\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\n    // This is a temporary solution, in future we will fully split old and\n    // new style constraints when new versions of Chromium and Firefox will\n    // have stable support of new constraints format. For more information\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\n    const isNewStyleConstraintsSupported\n        = browser.isFirefox()\n            || browser.isSafariWithVP8()\n            || browser.isEdge()\n            || browser.isReactNative();\n\n    if (um.indexOf('video') >= 0) {\n        // same behaviour as true\n        constraints.video = { mandatory: {},\n            optional: [] };\n\n        if (options.cameraDeviceId) {\n            if (isNewStyleConstraintsSupported) {\n                // New style of setting device id.\n                constraints.video.deviceId = options.cameraDeviceId;\n            }\n\n            // Old style.\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\n        } else {\n            // Prefer the front i.e. user-facing camera (to the back i.e.\n            // environment-facing camera, for example).\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\n            // but this probably needs to be decided when updating other\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\n\n            /**\n             * <TABEEB> Set default \"environment\" camera when a user stars a call.\n             *\n             * Original code:\n             * const facingMode = options.facingMode || CameraFacingMode.USER;\n             */\n            const facingMode = options.facingMode || CameraFacingMode.ENVIRONMENT;\n            // </TABEEB>\n\n            if (isNewStyleConstraintsSupported) {\n                constraints.video.facingMode = facingMode;\n            }\n            constraints.video.optional.push({\n                facingMode\n            });\n        }\n\n        if (options.minFps || options.maxFps || options.fps) {\n            // for some cameras it might be necessary to request 30fps\n            // so they choose 30fps mjpg over 10fps yuy2\n            if (options.minFps || options.fps) {\n                // Fall back to options.fps for backwards compatibility\n                options.minFps = options.minFps || options.fps;\n                constraints.video.mandatory.minFrameRate = options.minFps;\n            }\n            if (options.maxFps) {\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\n            }\n        }\n\n        setResolutionConstraints(\n            constraints, isNewStyleConstraintsSupported, options.resolution);\n    }\n    if (um.indexOf('audio') >= 0) {\n        if (browser.isReactNative()) {\n            // The react-native-webrtc project that we're currently using\n            // expects the audio constraint to be a boolean.\n            constraints.audio = true;\n        } else if (browser.isFirefox()) {\n            if (options.micDeviceId) {\n                constraints.audio = {\n                    mandatory: {},\n                    deviceId: options.micDeviceId, // new style\n                    optional: [ {\n                        sourceId: options.micDeviceId // old style\n                    } ] };\n            } else {\n                constraints.audio = true;\n            }\n        } else {\n            // same behaviour as true\n            constraints.audio = { mandatory: {},\n                optional: [] };\n            if (options.micDeviceId) {\n                if (isNewStyleConstraintsSupported) {\n                    // New style of setting device id.\n                    constraints.audio.deviceId = options.micDeviceId;\n                }\n\n                // Old style.\n                constraints.audio.optional.push({\n                    sourceId: options.micDeviceId\n                });\n            }\n\n            // if it is good enough for hangouts...\n            constraints.audio.optional.push(\n                { echoCancellation: !disableAEC && !disableAP },\n                { googEchoCancellation: !disableAEC && !disableAP },\n                { googAutoGainControl: !disableAGC && !disableAP },\n                { googNoiseSuppression: !disableNS && !disableAP },\n                { googHighpassFilter: !disableHPF && !disableAP },\n                { googNoiseSuppression2: !disableNS && !disableAP },\n                { googEchoCancellation2: !disableAEC && !disableAP },\n                { googAutoGainControl2: !disableAGC && !disableAP }\n            );\n        }\n    }\n    if (um.indexOf('screen') >= 0) {\n        if (browser.isChrome()) {\n            constraints.video = {\n                mandatory: getSSConstraints({\n                    ...options,\n                    source: 'screen'\n                }),\n                optional: []\n            };\n\n        } else if (browser.isFirefox()) {\n            constraints.video = {\n                mozMediaSource: 'window',\n                mediaSource: 'window',\n                frameRate: options.frameRate || {\n                    min: SS_DEFAULT_FRAME_RATE,\n                    max: SS_DEFAULT_FRAME_RATE\n                }\n            };\n\n        } else {\n            const errmsg\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\n                    + ' and Firefox';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n        }\n    }\n    if (um.indexOf('desktop') >= 0) {\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            }),\n            optional: []\n        };\n    }\n\n    if (options.bandwidth) {\n        if (!constraints.video) {\n            // same behaviour as true\n            constraints.video = { mandatory: {},\n                optional: [] };\n        }\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\n    }\n\n    // we turn audio for both audio and video tracks, the fake audio & video\n    // seems to work only when enabled in one getUserMedia call, we cannot get\n    // fake audio separate by fake video this later can be a problem with some\n    // of the tests\n    if (browser.isFirefox() && options.firefox_fake_device) {\n        // seems to be fixed now, removing this experimental fix, as having\n        // multiple audio tracks brake the tests\n        // constraints.audio = true;\n        constraints.fake = true;\n    }\n\n    return constraints;\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted\n * types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video\n * capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use\n * as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which\n * to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is\n * pointing to.\n * @param {string} options.micDeviceId - The device id for the audio capture\n * device to get audio from.\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @private\n * @returns {Object}\n */\nfunction newGetConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = JSON.parse(JSON.stringify(\n        options.constraints || DEFAULT_CONSTRAINTS));\n\n    if (um.indexOf('video') >= 0) {\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            /**\n             * <TABEEB> Set default \"environment\" camera when a user stars a call.\n             *\n             * Original code:\n             * const facingMode = options.facingMode || CameraFacingMode.USER;\n             */\n            const facingMode = options.facingMode || CameraFacingMode.ENVIRONMENT;\n            // </TABEEB>\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        // NOTE(brian): the new-style ('advanced' instead of 'optional')\n        // doesn't seem to carry through the googXXX constraints\n        // Changing back to 'optional' here (even with video using\n        // the 'advanced' style) allows them to be passed through\n        // but also requires the device id to capture to be set in optional\n        // as sourceId otherwise the constraints are considered malformed.\n        if (!constraints.audio.optional) {\n            constraints.audio.optional = [];\n        }\n\n        constraints.audio.optional.push(\n            { sourceId: options.micDeviceId },\n            { echoCancellation: !disableAEC && !disableAP },\n            { googEchoCancellation: !disableAEC && !disableAP },\n            { googAutoGainControl: !disableAGC && !disableAP },\n            { googNoiseSuppression: !disableNS && !disableAP },\n            { googHighpassFilter: !disableHPF && !disableAP },\n            { googNoiseSuppression2: !disableNS && !disableAP },\n            { googEchoCancellation2: !disableAEC && !disableAP },\n            { googAutoGainControl2: !disableAGC && !disableAP }\n        );\n    } else {\n        constraints.audio = false;\n    }\n\n    if (um.indexOf('desktop') >= 0) {\n        if (!constraints.video || typeof constraints.video === 'boolean') {\n            constraints.video = {};\n        }\n\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            })\n        };\n    }\n\n    return constraints;\n}\n\n/**\n * Generates GUM constraints for screen sharing.\n *\n * @param {Object} options - The options passed to\n * <tt>obtainAudioAndVideoPermissions</tt>.\n * @returns {Object} - GUM constraints.\n *\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\n * should make it work for all use cases.\n */\nfunction getSSConstraints(options = {}) {\n    const {\n        desktopStream,\n        frameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: SS_DEFAULT_FRAME_RATE\n        }\n    } = options;\n    const { max, min } = frameRate;\n\n    const constraints = {\n        chromeMediaSource: options.source,\n        maxWidth: window.screen.width,\n        maxHeight: window.screen.height\n    };\n\n    if (typeof min === 'number') {\n        constraints.minFrameRate = min;\n    }\n\n    if (typeof max === 'number') {\n        constraints.maxFrameRate = max;\n    }\n\n    if (typeof desktopStream !== 'undefined') {\n        constraints.chromeMediaSourceId = desktopStream;\n    }\n\n    return constraints;\n}\n\n/**\n * Generates constraints for screen sharing when using getDisplayMedia.\n * The constraints(MediaTrackConstraints) are applied to the resulting track.\n *\n * @returns {Object} - MediaTrackConstraints constraints.\n */\nfunction getTrackSSConstraints(options = {}) {\n    // we used to set height and width in the constraints, but this can lead\n    // to inconsistencies if the browser is on a lower resolution screen\n    // and we share a screen with bigger resolution, so they are now not set\n    const constraints = {\n        frameRate: SS_DEFAULT_FRAME_RATE\n    };\n    const { desktopSharingFrameRate } = options;\n\n    if (desktopSharingFrameRate && desktopSharingFrameRate.max) {\n        constraints.frameRate = desktopSharingFrameRate.max;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info(\n        'list of media devices has changed:',\n        availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, devicesReceived);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, devicesReceived);\n}\n\n/**\n * Handles the newly created Media Streams.\n * @param streams the new Media Streams\n * @param resolution the resolution of the video streams\n * @returns {*[]} object that describes the new streams\n */\nfunction handleLocalStream(streams, resolution) {\n    let audioStream, desktopStream, videoStream;\n    const res = [];\n\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\n    // the browser, its capabilities, etc. and has taken the decision whether to\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\n    // the specified streams and figure out what we've received based on\n    // obtainAudioAndVideoPermissions' decision.\n    if (streams) {\n        // As mentioned above, certian types of browser (e.g. Chrome) support\n        // (with a result which meets our requirements expressed bellow) calling\n        // getUserMedia once for both audio and video.\n        const audioVideo = streams.audioVideo;\n\n        if (audioVideo) {\n            const audioTracks = audioVideo.getAudioTracks();\n\n            if (audioTracks.length) {\n                audioStream = new MediaStream();\n                for (let i = 0; i < audioTracks.length; i++) {\n                    audioStream.addTrack(audioTracks[i]);\n                }\n            }\n\n            const videoTracks = audioVideo.getVideoTracks();\n\n            if (videoTracks.length) {\n                videoStream = new MediaStream();\n                for (let j = 0; j < videoTracks.length; j++) {\n                    videoStream.addTrack(videoTracks[j]);\n                }\n            }\n        } else {\n            // On other types of browser (e.g. Firefox) we choose (namely,\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\n            // (type).\n            audioStream = streams.audio;\n            videoStream = streams.video;\n        }\n\n        desktopStream = streams.desktop;\n    }\n\n    if (desktopStream) {\n        const { stream, sourceId, sourceType } = desktopStream;\n\n        res.push({\n            stream,\n            sourceId,\n            sourceType,\n            track: stream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.DESKTOP\n        });\n    }\n    if (audioStream) {\n        res.push({\n            stream: audioStream,\n            track: audioStream.getAudioTracks()[0],\n            mediaType: MediaType.AUDIO,\n            videoType: null\n        });\n    }\n    if (videoStream) {\n        res.push({\n            stream: videoStream,\n            track: videoStream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.CAMERA,\n            resolution\n        });\n    }\n\n    return res;\n}\n\n/**\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\n * source of a video element that tries to be browser-agnostic through feature\n * checking. Note though that it was not completely clear from the predating\n * browser-specific implementations what &quot;videoSrc&quot; was because one\n * implementation of {@link RTCUtils#getVideoSrc} would return\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\n * appear to be used anywhere. Generally, the implementation will try to follow\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\n * properties of the specified <tt>element</tt> taking into account vender\n * prefixes.\n *\n * @param element the element whose video source/src is to be set to the\n * specified <tt>stream</tt>\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\n * source/src of <tt>element</tt>\n */\nfunction defaultSetVideoSrc(element, stream) {\n    // srcObject\n    let srcObjectPropertyName = 'srcObject';\n\n    if (!(srcObjectPropertyName in element)) {\n        srcObjectPropertyName = 'mozSrcObject';\n        if (!(srcObjectPropertyName in element)) {\n            srcObjectPropertyName = null;\n        }\n    }\n    if (srcObjectPropertyName) {\n        element[srcObjectPropertyName] = stream;\n\n        return;\n    }\n\n    // src\n    let src;\n\n    if (stream) {\n        src = stream.jitsiObjectURL;\n\n        // Save the created URL for stream so we can reuse it and not keep\n        // creating URLs.\n        if (!src) {\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\n        }\n    }\n    element.src = src || '';\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.disableHPF === 'boolean') {\n            disableHPF = options.disableHPF;\n            logger.info(`Disable HPF: ${disableHPF}`);\n        }\n\n        availableDevices = undefined;\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        this.enumerateDevices = initEnumerateDevicesWithCallback();\n\n        if (browser.usesNewGumFlow()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        } else if (browser.isChromiumBased() // this is chrome < 61\n                || browser.isReactNative()) {\n\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    defaultSetVideoSrc(element, stream);\n\n                    return element;\n                });\n\n            this.getStreamID = function({ id }) {\n                // A. MediaStreams from FF endpoints have the characters '{' and\n                // '}' that make jQuery choke.\n                // B. The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n\n            if (!MediaStream.prototype.getVideoTracks) {\n                MediaStream.prototype.getVideoTracks = function() {\n                    return this.videoTracks;\n                };\n            }\n            if (!MediaStream.prototype.getAudioTracks) {\n                MediaStream.prototype.getAudioTracks = function() {\n                    return this.audioTracks;\n                };\n            }\n        } else {\n            const message = 'Endpoint does not appear to be WebRTC-capable';\n\n            logger.error(message);\n            throw new Error(message);\n        }\n\n        this._initPCConstraints(options);\n\n        screenObtainer.init(\n            options,\n            this.getUserMediaWithConstraints.bind(this));\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.splice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n\n                // Use a shared callback to handle both the devicechange event\n                // and the polling implementations. This prevents duplication\n                // and works around a chrome bug (verified to occur on 68) where\n                // devicechange fires twice in a row, which can cause async post\n                // devicechange processing to collide.\n                const updateKnownDevices = () => this.enumerateDevices(pds => {\n                    if (compareAvailableMediaDevices(pds)) {\n                        onMediaDevicesListChanged(pds);\n                    }\n                });\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        updateKnownDevices);\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        updateKnownDevices,\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     * Creates instance objects for peer connection constraints both for p2p\n     * and outside of p2p.\n     *\n     * @params {Object} options - Configuration for setting RTCUtil's instance\n     * objects for peer connection constraints.\n     * @params {boolean} options.useIPv6 - Set to true if IPv6 should be used.\n     * @params {boolean} options.disableSuspendVideo - Whether or not video\n     * should become suspended if bandwidth estimation becomes low.\n     * @params {Object} options.testing - Additional configuration for work in\n     * development.\n     * @params {Object} options.testing.forceP2PSuspendVideoRatio - True if\n     * video should become suspended if bandwidth estimation becomes low while\n     * in peer to peer connection mode.\n     */\n    _initPCConstraints(options) {\n        if (browser.isFirefox()) {\n            this.pcConstraints = {};\n        } else if (browser.isChromiumBased() || browser.isReactNative()) {\n            this.pcConstraints = { optional: [\n                { googHighStartBitrate: 0 },\n                { googPayloadPadding: true },\n                { googScreencastMinBitrate: 400 },\n                { googCpuOveruseDetection: true },\n                { googCpuOveruseEncodeUsage: true },\n                { googCpuUnderuseThreshold: 55 },\n                { googCpuOveruseThreshold: 85 }\n            ] };\n\n            if (options.useIPv6) {\n                // https://code.google.com/p/webrtc/issues/detail?id=2828\n                this.pcConstraints.optional.push({ googIPv6: true });\n            }\n\n            this.p2pPcConstraints\n                = JSON.parse(JSON.stringify(this.pcConstraints));\n\n            // Allows sending of video to be suspended if the bandwidth\n            // estimation is too low.\n            if (!options.disableSuspendVideo) {\n                this.pcConstraints.optional.push(\n                    { googSuspendBelowMinBitrate: true });\n            }\n\n            // There's no reason not to use this for p2p\n            this.p2pPcConstraints.optional.push({\n                googSuspendBelowMinBitrate: true\n            });\n        }\n\n        this.p2pPcConstraints = this.p2pPcConstraints || this.pcConstraints;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n    * @param {string[]} um required user media types\n    * @param {Object} [options] optional parameters\n    * @param {string} options.resolution\n    * @param {number} options.bandwidth\n    * @param {number} options.fps\n    * @param {string} options.desktopStream\n    * @param {string} options.cameraDeviceId\n    * @param {string} options.micDeviceId\n    * @param {Object} options.frameRate - used only for dekstop sharing.\n    * @param {Object} options.frameRate.min - Minimum fps\n    * @param {Object} options.frameRate.max - Maximum fps\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\n    * on failure.\n    **/\n    getUserMediaWithConstraints(um, options = {}) {\n        const constraints = getConstraints(um, options);\n\n        logger.info('Get media constraints', constraints);\n\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(um, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(um, undefined);\n                    reject(new JitsiTrackError(error, constraints, um));\n                });\n        });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @returns {Promise}\n     */\n    _newGetUserMediaWithConstraints(umDevices, constraints = {}) {\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(umDevices, undefined);\n                    reject(new JitsiTrackError(error, constraints, umDevices));\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_newGetUserMediaWithConstraints.\n     *\n     * @param {Object} options\n     * @param {Object} options.desktopSharingExtensionExternalInstallation\n     * @param {string[]} options.desktopSharingSources\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _newGetDesktopMedia(options) {\n        if (!screenObtainer.isSupported() || !browser.supportsVideo()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                this._parseDesktopSharingOptions(options),\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {Object} [options] optional parameters\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    obtainAudioAndVideoPermissions(options = {}) {\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\n\n        const requestingDesktop = options.devices.includes('desktop');\n\n        if (requestingDesktop && !screenObtainer.isSupported()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        let gumPromise;\n\n        if (browser.supportsMediaStreamConstructor()) {\n            gumPromise = this._getAudioAndVideoStreams(options);\n        } else {\n            // If the MediaStream constructor is not supported, then get tracks\n            // in separate GUM calls in order to keep different tracks separate.\n            gumPromise = this._getAudioAndVideoStreamsSeparately(options);\n        }\n\n        return gumPromise.then(streams =>\n            handleLocalStream(streams, options.resolution));\n    }\n\n    /**\n     * Performs one call to getUserMedia for audio and/or video and another call\n     * for desktop.\n     *\n     * @param {Object} options - An object describing how the gUM request should\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\n     * @returns {*} Promise object that will receive the new JitsiTracks on\n     * success or a JitsiTrackError on failure.\n     */\n    _getAudioAndVideoStreams(options) {\n        const requestingDesktop = options.devices.includes('desktop');\n\n        options.devices = options.devices.filter(device =>\n            device !== 'desktop');\n\n        const gumPromise = options.devices.length\n            ? this.getUserMediaWithConstraints(options.devices, options)\n            : Promise.resolve(null);\n\n        return gumPromise\n            .then(avStream => {\n                // If any requested devices are missing, call gum again in\n                // an attempt to obtain the actual error. For example, the\n                // requested video device is missing or permission was\n                // denied.\n                const missingTracks\n                    = this._getMissingTracks(options.devices, avStream);\n\n                if (missingTracks.length) {\n                    this.stopMediaStream(avStream);\n\n                    return this.getUserMediaWithConstraints(\n                        missingTracks, options)\n\n                        // GUM has already failed earlier and this success\n                        // handling should not be reached.\n                        .then(() => Promise.reject(new JitsiTrackError(\n                            { name: 'UnknownError' },\n                            getConstraints(options.devices, options),\n                            missingTracks)));\n                }\n\n                return avStream;\n            })\n            .then(audioVideo => {\n                if (!requestingDesktop) {\n                    return { audioVideo };\n                }\n\n                if (options.desktopSharingSourceDevice) {\n                    this.stopMediaStream(audioVideo);\n\n                    throw new Error('Using a camera as screenshare source is'\n                        + 'not supported on this browser.');\n                }\n\n                return new Promise((resolve, reject) => {\n                    screenObtainer.obtainStream(\n                        this._parseDesktopSharingOptions(options),\n                        desktop => resolve({\n                            audioVideo,\n                            desktop\n                        }),\n                        error => {\n                            if (audioVideo) {\n                                this.stopMediaStream(audioVideo);\n                            }\n                            reject(error);\n                        });\n                });\n            });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Performs separate getUserMedia calls for audio and video instead of in\n     * one call. Will also request desktop if specified.\n     *\n     * @param {Object} options - An object describing how the gUM request should\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\n     * @returns {*} Promise object that will receive the new JitsiTracks on\n     * success or a JitsiTrackError on failure.\n     */\n    _getAudioAndVideoStreamsSeparately(options) {\n        return new Promise((resolve, reject) => {\n            const deviceGUM = {\n                audio: (...args) =>\n                    this.getUserMediaWithConstraints([ 'audio' ], ...args),\n                video: (...args) =>\n                    this.getUserMediaWithConstraints([ 'video' ], ...args),\n                desktop: (...args) =>\n                    screenObtainer.obtainStream(\n                        this._parseDesktopSharingOptions(options), ...args)\n            };\n\n            obtainDevices({\n                options,\n                streams: {},\n                successCallback: resolve,\n                errorCallback: reject,\n                deviceGUM\n            });\n        });\n    }\n\n    /**\n     * Returns an object formatted for specifying desktop sharing parameters.\n     *\n     * @param {Object} options - Takes in the same options object as\n     * {@link obtainAudioAndVideoPermissions}.\n     * @returns {Object}\n     */\n    _parseDesktopSharingOptions(options) {\n        return {\n            ...options.desktopSharingExtensionExternalInstallation,\n            desktopSharingSources: options.desktopSharingSources,\n            gumOptions: {\n                frameRate: options.desktopSharingFrameRate\n            },\n            trackOptions: getTrackSSConstraints(options)\n        };\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    newObtainAudioAndVideoPermissions(options) {\n        logger.info('Using the new gUM flow');\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = options.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSourceDevice,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            } = options;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n                const requestedDevices = [ 'video' ];\n\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\n                // get constraints for the desktop stream.\n                const { gumOptions, trackOptions }\n                    = this._parseDesktopSharingOptions(options);\n\n                // Create a custom constraints object to use exact device\n                // matching to make sure there is no fallthrough to another\n                // camera device. If a matching device could not be found, try\n                // anyways and let the caller handle errors.\n                const constraints = {\n                    video: {\n                        ...gumOptions,\n                        deviceId: {\n                            exact: (matchingDevice && matchingDevice.deviceId)\n                                || desktopSharingSourceDevice\n                        }\n                    }\n                };\n\n                return this._newGetUserMediaWithConstraints(\n                    requestedDevices, constraints)\n                    .then(stream => {\n                        const track = stream && stream.getTracks()[0];\n                        const applyConstrainsPromise\n                            = track && track.applyConstraints\n                                ? track.applyConstraints(trackOptions)\n                                : Promise.resolve();\n\n                        return applyConstrainsPromise\n                            .then(() => {\n                                return {\n                                    sourceType: 'device',\n                                    stream\n                                };\n                            });\n                    });\n            }\n\n            return this._newGetDesktopMedia({\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            mediaStreamsMetaData.push({\n                stream,\n                sourceId,\n                sourceType,\n                track: stream.getVideoTracks()[0],\n                videoType: VideoType.DESKTOP\n            });\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = options.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device =>\n                device === 'audio'\n                || (device === 'video' && browser.supportsVideo()));\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = newGetConstraints(\n                requestedCaptureDevices, options);\n\n            logger.info('Got media constraints: ', constraints);\n\n            return this._newGetUserMediaWithConstraints(\n                requestedCaptureDevices, constraints);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0]\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return deviceType === 'output' || deviceType === 'audiooutput'\n            ? isAudioOutputDeviceChangeAvailable\n            : browser.isChromiumBased()\n                || browser.isFirefox() || browser.isEdge();\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n\n        // if we have done createObjectURL, lets clean it\n        const url = mediaStream.jitsiObjectURL;\n\n        if (url) {\n            delete mediaStream.jitsiObjectURL;\n            URL.revokeObjectURL(url);\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n *\n * @param context Execution context, containing options and callbacks\n */\nfunction obtainDevices(context) {\n    if (!context.options.devices || context.options.devices.length === 0) {\n        return context.successCallback(context.streams || {});\n    }\n\n    const device = context.options.devices.splice(0, 1);\n\n    context.deviceGUM[device](context.options)\n        .then(stream => {\n            context.streams = context.streams || {};\n            context.streams[device] = stream;\n            obtainDevices(context);\n        }, error => {\n            Object.keys(context.streams).forEach(\n                d => rtcUtils.stopMediaStream(context.streams[d]));\n            logger.error(\n                `failed to obtain ${device} stream - stop`, error);\n\n            context.errorCallback(error);\n        });\n}\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * Generic error for jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_GENERIC_ERROR\n    = 'gum.chrome_extension_generic_error';\n\n/**\n * An error which indicates that the jidesha extension for Chrome is\n * failed to install.\n */\nexport const CHROME_EXTENSION_INSTALLATION_ERROR\n    = 'gum.chrome_extension_installation_error';\n\n/**\n * This error indicates that the attempt to start screensharing was initiated by\n * a script which did not originate in user gesture handler. It means that\n * you should to trigger the action again in response to a button click for\n * example.\n * @type {string}\n */\nexport const CHROME_EXTENSION_USER_GESTURE_REQUIRED\n    = 'gum.chrome_extension_user_gesture_required';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog in jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_USER_CANCELED\n    = 'gum.chrome_extension_user_canceled';\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * An error which indicates that the jidesha extension for Firefox is\n * needed to proceed with screen sharing, and that it is not installed.\n */\nexport const FIREFOX_EXTENSION_NEEDED = 'gum.firefox_extension_needed';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n\n/**\n * Indicates that the track is no receiving any data without reason(the\n * stream was stopped, etc)\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport BridgeChannel from './BridgeChannel';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RTCUtils from './RTCUtils';\nimport Statistics from '../statistics/statistics';\nimport TraceablePeerConnection from './TraceablePeerConnection';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n *\n * @param tracksInfo\n * @param options\n */\nfunction createLocalTracks(tracksInfo, options) {\n    const newTracks = [];\n    let deviceId = null;\n\n    tracksInfo.forEach(trackInfo => {\n        if (trackInfo.mediaType === MediaType.AUDIO) {\n            deviceId = options.micDeviceId;\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\n            deviceId = options.cameraDeviceId;\n        }\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n        const localTrack = new JitsiLocalTrack({\n            ...trackInfo,\n            deviceId,\n            facingMode: options.facingMode,\n            rtcId: rtcTrackIdCounter\n        });\n\n        newTracks.push(localTrack);\n    });\n\n    return newTracks;\n}\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type\n * }}\n */\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        // A flag whether we had received that the channel had opened we can\n        // get this flag out of sync if for some reason channel got closed\n        // from server, a desired behaviour so we can see errors when this\n        // happen.\n        // @private\n        // @type {boolean}\n        this._channelOpen = false;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = -1;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\n         * no user is pinned.\n         * @type {string|null}\n         * @private\n         */\n        this._pinnedEndpoint = null;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = [];\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n            this._updateAudioOutputForAudioTracks\n        );\n\n        RTCUtils.removeListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            this._onDeviceListChanged\n        );\n\n        this.removeListener(\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener\n        );\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static newCreateLocalTracks(tracksInfo) {\n        return _newCreateLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        const usesNewGumFlow = browser.usesNewGumFlow();\n        const obtainMediaPromise = usesNewGumFlow\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\n\n        return obtainMediaPromise.then(\n            tracksInfo => {\n                const tracks = usesNewGumFlow\n                    ? _newCreateLocalTracks(tracksInfo)\n                    : createLocalTracks(tracksInfo, options);\n\n                return tracks.some(track => !track._isReceivingData())\n                    ? Promise.reject(\n                        new JitsiTrackError(\n                            JitsiTrackErrors.NO_DATA_FROM_SOURCE))\n                    : tracks;\n            });\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(\n            peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            // Mark that channel as opened.\n            this._channelOpen = true;\n\n            // When the channel becomes available, tell the bridge about\n            // video selections so that it can do adaptive simulcast,\n            // we want the notification to trigger even if userJid\n            // is undefined, or null.\n            try {\n                this._channel.sendPinnedEndpointMessage(\n                    this._pinnedEndpoint);\n                this._channel.sendSelectedEndpointsMessage(\n                    this._selectedEndpoints);\n\n                if (typeof this._maxFrameHeight !== 'undefined') {\n                    this._channel.sendReceiverVideoConstraintMessage(\n                        this._maxFrameHeight);\n                }\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    `Cannot send selected(${this._selectedEndpoint})`\n                    + `pinned(${this._pinnedEndpoint})`\n                    + `frameHeight(${this._maxFrameHeight}) endpoint message`,\n                    error);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener);\n            this._channelOpenListener = null;\n\n            // If setLastN was invoked before the bridge channel completed\n            // opening, apply the specified value now that the channel\n            // is open. NOTE that -1 is the default value assumed by both\n            // RTC module and the JVB.\n            if (this._lastN !== -1) {\n                this._channel.sendSetLastNMessage(this._lastN);\n            }\n        };\n\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN,\n            this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n            this._channelOpen = false;\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     * Elects the participant with the given id to be the pinned participant in\n     * order to always receive video for this participant (even when last n is\n     * enabled).\n     * @param {stirng} id The user id.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     */\n    pinEndpoint(id) {\n        // Cache the value if channel is missing, till we open it.\n        this._pinnedEndpoint = id;\n        if (this._channel && this._channelOpen) {\n            this._channel.sendPinnedEndpointMessage(id);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will\n     *      provide information about the media or participants which is not\n     *      carried over SDP.\n     * @param {object} iceConfig An object describing the ICE config like\n     *      defined in the WebRTC specification.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\n     *      in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\n     *      the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\n     *      RTX.\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\n     *      disabled by removing it from the SDP.\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\n     *      preferred over other video codecs.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\n        const pcConstraints = RTC.getPCConstraints(isP2P);\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        // FIXME: We should rename iceConfig to pcConfig.\n        if (browser.supportsSdpSemantics()) {\n            iceConfig.sdpSemantics = 'plan-b';\n        }\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                iceConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Returns the current value for \"lastN\" - the amount of videos are going\n     * to be delivered. When set to -1 for unlimited or all available videos.\n     * @return {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\n     * (resource part of the JID). Returns array of removed tracks.\n     *\n     * @param {string} Owner The resource part of the MUC JID.\n     * @returns {JitsiRemoteTrack[]}\n     */\n    removeRemoteTracks(owner) {\n        let removedTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\n\n            removedTracks = removedTracks.concat(pcRemovedTracks);\n        }\n\n        logger.debug(\n            `Removed remote tracks for ${owner}`\n                + ` count: ${removedTracks.length}`);\n\n        return removedTracks;\n    }\n\n    /**\n     *\n     */\n    static getPCConstraints(isP2P) {\n        const pcConstraints\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\n\n        if (!pcConstraints) {\n            return {};\n        }\n\n        return JSON.parse(JSON.stringify(pcConstraints));\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channelOpen = false;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channelOpen) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR]\n    = 'Failed to install Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[\n    JitsiTrackErrors.CHROME_EXTENSION_USER_GESTURE_REQUIRED]\n    = 'Failed to install Chrome extension - installations can only be initiated'\n        + ' by a user gesture.';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED]\n    = 'User canceled Chrome\\'s screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR]\n    = 'Unknown error from Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NO_DATA_FROM_SOURCE]\n    = 'The track has stopped receiving data from it\\'s source';\n\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n","/* global $ */\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const self = this;\n    const mediaSSRCs = {};\n    let tmp;\n\n    for (let mediaindex = 0; mediaindex < self.media.length; mediaindex++) {\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc:');\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(self.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n        tmp.forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc-group:');\n        tmp.forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// remove iSAC and CN from SDP\nSDP.prototype.mangle = function() {\n    let i, j, lines, mline, newdesc, rtpmap;\n\n    for (i = 0; i < this.media.length; i++) {\n        lines = this.media[i].split('\\r\\n');\n        lines.pop(); // remove empty last element\n        mline = SDPUtil.parseMLine(lines.shift());\n        if (mline.media !== 'audio') {\n            continue; // eslint-disable-line no-continue\n        }\n        newdesc = '';\n        mline.fmt.length = 0;\n        for (j = 0; j < lines.length; j++) {\n            if (lines[j].substr(0, 9) === 'a=rtpmap:') {\n                rtpmap = SDPUtil.parseRTPMap(lines[j]);\n                if (rtpmap.name === 'CN' || rtpmap.name === 'ISAC') {\n                    continue; // eslint-disable-line no-continue\n                }\n                mline.fmt.push(rtpmap.id);\n            }\n            newdesc += `${lines[j]}\\r\\n`;\n        }\n        this.media[i] = `${SDPUtil.buildMLine(mline)}\\r\\n${newdesc}`;\n    }\n    this.raw = this.session + this.media.join('');\n};\n\n// remove lines matching prefix from session section\nSDP.prototype.removeSessionLines = function(prefix) {\n    const self = this;\n    const lines = SDPUtil.findLines(this.session, prefix);\n\n    lines.forEach(line => {\n        self.session = self.session.replace(`${line}\\r\\n`, '');\n    });\n    this.raw = this.session + this.media.join('');\n\n    return lines;\n};\n\n// remove lines matching prefix from a media section specified by mediaindex\n// TODO: non-numeric mediaindex could match mid\nSDP.prototype.removeMediaLines = function(mediaindex, prefix) {\n    const self = this;\n    const lines = SDPUtil.findLines(this.media[mediaindex], prefix);\n\n    lines.forEach(line => {\n        self.media[mediaindex]\n            = self.media[mediaindex].replace(`${line}\\r\\n`, '');\n    });\n    this.raw = this.session + this.media.join('');\n\n    return lines;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    let i, j, k, lines, mline, rtpmap, ssrc, tmp;\n\n    // new bundle plan\n\n    lines = SDPUtil.findLines(this.session, 'a=group:');\n    if (lines.length) {\n        for (i = 0; i < lines.length; i++) {\n            tmp = lines[i].split(' ');\n            const semantics = tmp.shift().substr(8);\n\n            elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n                semantics });\n            for (j = 0; j < tmp.length; j++) {\n                elem.c('content', { name: tmp[j] }).up();\n            }\n            elem.up();\n        }\n    }\n    for (i = 0; i < this.media.length; i++) {\n        mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (SDPUtil.findLine(this.media[i], 'a=rtpmap:').length) {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (j = 0; j < mline.fmt.length; j++) {\n                rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    tmp = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (k = 0; k < tmp.length; k++) {\n                        elem.c('parameter', tmp[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n            const crypto\n                = SDPUtil.findLines(this.media[i], 'a=crypto:', this.session);\n\n            if (crypto.length) {\n                elem.c('encryption', { required: 1 });\n                crypto.forEach(\n                    line => elem.c('crypto', SDPUtil.parseCrypto(line)).up());\n                elem.up(); // end of encryption\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    ssrcParameters.forEach(ssrcSdpLine => {\n                        // get everything after first space\n                        const idx = ssrcSdpLine.indexOf(' ');\n                        const kv = ssrcSdpLine.substr(idx + 1);\n\n                        elem.c('parameter');\n                        if (kv.indexOf(':') === -1) {\n                            elem.attrs({ name: kv });\n                        } else {\n                            const name = kv.split(':', 2)[0];\n\n                            elem.attrs({ name });\n\n                            let v = kv.split(':', 2)[1];\n\n                            v = SDPUtil.filterSpecialChars(v);\n                            elem.attrs({ value: v });\n                        }\n                        elem.up();\n                    });\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid');\n\n            if (ridLines.length) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            lines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n            if (lines.length) {\n                for (j = 0; j < lines.length; j++) {\n                    tmp = SDPUtil.parseExtmap(lines[j]);\n                    elem.c('rtp-hdrext', {\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                        uri: tmp.uri,\n                        id: tmp.value\n                    });\n\n                    // eslint-disable-next-line max-depth\n                    if (tmp.hasOwnProperty('direction')) {\n\n                        // eslint-disable-next-line max-depth\n                        switch (tmp.direction) {\n                        case 'sendonly':\n                            elem.attrs({ senders: 'responder' });\n                            break;\n                        case 'recvonly':\n                            elem.attrs({ senders: 'initiator' });\n                            break;\n                        case 'sendrecv':\n                            elem.attrs({ senders: 'both' });\n                            break;\n                        case 'inactive':\n                            elem.attrs({ senders: 'none' });\n                            break;\n                        }\n                    }\n\n                    // TODO: handle params\n                    elem.up();\n                }\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n        if (mline.port === '0') {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    let tmp;\n    const self = this;\n\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', self.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        tmp = SDPUtil.parseFingerprint(line);\n        tmp.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(tmp.fingerprint);\n        delete tmp.fingerprint;\n\n        // eslint-disable-next-line no-param-reassign\n        line\n            = SDPUtil.findLine(\n                self.media[mediaindex],\n                'a=setup:',\n                self.session);\n        if (line) {\n            tmp.setup = line.substr(8);\n        }\n        elem.attrs(tmp);\n        elem.up(); // end of fingerprint\n    });\n    tmp = SDPUtil.iceparams(this.media[mediaindex], this.session);\n    if (tmp) {\n        tmp.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(tmp);\n\n        // XEP-0176\n        const lines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        if (lines.length) { // add any a=candidate lines\n            lines.forEach(line => {\n                const candidate = SDPUtil.candidateToJingle(line);\n\n                if (self.failICE) {\n                    candidate.ip = '1.1.1.1';\n                }\n                const protocol\n                    = candidate && typeof candidate.protocol === 'string'\n                        ? candidate.protocol.toLowerCase()\n                        : '';\n\n                if ((self.removeTcpCandidates\n                        && (protocol === 'tcp' || protocol === 'ssltcp'))\n                    || (self.removeUdpCandidates && protocol === 'udp')) {\n                    return;\n                }\n                elem.c('candidate', candidate).up();\n            });\n        }\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const tmp = SDPUtil.parseRTCPFB(line);\n\n        if (tmp.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: tmp.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: tmp.type\n            });\n            if (tmp.params.length > 0) {\n                elem.attrs({ 'subtype': tmp.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let media = '';\n    let tmp\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (tmp.length) {\n        media += 'a=rtcp-fb:* trr-int ';\n        if (tmp.attr('value')) {\n            media += tmp.attr('value');\n        } else {\n            media += '0';\n        }\n        media += '\\r\\n';\n    }\n    tmp = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `a=rtcp-fb:${payloadtype} ${$(this).attr('type')}`;\n        if ($(this).attr('subtype')) {\n            media += ` ${$(this).attr('subtype')}`;\n        }\n        media += '\\r\\n';\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const self = this;\n\n    this.raw = 'v=0\\r\\n'\n        + 'o=- 1923518516 2 IN IP4 0.0.0.0\\r\\n'// FIXME\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                self.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each(function() {\n        // eslint-disable-next-line no-invalid-this\n        const m = self.jingle2media($(this));\n\n        self.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('description');\n    let media = '';\n    const self = this;\n    const sctp = content.find(\n        '>transport>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    let tmp = { media: desc.attr('media') };\n\n    tmp.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        tmp.port = '0';\n    }\n    if (content.find('>transport>fingerprint').length\n            || desc.find('encryption').length) {\n        tmp.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        tmp.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        media += `m=application ${tmp.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        media += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            media += ` ${streamCount}\\r\\n`;\n        } else {\n            media += '\\r\\n';\n        }\n    } else {\n        tmp.fmt\n            = desc\n                .find('payload-type')\n                .map(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    return this.getAttribute('id');\n                })\n                .get();\n        media += `${SDPUtil.buildMLine(tmp)}\\r\\n`;\n    }\n\n    media += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        media += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n    tmp\n        = content.find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    if (tmp.length) {\n        if (tmp.attr('ufrag')) {\n            media += `${SDPUtil.buildICEUfrag(tmp.attr('ufrag'))}\\r\\n`;\n        }\n        if (tmp.attr('pwd')) {\n            media += `${SDPUtil.buildICEPwd(tmp.attr('pwd'))}\\r\\n`;\n        }\n        tmp.find('>fingerprint').each(function() {\n            /* eslint-disable no-invalid-this */\n            // FIXME: check namespace at some point\n            media += `a=fingerprint:${this.getAttribute('hash')}`;\n            media += ` ${$(this).text()}`;\n            media += '\\r\\n';\n            if (this.getAttribute('setup')) {\n                media += `a=setup:${this.getAttribute('setup')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    switch (content.attr('senders')) {\n    case 'initiator':\n        media += 'a=sendonly\\r\\n';\n        break;\n    case 'responder':\n        media += 'a=recvonly\\r\\n';\n        break;\n    case 'none':\n        media += 'a=inactive\\r\\n';\n        break;\n    case 'both':\n        media += 'a=sendrecv\\r\\n';\n        break;\n    }\n    media += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('rtcp-mux').length) {\n        media += 'a=rtcp-mux\\r\\n';\n    }\n\n    if (desc.find('encryption').length) {\n        desc.find('encryption>crypto').each(function() {\n            /* eslint-disable no-invalid-this */\n            media += `a=crypto:${this.getAttribute('tag')}`;\n            media += ` ${this.getAttribute('crypto-suite')}`;\n            media += ` ${this.getAttribute('key-params')}`;\n            if (this.getAttribute('session-params')) {\n                media += ` ${this.getAttribute('session-params')}`;\n            }\n            media += '\\r\\n';\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    desc.find('payload-type').each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `${SDPUtil.buildRTPMap(this)}\\r\\n`;\n        if ($(this).find('>parameter').length) {\n            media += `a=fmtp:${this.getAttribute('id')} `;\n            media\n                += $(this)\n                    .find('parameter')\n                    .map(function() {\n                        const name = this.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + this.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            media += '\\r\\n';\n        }\n\n        // xep-0293\n        media += self.rtcpFbFromJingle($(this), this.getAttribute('id'));\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    // xep-0293\n    media += self.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    tmp\n        = desc.find(\n            '>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media\n            += `a=extmap:${this.getAttribute('id')} ${\n                this.getAttribute('uri')}\\r\\n`;\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    content\n        .find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]'\n                + '>candidate')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            let protocol = this.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((self.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (self.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (self.failICE) {\n                this.setAttribute('ip', '1.1.1.1');\n            }\n\n            media += SDPUtil.candidateFromJingle(this);\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    content\n        .find('description>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            const semantics = this.getAttribute('semantics');\n            const ssrcs\n                = $(this)\n                    .find('>source')\n                    .map(function() {\n                        return this.getAttribute('ssrc');\n                    })\n                    .get();\n\n            if (ssrcs.length) {\n                media += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    tmp\n        = content.find(\n            'description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        const ssrc = this.getAttribute('ssrc');\n\n        // eslint-disable-next-line newline-per-chained-call\n        $(this).find('>parameter').each(function() {\n            const name = this.getAttribute('name');\n            let value = this.getAttribute('value');\n\n            value = SDPUtil.filterSpecialChars(value);\n            media += `a=ssrc:${ssrc} ${name}`;\n            if (value && value.length) {\n                media += `:${value}`;\n            }\n            media += '\\r\\n';\n        });\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const EDGE = 'edge';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    EDGE,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Microsoft Edge': EDGE,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n * \n * NOTE: Here we cannot check solely for \"Chrome\" in the UA string and the\n * \"window.chrome\" property, because Edge has both, so we add an explicit\n * check for NOT Edge.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n\n    if (Boolean(window.chrome)\n            && !userAgent.match(/Edge/) && userAgent.match(/Chrome/)) {\n        const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n        return {\n            name: CHROME,\n            version\n        };\n    }\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n *\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect() {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const { name, version } = bowser;\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect();\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Microsoft Edge.\n     * @returns {boolean}\n     */\n    isEdge() {\n        return this._name === EDGE;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     * {@see https://github.com/lancedikson/bowser}\n     */\n    static compareVersions = bowser.compareVersions;\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {number|undefined} - Returns 0 if the version is equal to the\n     * current one, 1 if the version is greater than the current one, -1 if the\n     * version is lower than the current one and undefined if the current\n     * browser version is unknown.\n     */\n    compareVersion(version) {\n        if (this._version) {\n            return bowser.compareVersions([ String(version), this._version ]);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this.compareVersion(version) === -1;\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this.compareVersion(version) === 1;\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionEqualTo(version) {\n        return this.compareVersion(version) === 0;\n    }\n}\n","export * from './browser-capabilities';\nexport * from './browser-detection';\nexport * from './avatar';\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that jingle fatal error happened.\n */\nexport const JINGLE_FATAL_ERROR = 'conference.jingleFatalError';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that the conference setup failed.\n */\nexport const SETUP_FAILED = 'conference.setup_failed';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            const localStorage = getLocalStorage();\n\n            if (localStorage) {\n                _callStatsUserName = localStorage.getItem('callStatsUserName');\n            }\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                if (localStorage) {\n                    localStorage.setItem(\n                        'callStatsUserName',\n                        _callStatsUserName);\n                }\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const localStorage = getLocalStorage();\n\n            if (localStorage) {\n                _machineId = localStorage.getItem('jitsiMeetId');\n            }\n            if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                if (localStorage) {\n                    localStorage.setItem('jitsiMeetId', _machineId);\n                }\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        const localStorage = getLocalStorage();\n\n        return localStorage ? localStorage.getItem('sessionId') : undefined;\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        const localStorage = getLocalStorage();\n\n        if (localStorage) {\n            if (sessionId) {\n                localStorage.setItem('sessionId', sessionId);\n            } else {\n                localStorage.removeItem('sessionId');\n            }\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n * Gets the localStorage of the browser. (Technically, gets the localStorage of\n * the global object because there may be no browser but React Native for\n * example).\n * @returns {Storage} the local Storage object (if any)\n */\nfunction getLocalStorage() {\n    let storage;\n\n    try {\n        // eslint-disable-next-line no-invalid-this\n        storage = (window || this).localStorage;\n    } catch (error) {\n        logger.error(error);\n    }\n\n    return storage;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","const Resolutions = {\n    '1080': {\n        width: 1920,\n        height: 1080,\n        order: 7\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080,\n        order: 7\n    },\n    '720': {\n        width: 1280,\n        height: 720,\n        order: 6\n    },\n    'hd': {\n        width: 1280,\n        height: 720,\n        order: 6\n    },\n    '960': {\n        width: 960,\n        height: 720,\n        order: 5\n    },\n\n    // 16:9 resolution first.\n    '360': {\n        width: 640,\n        height: 360,\n        order: 4\n    },\n    '640': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n    'vga': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n\n    // 16:9 resolution first.\n    '180': {\n        width: 320,\n        height: 180,\n        order: 2\n    },\n    '320': {\n        width: 320,\n        height: 240,\n        order: 1\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection the the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            let configParams;\n\n            if (options.applicationName) {\n                configParams = {\n                    applicationVersion:\n                        `${options.applicationName} (${\n                            browser.getName()})`\n                };\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        if (CallStats.backend) {\n            CallStats.backend.sendUserFeedback(\n                conferenceID, {\n                    userID: CallStats.userID,\n                    overall,\n                    comment\n                });\n        } else {\n            logger.error('Failed to submit feedback to CallStats - no backend');\n        }\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport RandomUtil from '../util/RandomUtil';\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport browser from '../browser';\nimport initEmuc from './strophe.emuc';\nimport initJingle from './strophe.jingle';\nimport initStropheUtil from './strophe.util';\nimport initPing from './strophe.ping';\nimport initRayo from './strophe.rayo';\nimport initStropheLogger from './strophe.logger';\nimport Listenable from '../util/Listenable';\nimport Caps from './Caps';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param token\n * @param bosh\n */\nfunction createConnection(token, bosh = '/http-bind') {\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        bosh += `${bosh.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    const conn = new Strophe.Connection(bosh);\n\n    // The default maxRetries is 5, which is too long.\n    conn.maxRetries = 3;\n\n    return conn;\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:stun1.l.google.com:19302' },\n    { urls: 'stun:stun2.l.google.com:19302' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {Array<Object>} options.p2pStunServers see\n     * {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n        this._initStrophePlugins(this);\n\n        this.connection = createConnection(token, options.bosh);\n\n        this.caps = new Caps(this.connection, this.options.clientNode);\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on('beforeunload unload', ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n\n        if (!this.options.disableRtx && browser.supportsRtx()) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChrome() && this.options.enableLipSync !== false) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n    }\n\n    /**\n     * Returns {@code true} if the PING functionality is supported by the server\n     * or {@code false} otherwise.\n     * @returns {boolean}\n     */\n    isPingSupported() {\n        return this._pingSupported !== false;\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        if (status === Strophe.Status.CONNECTED\n            || status === Strophe.Status.ATTACHED) {\n            if (this.options.useStunTurn\n                || (this.options.p2p && this.options.p2p.useStunTurn)) {\n                this.connection.jingle.getStunAndTurnCredentials();\n            }\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // Schedule ping ?\n            const pingJid = this.connection.domain;\n\n            this.caps.getFeaturesAndIdentities(pingJid)\n                .then(({ features, identities }) => {\n                    if (features.has(Strophe.NS.PING)) {\n                        this._pingSupported = true;\n                        this.connection.ping.startInterval(pingJid);\n                    } else {\n                        logger.warn(`Ping NOT supported by ${pingJid}`);\n                    }\n\n                    // check for speakerstats\n                    identities.forEach(identity => {\n                        if (identity.type === 'speakerstats') {\n                            this.speakerStatsComponentAddress = identity.name;\n\n                            this.connection.addHandler(\n                                this._onPrivateMessage.bind(this), null,\n                                'message', null, null);\n                        }\n                    });\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = this.disconnectInProgress;\n            const errMsg = msg || this.lastErrorMsg;\n\n            this.disconnectInProgress = false;\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error');\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error');\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg,\n                credentials);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log(`(TIME) Strophe Attaching\\t:${now}`);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     *\n     * @param roomName\n     * @param options\n     */\n    createRoom(roomName, options) {\n        // By default MUC nickname is the resource part of the JID\n        let mucNickname = Strophe.getNodeFromJid(this.connection.jid);\n        let roomjid = `${roomName}@${this.options.hosts.muc}/`;\n        const cfgNickname\n            = options.useNicks && options.nick ? options.nick : null;\n\n        if (cfgNickname) {\n            // Use nick if it's defined\n            mucNickname = options.nick;\n        } else if (!this.authenticatedUser) {\n            // node of the anonymous JID is very long - here we trim it a bit\n            mucNickname = mucNickname.substr(0, 8);\n        }\n\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server. Remember to check {@link isPingSupported} before using\n     * this method.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            if (this.isPingSupported()) {\n                this.connection.ping\n                    .ping(this.connection.domain, resolve, reject, timeout);\n            } else {\n                reject('PING operation is not supported by the server');\n            }\n        });\n    }\n\n    /**\n     *\n     * @param jid\n     * @param mute\n     */\n    setMute(jid, mute) {\n        this.connection.moderate.setMute(jid, mute);\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    eject(jid) {\n        this.connection.moderate.eject(jid);\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress || !this.connection) {\n            this.eventEmitter.emit(JitsiConnectionEvents.WRONG_STATE);\n\n            return Promise.reject(new Error('Wrong connection state!'));\n        }\n\n        this.disconnectInProgress = true;\n\n        return new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n\n            // XXX Strophe is asynchronously sending by default. Unfortunately, that\n            // means that there may not be enough time to send an unavailable\n            // presence or disconnect at all. Switching Strophe to synchronous\n            // sending is not much of an option because it may lead to a noticeable\n            // delay in navigating away from the current location. As a compromise,\n            // we will try to increase the chances of sending an unavailable\n            // presence and/or disconecting within the short time span that we have\n            // upon unloading by invoking flush() on the connection. We flush() once\n            // before disconnect() in order to attemtp to have its unavailable\n            // presence at the top of the send queue. We flush() once more after\n            // disconnect() in order to attempt to have its unavailable presence\n            // sent as soon as possible.\n            this.connection.flush();\n\n            if (ev !== null && typeof ev !== 'undefined') {\n                const evType = ev.type;\n\n                if (evType === 'beforeunload' || evType === 'unload') {\n                    // XXX Whatever we said above, synchronous sending is the best\n                    // (known) way to properly disconnect from the XMPP server.\n                    // Consequently, it may be fine to have the source code and\n                    // comment it in or out depending on whether we want to run with\n                    // it for some time.\n                    this.connection.options.sync = true;\n                }\n            }\n\n            this.connection.disconnect();\n\n            if (this.connection.options.sync !== true) {\n                this.connection.flush();\n            }\n        });\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        initEmuc(this);\n        initJingle(this, this.eventEmitter, iceConfig);\n        initStropheUtil();\n        initPing(this);\n        initRayo();\n        initStropheLogger();\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection._proto\n            && this.connection._proto.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection._proto.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from speaker stats component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!this.speakerStatsComponentAddress\n            || from !== this.speakerStatsComponentAddress) {\n            return;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\n            && parsedJson.users) {\n            this.eventEmitter.emit(\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        }\n\n        return true;\n    }\n}\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","/* global chrome, $, alert */\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\n/**\n * Indicates whether the Chrome desktop sharing extension is installed.\n * @type {boolean}\n */\nlet chromeExtInstalled = false;\n\n/**\n * Indicates whether an update of the Chrome desktop sharing extension is\n * required.\n * @type {boolean}\n */\nlet chromeExtUpdateRequired = false;\n\nlet gumFunction = null;\n\n/**\n * The error message returned by chrome when the extension is installed.\n */\nconst CHROME_NO_EXTENSION_ERROR_MSG // eslint-disable-line no-unused-vars\n    = 'Could not establish connection. Receiving end does not exist.';\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n    intChromeExtPromise: null,\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     * @param {boolean} [options.desktopSharingChromeDisabled]\n     * @param {boolean} [options.desktopSharingChromeExtId]\n     * @param {boolean} [options.desktopSharingFirefoxDisabled]\n     * @param {Function} gum GUM method\n     */\n    init(options = {\n        desktopSharingChromeDisabled: false,\n        desktopSharingChromeExtId: null,\n        desktopSharingFirefoxDisabled: false\n    }, gum) {\n        this.options = options;\n        gumFunction = gum;\n\n        this.obtainStream = this._createObtainStreamMethod(options);\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @param {object} options passed from {@link init} - check description\n     * there\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod(options) {\n        if (browser.isNWJS()) {\n            return (_, onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isChrome() || browser.isOpera()) {\n            if (browser.supportsGetDisplayMedia()\n                    && !options.desktopSharingChromeDisabled) {\n\n                return this.obtainScreenFromGetDisplayMedia;\n            } else if (options.desktopSharingChromeDisabled\n                || !options.desktopSharingChromeExtId) {\n\n                return null;\n            }\n\n            logger.info('Using Chrome extension for desktop sharing');\n            this.intChromeExtPromise\n                = initChromeExtension(options).then(() => {\n                    this.intChromeExtPromise = null;\n                });\n\n            return this.obtainScreenFromExtension;\n        } else if (browser.isFirefox()) {\n            if (options.desktopSharingFirefoxDisabled) {\n                return null;\n            } else if (browser.supportsGetDisplayMedia()) {\n                // Firefox 66 support getDisplayMedia\n                return this.obtainScreenFromGetDisplayMedia;\n            }\n\n            // Legacy Firefox\n            return this.obtainScreenOnFirefox;\n        } else if (browser.isEdge() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n\n        logger.log(\n            'Screen sharing not supported by the current browser: ',\n            browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Firefox.\n     * @param callback\n     * @param errorCallback\n     */\n    obtainScreenOnFirefox(options, callback, errorCallback) {\n        obtainWebRTCScreen(options.gumOptions, callback, errorCallback);\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param {Object} [options] - Screen sharing options.\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\n     * sources that have to be displayed in the desktop picker window ('screen',\n     * 'window', etc.).\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingSources, gumOptions } = options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources\n                        || this.options.desktopSharingChromeSources\n                },\n                (streamId, streamType) =>\n                    onGetStreamResponse(\n                        {\n                            response: {\n                                streamId,\n                                streamType\n                            },\n                            gumOptions\n                        },\n                        onSuccess,\n                        onFailure\n                    ),\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Asks Chrome extension to call chooseDesktopMedia and gets chrome\n     * 'desktop' stream for returned stream token.\n     */\n    obtainScreenFromExtension(options, streamCallback, failCallback) {\n        if (this.intChromeExtPromise !== null) {\n            this.intChromeExtPromise.then(() => {\n                this.obtainScreenFromExtension(\n                    options, streamCallback, failCallback);\n            });\n\n            return;\n        }\n\n        const {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources\n        } = this.options;\n\n        const {\n            gumOptions\n        } = options;\n\n        const doGetStreamFromExtensionOptions = {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources:\n                options.desktopSharingSources || desktopSharingChromeSources,\n            gumOptions\n        };\n\n        if (chromeExtInstalled) {\n            doGetStreamFromExtension(\n                doGetStreamFromExtensionOptions,\n                streamCallback,\n                failCallback);\n        } else {\n            if (chromeExtUpdateRequired) {\n                /* eslint-disable no-alert */\n                alert(\n                    'Jitsi Desktop Streamer requires update. '\n                    + 'Changes will take effect after next Chrome restart.');\n\n                /* eslint-enable no-alert */\n            }\n\n            this.handleExternalInstall(options, streamCallback,\n                failCallback);\n        }\n    },\n\n    /* eslint-disable max-params */\n\n    handleExternalInstall(options, streamCallback, failCallback, e) {\n        const webStoreInstallUrl = getWebStoreInstallUrl(this.options);\n\n        options.listener('waitingForExtension', webStoreInstallUrl);\n        this.checkForChromeExtensionOnInterval(options, streamCallback,\n            failCallback, e);\n    },\n\n    /* eslint-enable max-params */\n\n    checkForChromeExtensionOnInterval(options, streamCallback, failCallback) {\n        if (options.checkAgain() === false) {\n            failCallback(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR));\n\n            return;\n        }\n        waitForExtensionAfterInstall(this.options, options.interval, 1)\n            .then(() => {\n                chromeExtInstalled = true;\n                options.listener('extensionFound');\n                this.obtainScreenFromExtension(options,\n                    streamCallback, failCallback);\n            })\n            .catch(() => {\n                this.checkForChromeExtensionOnInterval(options,\n                    streamCallback, failCallback);\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        getDisplayMedia({ video: true })\n            .then(stream => {\n                let applyConstraintsPromise;\n\n                if (stream\n                    && stream.getTracks()\n                    && stream.getTracks().length > 0) {\n                    applyConstraintsPromise = stream.getTracks()[0]\n                        .applyConstraints(options.trackOptions);\n                } else {\n                    applyConstraintsPromise = Promise.resolve();\n                }\n\n                applyConstraintsPromise.then(() =>\n                    callback({\n                        stream,\n                        sourceId: stream.id\n                    }));\n            })\n            .catch(() =>\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .CHROME_EXTENSION_USER_CANCELED)));\n    }\n};\n\n/**\n * Obtains a desktop stream using getUserMedia.\n * For this to work on Chrome, the\n * 'chrome://flags/#enable-usermedia-screen-capture' flag must be enabled.\n *\n * On firefox, the document's domain must be white-listed in the\n * 'media.getusermedia.screensharing.allowed_domains' preference in\n * 'about:config'.\n */\nfunction obtainWebRTCScreen(options, streamCallback, failCallback) {\n    gumFunction([ 'screen' ], options)\n        .then(stream => streamCallback({ stream }), failCallback);\n}\n\n/**\n * Constructs inline install URL for Chrome desktop streaming extension.\n * The 'chromeExtensionId' must be defined in options parameter.\n * @param options supports \"desktopSharingChromeExtId\"\n * @returns {string}\n */\nfunction getWebStoreInstallUrl(options) {\n    return (\n        `https://chrome.google.com/webstore/detail/${\n            options.desktopSharingChromeExtId}`);\n}\n\n/**\n * Checks whether an update of the Chrome extension is required.\n * @param minVersion minimal required version\n * @param extVersion current extension version\n * @returns {boolean}\n */\nfunction isUpdateRequired(minVersion, extVersion) {\n    try {\n        const s1 = minVersion.split('.');\n        const s2 = extVersion.split('.');\n\n        const len = Math.max(s1.length, s2.length);\n\n        for (let i = 0; i < len; i++) {\n            let n1 = 0,\n                n2 = 0;\n\n            if (i < s1.length) {\n                n1 = parseInt(s1[i], 10);\n            }\n            if (i < s2.length) {\n                n2 = parseInt(s2[i], 10);\n            }\n\n            if (isNaN(n1) || isNaN(n2)) {\n                return true;\n            } else if (n1 !== n2) {\n                return n1 > n2;\n            }\n        }\n\n        // will happen if both versions have identical numbers in\n        // their components (even if one of them is longer, has more components)\n        return false;\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error('Failed to parse extension version', e);\n\n        return true;\n    }\n}\n\n/**\n *\n * @param callback\n * @param options\n */\nfunction checkChromeExtInstalled(callback, options) {\n    if (typeof chrome === 'undefined' || !chrome || !chrome.runtime) {\n        // No API, so no extension for sure\n        callback(false, false);\n\n        return;\n    }\n    chrome.runtime.sendMessage(\n        options.desktopSharingChromeExtId,\n        { getVersion: true },\n        response => {\n            if (!response || !response.version) {\n                // Communication failure - assume that no endpoint exists\n                logger.warn(\n                    'Extension not installed?: ', chrome.runtime.lastError);\n                callback(false, false);\n\n                return;\n            }\n\n            // Check installed extension version\n            const extVersion = response.version;\n\n            logger.log(`Extension version is: ${extVersion}`);\n            const updateRequired\n                = isUpdateRequired(\n                    options.desktopSharingChromeMinExtVersion,\n                    extVersion);\n\n            callback(!updateRequired, updateRequired);\n        }\n    );\n}\n\n/**\n *\n * @param options\n * @param streamCallback\n * @param failCallback\n */\nfunction doGetStreamFromExtension(options, streamCallback, failCallback) {\n    const {\n        desktopSharingChromeSources,\n        desktopSharingChromeExtId,\n        gumOptions\n    } = options;\n\n    // Sends 'getStream' msg to the extension.\n    // Extension id must be defined in the config.\n    chrome.runtime.sendMessage(\n        desktopSharingChromeExtId,\n        {\n            getStream: true,\n            sources: desktopSharingChromeSources\n        },\n        response => {\n            if (!response) {\n                // possibly re-wraping error message to make code consistent\n                const lastError = chrome.runtime.lastError;\n\n                failCallback(lastError instanceof Error\n                    ? lastError\n                    : new JitsiTrackError(\n                        JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n                        lastError));\n\n                return;\n            }\n            logger.log('Response from extension: ', response);\n            onGetStreamResponse(\n                {\n                    response,\n                    gumOptions\n                },\n                streamCallback,\n                failCallback\n            );\n        }\n    );\n}\n\n/**\n * Initializes <link rel=chrome-webstore-item /> with extension id set in\n * config.js to support inline installs. Host site must be selected as main\n * website of published extension.\n * @param options supports \"desktopSharingChromeExtId\"\n */\nfunction initInlineInstalls(options) {\n    if ($('link[rel=chrome-webstore-item]').length === 0) {\n        $('head').append('<link rel=\"chrome-webstore-item\">');\n    }\n    $('link[rel=chrome-webstore-item]').attr('href',\n        getWebStoreInstallUrl(options));\n}\n\n/**\n *\n * @param options\n *\n * @return {Promise} - a Promise resolved once the initialization process is\n * finished.\n */\nfunction initChromeExtension(options) {\n    // Initialize Chrome extension inline installs\n    initInlineInstalls(options);\n\n    return new Promise(resolve => {\n        // Check if extension is installed\n        checkChromeExtInstalled((installed, updateRequired) => {\n            chromeExtInstalled = installed;\n            chromeExtUpdateRequired = updateRequired;\n            logger.info(\n                `Chrome extension installed: ${\n                    chromeExtInstalled} updateRequired: ${\n                    chromeExtUpdateRequired}`);\n            resolve();\n        }, options);\n    });\n}\n\n/**\n * Checks \"retries\" times on every \"waitInterval\"ms whether the ext is alive.\n * @param {Object} options the options passed to ScreanObtainer.obtainStream\n * @param {int} waitInterval the number of ms between retries\n * @param {int} retries the number of retries\n * @returns {Promise} returns promise that will be resolved when the extension\n * is alive and rejected if the extension is not alive even after \"retries\"\n * checks\n */\nfunction waitForExtensionAfterInstall(options, waitInterval, retries) {\n    if (retries === 0) {\n        return Promise.reject();\n    }\n\n    return new Promise((resolve, reject) => {\n        let currentRetries = retries;\n        const interval = window.setInterval(() => {\n            checkChromeExtInstalled(installed => {\n                if (installed) {\n                    window.clearInterval(interval);\n                    resolve();\n                } else {\n                    currentRetries--;\n                    if (currentRetries === 0) {\n                        reject();\n                        window.clearInterval(interval);\n                    }\n                }\n            }, options);\n        }, waitInterval);\n    });\n}\n\n/**\n * Handles response from external application / extension and calls GUM to\n * receive the desktop streams or reports error.\n * @param {object} options\n * @param {object} options.response\n * @param {string} options.response.streamId - the streamId for the desktop\n * stream.\n * @param {string} options.response.error - error to be reported.\n * @param {object} options.gumOptions - options passed to GUM.\n * @param {Function} onSuccess - callback for success.\n * @param {Function} onFailure - callback for failure.\n * @param {object} gumOptions - options passed to GUM.\n */\nfunction onGetStreamResponse(\n        options = {\n            response: {},\n            gumOptions: {}\n        },\n        onSuccess,\n        onFailure) {\n    const { streamId, streamType, error } = options.response || {};\n\n    if (streamId) {\n        const gumOptions = {\n            desktopStream: streamId,\n            ...options.gumOptions\n        };\n\n        gumFunction([ 'desktop' ], gumOptions)\n            .then(stream => onSuccess({\n                stream,\n                sourceId: streamId,\n                sourceType: streamType\n            }), onFailure);\n    } else {\n        // As noted in Chrome Desktop Capture API:\n        // If user didn't select any source (i.e. canceled the prompt)\n        // then the callback is called with an empty streamId.\n        if (streamId === '') {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED));\n\n            return;\n        }\n\n        onFailure(new JitsiTrackError(\n            JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n            error));\n    }\n}\n\nexport default ScreenObtainer;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar logDisabled_ = true;\nvar deprecationWarnings_ = true;\n\n// Utility methods.\nvar utils = {\n  disableLog: function(bool) {\n    if (typeof bool !== 'boolean') {\n      return new Error('Argument type: ' + typeof bool +\n          '. Please use a boolean.');\n    }\n    logDisabled_ = bool;\n    return (bool) ? 'adapter.js logging disabled' :\n        'adapter.js logging enabled';\n  },\n\n  /**\n   * Disable or enable deprecation warnings\n   * @param {!boolean} bool set to true to disable warnings.\n   */\n  disableWarnings: function(bool) {\n    if (typeof bool !== 'boolean') {\n      return new Error('Argument type: ' + typeof bool +\n          '. Please use a boolean.');\n    }\n    deprecationWarnings_ = !bool;\n    return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n  },\n\n  log: function() {\n    if (typeof window === 'object') {\n      if (logDisabled_) {\n        return;\n      }\n      if (typeof console !== 'undefined' && typeof console.log === 'function') {\n        console.log.apply(console, arguments);\n      }\n    }\n  },\n\n  /**\n   * Shows a deprecation warning suggesting the modern and spec-compatible API.\n   */\n  deprecated: function(oldMethod, newMethod) {\n    if (!deprecationWarnings_) {\n      return;\n    }\n    console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n        ' instead.');\n  },\n\n  /**\n   * Extract browser version out of the provided user agent string.\n   *\n   * @param {!string} uastring userAgent string.\n   * @param {!string} expr Regular expression used as match criteria.\n   * @param {!number} pos position in the version string to be returned.\n   * @return {!number} browser version.\n   */\n  extractVersion: function(uastring, expr, pos) {\n    var match = uastring.match(expr);\n    return match && match.length >= pos && parseInt(match[pos], 10);\n  },\n\n  /**\n   * Browser detector.\n   *\n   * @return {object} result containing browser and version\n   *     properties.\n   */\n  detectBrowser: function(window) {\n    var navigator = window && window.navigator;\n\n    // Returned result object.\n    var result = {};\n    result.browser = null;\n    result.version = null;\n\n    // Fail early if it's not a browser\n    if (typeof window === 'undefined' || !window.navigator) {\n      result.browser = 'Not a browser.';\n      return result;\n    }\n\n    // Firefox.\n    if (navigator.mozGetUserMedia) {\n      result.browser = 'firefox';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Firefox\\/(\\d+)\\./, 1);\n    } else if (navigator.webkitGetUserMedia) {\n      // Chrome, Chromium, Webview, Opera, all use the chrome shim for now\n      if (window.webkitRTCPeerConnection) {\n        result.browser = 'chrome';\n        result.version = this.extractVersion(navigator.userAgent,\n          /Chrom(e|ium)\\/(\\d+)\\./, 2);\n      } else { // Safari (in an unpublished version) or unknown webkit-based.\n        if (navigator.userAgent.match(/Version\\/(\\d+).(\\d+)/)) {\n          result.browser = 'safari';\n          result.version = this.extractVersion(navigator.userAgent,\n            /AppleWebKit\\/(\\d+)\\./, 1);\n        } else { // unknown webkit-based browser.\n          result.browser = 'Unsupported webkit-based browser ' +\n              'with GUM support but no WebRTC support.';\n          return result;\n        }\n      }\n    } else if (navigator.mediaDevices &&\n        navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n      result.browser = 'edge';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Edge\\/(\\d+).(\\d+)$/, 2);\n    } else if (navigator.mediaDevices &&\n        navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) {\n        // Safari, with webkitGetUserMedia removed.\n      result.browser = 'safari';\n      result.version = this.extractVersion(navigator.userAgent,\n          /AppleWebKit\\/(\\d+)\\./, 1);\n    } else { // Default fallthrough: not supported.\n      result.browser = 'Not a supported browser.';\n      return result;\n    }\n\n    return result;\n  },\n\n};\n\n// Export.\nmodule.exports = {\n  log: utils.log,\n  deprecated: utils.deprecated,\n  disableLog: utils.disableLog,\n  disableWarnings: utils.disableWarnings,\n  extractVersion: utils.extractVersion,\n  shimCreateObjectURL: utils.shimCreateObjectURL,\n  detectBrowser: utils.detectBrowser.bind(utils)\n};\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 2000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 5000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId the endpoint ID(MUC nickname/resource JID)\n     * @param {boolean} isActive true if the connection is OK or false otherwise\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId the participant for which the \"connection\n     * interrupted\" timeout was scheduled\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack the {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack the remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id the participant's id (MUC nickname or Colibri endpoint\n     * ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print the warning for\n            // debugging purpose\n            logger.warn(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.rtc.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            logger.debug('Assuming connection active by JVB - no notification');\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track the video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track the video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track the remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/* global __filename, $ */\n\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport async from 'async';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\nimport { integerHash } from '../util/StringUtils';\n\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport SDP from './SDP';\nimport SDPDiffer from './SDPDiffer';\nimport SDPUtil from './SDPUtil';\nimport SignalingLayerImpl from './SignalingLayerImpl';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} testing.enableFirefoxSimulcast - Described in the\n * config.js[1].\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which\n     * identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {Strophe.Connection} connection Strophe XMPP connection instance\n     * used to send packets.\n     * @param mediaConstraints the media constraints object passed to\n     * createOffer/Answer, as defined by the WebRTC standard\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\n     * standard.\n     * @param {boolean} isP2P indicates whether this instance is\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\n     * if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        this.modificationQueue\n            = async.queue(this._processQueueTasks.bind(this), 1);\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance has been ended and eventually\n     * logs a message which mentions that given <tt>actionName</tt> was\n     * cancelled.\n     * @param {string} actionName\n     * @return {boolean} <tt>true</tt> if this {@link JingleSessionPC} has\n     * entered {@link JingleSessionState.ENDED} or <tt>false</tt> otherwise.\n     * @private\n     */\n    _assertNotEnded(actionName) {\n        if (this.state === JingleSessionState.ENDED) {\n            logger.log(\n                `The session has ended - cancelling action: ${actionName}`);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\n\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264);\n            pcOptions.preferH264 = options.preferH264;\n            pcOptions.enableFirefoxSimulcast\n                = options.testing && options.testing.enableFirefoxSimulcast;\n            pcOptions.enableLayerSuspension = options.enableLayerSuspension;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.iceConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (!this.peerconnection) {\n                return;\n            }\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (\n                (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed')\n                && !this.closed) {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            if (!this.peerconnection\n                    || !this._assertNotEnded('oniceconnectionstatechange')) {\n                return;\n            }\n            const now = window.performance.now();\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\n                    + ` P2P? ${this.isP2P}:\\t`,\n                now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been\n                // restored.\n                if (this.peerconnection.signalingState === 'stable') {\n                    if (this.isReconnect) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                if (!this.wasConnected && this.wasstable) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                if (this.closed) {\n                    break;\n                }\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n        this.peerconnection.onnegotiationneeded = () => {\n            this.room.eventEmitter.emit(XMPPEvents.PEERCONNECTION_READY, this);\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n\n        if (!this.isP2P && options.enableLayerSuspension) {\n            // If this is the bridge session, we'll listen for\n            // IS_SELECTED_CHANGED events and notify the peer connection\n            this.rtc.addListener(RTCEvents.IS_SELECTED_CHANGED,\n                isSelected => {\n                    this.peerconnection.setIsSelected(isSelected);\n                    logger.info('Doing local O/A due to '\n                        + 'IS_SELECTED_CHANGED event');\n                    this.modificationQueue.push(finishedCallback => {\n                        this._renegotiate()\n                            .then(finishedCallback)\n                            .catch(finishedCallback);\n                    });\n                }\n            );\n        }\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && !this.lasticecandidate) {\n            const ice\n                = SDPUtil.iceparams(\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    // start 20ms callout\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, 20);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log('sendIceCandidate: last candidate.');\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log('sendIceCandidates', candidates);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ(\n            sessionInfo,\n            null,\n            this.newJingleErrorHandler(sessionInfo),\n            /*\n             * This message will be often sent when there are connectivity\n             * issues, so make it slightly longer than Prosody's default BOSH\n             * inactivity timeout of 60 seconds.\n             */ 65);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn('Ignored add ICE candidate when in closed state');\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug('addIceCandidate ok!'),\n                        err => logger.error('addIceCandidate failed!', err));\n            }\n\n            finishedCallback();\n        };\n\n        logger.debug(\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(\n                                    `Invalid SSRC ${ssrc} value received`\n                                        + ` for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    Strophe.getResourceFromJid(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(\n                'Unable to generate recvonly SSRC - no peerconnection');\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            for (const localTrack of localTracks) {\n                this.peerconnection.addTrack(localTrack);\n            }\n            this.peerconnection.createOffer(this.mediaConstraints)\n                .then(offerSdp => {\n                    this.peerconnection.setLocalDescription(offerSdp)\n                        .then(() => {\n                            // NOTE that the offer is obtained from\n                            // the localDescription getter as it needs to go\n                            // though the transformation chain.\n                            this.sendSessionInitiate(\n                                this.peerconnection.localDescription.sdp);\n                            finishedCallback();\n                        }, error => {\n                            logger.error(\n                                'Failed to set local SDP', error, offerSdp);\n                            finishedCallback(error);\n                        });\n                }, error => {\n                    logger.error(\n                        'Failed to create an offer',\n                        error,\n                        this.mediaConstraints);\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('invite error', error);\n                } else {\n                    logger.debug('invite executed - OK');\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.info('Session-initiate: ', init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info('Got RESULT for \"session-initiate\"');\n            },\n            error => {\n                logger.error('\"session-initiate\" error', error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info('setAnswer - succeeded');\n            },\n            error => {\n                logger.error('setAnswer failed: ', error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks) {\n        const workFunction = finishedCallback => {\n\n            if (localTracks) {\n                for (const track of localTracks) {\n                    this.peerconnection.addTrack(track);\n                }\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        if (this.isP2P && !this._localVideoActive) {\n                            this.sendContentModify(this._localVideoActive);\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n\n                    finishedCallback();\n                }, error => {\n                    logger.error(\n                        `Error renegotiating after setting new remote ${\n                            this.isInitiator ? 'answer: ' : 'offer: '}${error}`,\n                        newRemoteSdp);\n\n                    this._onJingleFatalError(error);\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                error ? failure(error) : success();\n            });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        let accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\n            null);\n\n        // Calling tree() to print something useful\n        accept = accept.tree();\n        logger.info('Sending session-accept', accept);\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media.\n     * @param {boolean} videoTransferActive <tt>false</tt> to let the other peer\n     * know that we're not sending nor interested in receiving video contents.\n     * When set to <tt>true</tt> remote peer will be asked to resume video\n     * transfer.\n     * @private\n     */\n    sendContentModify(videoTransferActive) {\n        const newSendersValue = videoTransferActive ? 'both' : 'none';\n\n        const sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders: newSendersValue\n                });\n\n        logger.info(\n            `Sending content-modify, video senders: ${newSendersValue}`);\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        let transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        // Calling tree() to print something useful to the logger\n        transportAccept = transportAccept.tree();\n        logger.info('Sending transport-accept: ', transportAccept);\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        let transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        transportReject = transportReject.tree();\n        logger.info('Sending \\'transport-reject', transportReject);\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            let sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success');\n\n            if (options && options.reasonDescription) {\n                sessionTerminate.up()\n                    .c('text')\n                    .t(options.reasonDescription);\n            }\n\n            // Calling tree() to print something useful\n            sessionTerminate = sessionTerminate.tree();\n            logger.info('Sending session-terminate', sessionTerminate);\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`Skipped sending session-terminate for ${this}`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\n\n        this.close();\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n                    logger.warn(\n                        `Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`Processing ${logPrefix}`);\n            logger.log(\n                'ICE connection state: ',\n                this.peerconnection.iceConnectionState);\n\n            const oldLocalSdp\n                = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    const newLocalSdp\n                        = new SDP(this.peerconnection.localDescription.sdp);\n\n                    logger.log(\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    finishedCallback();\n                }, error => {\n                    logger.error(`${logPrefix} failed:`, error);\n                    finishedCallback(error);\n                });\n        };\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass a handler to the .push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     */\n    _processQueueTasks(task, finishedCallback) {\n        task(finishedCallback);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            lines.forEach(line => {\n                remoteSdp.media[idx]\n                    = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n            });\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            return Promise.reject('Attempted to renegotiate in state closed');\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            return Promise.reject(\n                'Can not renegotiate without remote description,'\n                    + `- current state: ${this.state}`);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: setting remote description');\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug('Renegotiate: creating answer');\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug('Renegotiate: setting local description');\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        if (this.peerconnection.signalingState === 'have-local-offer') {\n            // Skip createOffer and setLocalDescription or FF will fail\n            logger.debug(\n                'Renegotiate: setting remote description');\n\n            /* eslint-disable arrow-body-style */\n\n            return this.peerconnection.setRemoteDescription(remoteDescription)\n                .then(() => {\n                    // In case when the answer is being set for the first time,\n                    // full sRD/sLD cycle is required to have the local\n                    // description updated and SSRCs synchronized correctly.\n                    // Otherwise SSRCs for streams added after invite, but\n                    // before the answer was accepted will not be detected.\n                    // The reason for that is that renegotiate can not be called\n                    // when adding tracks and they will not be reflected in\n                    // the local SDP.\n                    return this._initiatorRenegotiate(remoteDescription);\n                });\n            /* eslint-enable arrow-body-style */\n        }\n\n        logger.debug('Renegotiate: creating offer');\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug('Renegotiate: setting local description');\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(\n                            'Renegotiate: setting remote description');\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            // Check if the connection was closed and pretend everything is OK.\n            // This can happen if a track removal is scheduled but takes place\n            // after the connection is closed.\n            if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed'\n                || this.closed) {\n\n                finishedCallback();\n\n                return;\n            }\n\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            // NOTE the code below assumes that no more than 1 video track\n            // can be added to the peer connection.\n            // Transition from no video to video (possibly screen sharing)\n            if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                // Clearing current primary SSRC will make\n                // the SdpConsistency generate a new one which will result\n                // with:\n                // 1. source-remove for the recvonly\n                // 2. source-add for the new video stream\n                this.peerconnection.clearRecvonlySsrc();\n\n            // Transition from video to no video\n            } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                // Clearing current primary SSRC and generating the recvonly\n                // will result in:\n                // 1. source-remove for the old video stream\n                // 2. source-add for the recvonly stream\n                this.peerconnection.clearRecvonlySsrc();\n                this.peerconnection.generateRecvonlySsrc();\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n            .then(shouldRenegotiate => {\n                if (shouldRenegotiate\n                    && (oldTrack || newTrack)\n                    && this.state === JingleSessionState.ACTIVE) {\n                    this._renegotiate()\n                        .then(() => {\n                            const newLocalSDP\n                                = new SDP(\n                                    this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(\n                                new SDP(oldLocalSdp), newLocalSDP);\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                } else {\n                    finishedCallback();\n                }\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error('Replace track error:', error);\n                        reject(error);\n                    } else {\n                        logger.info('Replace track done!');\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(\n                `${this} - some SSRC were added on ${operationName}`,\n                addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(\n                `${this} - some SSRCs were removed on ${operationName}`,\n                removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track);\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const tpcOperation\n                = isMute\n                    ? tpc.removeTrackMute.bind(tpc, track)\n                    : tpc.addTrackUnmute.bind(tpc, track);\n\n            if (!tpcOperation()) {\n                finishedCallback(`${operationName} failed!`);\n            } else if (!oldLocalSDP || !tpc.remoteDescription.sdp) {\n                finishedCallback();\n            } else {\n                this._renegotiate()\n                    .then(() => {\n                        // The results are ignored, as this check failure is not\n                        // enough to fail the whole operation. It will log\n                        // an error inside.\n                        this._verifyNoSSRCChanged(\n                            operationName, new SDP(oldLocalSDP));\n                        finishedCallback();\n                    },\n                    finishedCallback /* will be called with an error */);\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify(videoActive);\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(\n            `${this} queued \"content-modify\" task`\n                + `(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('\"content-modify\" failed', error);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(\n                `${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info('Sending source-remove', remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        } else {\n            logger.log('removal not necessary');\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info('Sending source-add', add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        } else {\n            logger.log('addition not necessary');\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     *\n     * @param error\n     * @private\n     */\n    _onJingleFatalError(error) {\n        if (this.room) {\n            this.room.eventEmitter.emit(\n                XMPPEvents.CONFERENCE_SETUP_FAILED, this, error);\n            this.room.eventEmitter.emit(\n                XMPPEvents.JINGLE_FATAL_ERROR, this, error);\n        }\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.closed = true;\n\n        // The signaling layer will remove it's listeners\n        this.signalingLayer.setChatRoom(null);\n\n        // do not try to close if already closed.\n        this.peerconnection\n            && ((this.peerconnection.signalingState\n                    && this.peerconnection.signalingState !== 'closed')\n                || (this.peerconnection.connectionState\n                    && this.peerconnection.connectionState !== 'closed'))\n            && this.peerconnection.close();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[p2p=${this.isP2P},`\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n","/*!\n * Bowser - a browser detector\n * https://github.com/ded/bowser\n * MIT License | (c) Dustin Diaz 2015\n */\n\n!function (root, name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(name, definition)\n  else root[name] = definition()\n}(this, 'bowser', function () {\n  /**\n    * See useragents.js for examples of navigator.userAgent\n    */\n\n  var t = true\n\n  function detect(ua) {\n\n    function getFirstMatch(regex) {\n      var match = ua.match(regex);\n      return (match && match.length > 1 && match[1]) || '';\n    }\n\n    function getSecondMatch(regex) {\n      var match = ua.match(regex);\n      return (match && match.length > 1 && match[2]) || '';\n    }\n\n    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()\n      , likeAndroid = /like android/i.test(ua)\n      , android = !likeAndroid && /android/i.test(ua)\n      , nexusMobile = /nexus\\s*[0-6]\\s*/i.test(ua)\n      , nexusTablet = !nexusMobile && /nexus\\s*[0-9]+/i.test(ua)\n      , chromeos = /CrOS/.test(ua)\n      , silk = /silk/i.test(ua)\n      , sailfish = /sailfish/i.test(ua)\n      , tizen = /tizen/i.test(ua)\n      , webos = /(web|hpw)os/i.test(ua)\n      , windowsphone = /windows phone/i.test(ua)\n      , samsungBrowser = /SamsungBrowser/i.test(ua)\n      , windows = !windowsphone && /windows/i.test(ua)\n      , mac = !iosdevice && !silk && /macintosh/i.test(ua)\n      , linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua)\n      , edgeVersion = getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.\\d+)?)/i)\n      , versionIdentifier = getFirstMatch(/version\\/(\\d+(\\.\\d+)?)/i)\n      , tablet = /tablet/i.test(ua) && !/tablet pc/i.test(ua)\n      , mobile = !tablet && /[^-]mobi/i.test(ua)\n      , xbox = /xbox/i.test(ua)\n      , result\n\n    if (/opera/i.test(ua)) {\n      //  an old Opera\n      result = {\n        name: 'Opera'\n      , opera: t\n      , version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    } else if (/opr\\/|opios/i.test(ua)) {\n      // a new Opera\n      result = {\n        name: 'Opera'\n        , opera: t\n        , version: getFirstMatch(/(?:opr|opios)[\\s\\/](\\d+(\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (/SamsungBrowser/i.test(ua)) {\n      result = {\n        name: 'Samsung Internet for Android'\n        , samsungBrowser: t\n        , version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/coast/i.test(ua)) {\n      result = {\n        name: 'Opera Coast'\n        , coast: t\n        , version: versionIdentifier || getFirstMatch(/(?:coast)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/yabrowser/i.test(ua)) {\n      result = {\n        name: 'Yandex Browser'\n      , yandexbrowser: t\n      , version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/ucbrowser/i.test(ua)) {\n      result = {\n          name: 'UC Browser'\n        , ucbrowser: t\n        , version: getFirstMatch(/(?:ucbrowser)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/mxios/i.test(ua)) {\n      result = {\n        name: 'Maxthon'\n        , maxthon: t\n        , version: getFirstMatch(/(?:mxios)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/epiphany/i.test(ua)) {\n      result = {\n        name: 'Epiphany'\n        , epiphany: t\n        , version: getFirstMatch(/(?:epiphany)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/puffin/i.test(ua)) {\n      result = {\n        name: 'Puffin'\n        , puffin: t\n        , version: getFirstMatch(/(?:puffin)[\\s\\/](\\d+(?:\\.\\d+)?)/i)\n      }\n    }\n    else if (/sleipnir/i.test(ua)) {\n      result = {\n        name: 'Sleipnir'\n        , sleipnir: t\n        , version: getFirstMatch(/(?:sleipnir)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/k-meleon/i.test(ua)) {\n      result = {\n        name: 'K-Meleon'\n        , kMeleon: t\n        , version: getFirstMatch(/(?:k-meleon)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (windowsphone) {\n      result = {\n        name: 'Windows Phone'\n      , osname: 'Windows Phone'\n      , windowsphone: t\n      }\n      if (edgeVersion) {\n        result.msedge = t\n        result.version = edgeVersion\n      }\n      else {\n        result.msie = t\n        result.version = getFirstMatch(/iemobile\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/msie|trident/i.test(ua)) {\n      result = {\n        name: 'Internet Explorer'\n      , msie: t\n      , version: getFirstMatch(/(?:msie |rv:)(\\d+(\\.\\d+)?)/i)\n      }\n    } else if (chromeos) {\n      result = {\n        name: 'Chrome'\n      , osname: 'Chrome OS'\n      , chromeos: t\n      , chromeBook: t\n      , chrome: t\n      , version: getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)/i)\n      }\n    } else if (/edg([ea]|ios)/i.test(ua)) {\n      result = {\n        name: 'Microsoft Edge'\n      , msedge: t\n      , version: edgeVersion\n      }\n    }\n    else if (/vivaldi/i.test(ua)) {\n      result = {\n        name: 'Vivaldi'\n        , vivaldi: t\n        , version: getFirstMatch(/vivaldi\\/(\\d+(\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (sailfish) {\n      result = {\n        name: 'Sailfish'\n      , osname: 'Sailfish OS'\n      , sailfish: t\n      , version: getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/seamonkey\\//i.test(ua)) {\n      result = {\n        name: 'SeaMonkey'\n      , seamonkey: t\n      , version: getFirstMatch(/seamonkey\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/firefox|iceweasel|fxios/i.test(ua)) {\n      result = {\n        name: 'Firefox'\n      , firefox: t\n      , version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \\/](\\d+(\\.\\d+)?)/i)\n      }\n      if (/\\((mobile|tablet);[^\\)]*rv:[\\d\\.]+\\)/i.test(ua)) {\n        result.firefoxos = t\n        result.osname = 'Firefox OS'\n      }\n    }\n    else if (silk) {\n      result =  {\n        name: 'Amazon Silk'\n      , silk: t\n      , version : getFirstMatch(/silk\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/phantom/i.test(ua)) {\n      result = {\n        name: 'PhantomJS'\n      , phantom: t\n      , version: getFirstMatch(/phantomjs\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/slimerjs/i.test(ua)) {\n      result = {\n        name: 'SlimerJS'\n        , slimer: t\n        , version: getFirstMatch(/slimerjs\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/blackberry|\\bbb\\d+/i.test(ua) || /rim\\stablet/i.test(ua)) {\n      result = {\n        name: 'BlackBerry'\n      , osname: 'BlackBerry OS'\n      , blackberry: t\n      , version: versionIdentifier || getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (webos) {\n      result = {\n        name: 'WebOS'\n      , osname: 'WebOS'\n      , webos: t\n      , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\\/(\\d+(\\.\\d+)?)/i)\n      };\n      /touchpad\\//i.test(ua) && (result.touchpad = t)\n    }\n    else if (/bada/i.test(ua)) {\n      result = {\n        name: 'Bada'\n      , osname: 'Bada'\n      , bada: t\n      , version: getFirstMatch(/dolfin\\/(\\d+(\\.\\d+)?)/i)\n      };\n    }\n    else if (tizen) {\n      result = {\n        name: 'Tizen'\n      , osname: 'Tizen'\n      , tizen: t\n      , version: getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.\\d+)?)/i) || versionIdentifier\n      };\n    }\n    else if (/qupzilla/i.test(ua)) {\n      result = {\n        name: 'QupZilla'\n        , qupzilla: t\n        , version: getFirstMatch(/(?:qupzilla)[\\s\\/](\\d+(?:\\.\\d+)+)/i) || versionIdentifier\n      }\n    }\n    else if (/chromium/i.test(ua)) {\n      result = {\n        name: 'Chromium'\n        , chromium: t\n        , version: getFirstMatch(/(?:chromium)[\\s\\/](\\d+(?:\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (/chrome|crios|crmo/i.test(ua)) {\n      result = {\n        name: 'Chrome'\n        , chrome: t\n        , version: getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (android) {\n      result = {\n        name: 'Android'\n        , version: versionIdentifier\n      }\n    }\n    else if (/safari|applewebkit/i.test(ua)) {\n      result = {\n        name: 'Safari'\n      , safari: t\n      }\n      if (versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    }\n    else if (iosdevice) {\n      result = {\n        name : iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'\n      }\n      // WTF: version is not part of user agent in web apps\n      if (versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    }\n    else if(/googlebot/i.test(ua)) {\n      result = {\n        name: 'Googlebot'\n      , googlebot: t\n      , version: getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i) || versionIdentifier\n      }\n    }\n    else {\n      result = {\n        name: getFirstMatch(/^(.*)\\/(.*) /),\n        version: getSecondMatch(/^(.*)\\/(.*) /)\n     };\n   }\n\n    // set webkit or gecko flag for browsers based on these engines\n    if (!result.msedge && /(apple)?webkit/i.test(ua)) {\n      if (/(apple)?webkit\\/537\\.36/i.test(ua)) {\n        result.name = result.name || \"Blink\"\n        result.blink = t\n      } else {\n        result.name = result.name || \"Webkit\"\n        result.webkit = t\n      }\n      if (!result.version && versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    } else if (!result.opera && /gecko\\//i.test(ua)) {\n      result.name = result.name || \"Gecko\"\n      result.gecko = t\n      result.version = result.version || getFirstMatch(/gecko\\/(\\d+(\\.\\d+)?)/i)\n    }\n\n    // set OS flags for platforms that have multiple browsers\n    if (!result.windowsphone && (android || result.silk)) {\n      result.android = t\n      result.osname = 'Android'\n    } else if (!result.windowsphone && iosdevice) {\n      result[iosdevice] = t\n      result.ios = t\n      result.osname = 'iOS'\n    } else if (mac) {\n      result.mac = t\n      result.osname = 'macOS'\n    } else if (xbox) {\n      result.xbox = t\n      result.osname = 'Xbox'\n    } else if (windows) {\n      result.windows = t\n      result.osname = 'Windows'\n    } else if (linux) {\n      result.linux = t\n      result.osname = 'Linux'\n    }\n\n    function getWindowsVersion (s) {\n      switch (s) {\n        case 'NT': return 'NT'\n        case 'XP': return 'XP'\n        case 'NT 5.0': return '2000'\n        case 'NT 5.1': return 'XP'\n        case 'NT 5.2': return '2003'\n        case 'NT 6.0': return 'Vista'\n        case 'NT 6.1': return '7'\n        case 'NT 6.2': return '8'\n        case 'NT 6.3': return '8.1'\n        case 'NT 10.0': return '10'\n        default: return undefined\n      }\n    }\n\n    // OS version extraction\n    var osVersion = '';\n    if (result.windows) {\n      osVersion = getWindowsVersion(getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i))\n    } else if (result.windowsphone) {\n      osVersion = getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i);\n    } else if (result.mac) {\n      osVersion = getFirstMatch(/Mac OS X (\\d+([_\\.\\s]\\d+)*)/i);\n      osVersion = osVersion.replace(/[_\\s]/g, '.');\n    } else if (iosdevice) {\n      osVersion = getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i);\n      osVersion = osVersion.replace(/[_\\s]/g, '.');\n    } else if (android) {\n      osVersion = getFirstMatch(/android[ \\/-](\\d+(\\.\\d+)*)/i);\n    } else if (result.webos) {\n      osVersion = getFirstMatch(/(?:web|hpw)os\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.blackberry) {\n      osVersion = getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i);\n    } else if (result.bada) {\n      osVersion = getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.tizen) {\n      osVersion = getFirstMatch(/tizen[\\/\\s](\\d+(\\.\\d+)*)/i);\n    }\n    if (osVersion) {\n      result.osversion = osVersion;\n    }\n\n    // device type extraction\n    var osMajorVersion = !result.windows && osVersion.split('.')[0];\n    if (\n         tablet\n      || nexusTablet\n      || iosdevice == 'ipad'\n      || (android && (osMajorVersion == 3 || (osMajorVersion >= 4 && !mobile)))\n      || result.silk\n    ) {\n      result.tablet = t\n    } else if (\n         mobile\n      || iosdevice == 'iphone'\n      || iosdevice == 'ipod'\n      || android\n      || nexusMobile\n      || result.blackberry\n      || result.webos\n      || result.bada\n    ) {\n      result.mobile = t\n    }\n\n    // Graded Browser Support\n    // http://developer.yahoo.com/yui/articles/gbs\n    if (result.msedge ||\n        (result.msie && result.version >= 10) ||\n        (result.yandexbrowser && result.version >= 15) ||\n\t\t    (result.vivaldi && result.version >= 1.0) ||\n        (result.chrome && result.version >= 20) ||\n        (result.samsungBrowser && result.version >= 4) ||\n        (result.firefox && result.version >= 20.0) ||\n        (result.safari && result.version >= 6) ||\n        (result.opera && result.version >= 10.0) ||\n        (result.ios && result.osversion && result.osversion.split(\".\")[0] >= 6) ||\n        (result.blackberry && result.version >= 10.1)\n        || (result.chromium && result.version >= 20)\n        ) {\n      result.a = t;\n    }\n    else if ((result.msie && result.version < 10) ||\n        (result.chrome && result.version < 20) ||\n        (result.firefox && result.version < 20.0) ||\n        (result.safari && result.version < 6) ||\n        (result.opera && result.version < 10.0) ||\n        (result.ios && result.osversion && result.osversion.split(\".\")[0] < 6)\n        || (result.chromium && result.version < 20)\n        ) {\n      result.c = t\n    } else result.x = t\n\n    return result\n  }\n\n  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '')\n\n  bowser.test = function (browserList) {\n    for (var i = 0; i < browserList.length; ++i) {\n      var browserItem = browserList[i];\n      if (typeof browserItem=== 'string') {\n        if (browserItem in bowser) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get version precisions count\n   *\n   * @example\n   *   getVersionPrecision(\"1.10.3\") // 3\n   *\n   * @param  {string} version\n   * @return {number}\n   */\n  function getVersionPrecision(version) {\n    return version.split(\".\").length;\n  }\n\n  /**\n   * Array::map polyfill\n   *\n   * @param  {Array} arr\n   * @param  {Function} iterator\n   * @return {Array}\n   */\n  function map(arr, iterator) {\n    var result = [], i;\n    if (Array.prototype.map) {\n      return Array.prototype.map.call(arr, iterator);\n    }\n    for (i = 0; i < arr.length; i++) {\n      result.push(iterator(arr[i]));\n    }\n    return result;\n  }\n\n  /**\n   * Calculate browser version weight\n   *\n   * @example\n   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1\n   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1\n   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0\n   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1\n   *\n   * @param  {Array<String>} versions versions to compare\n   * @return {Number} comparison result\n   */\n  function compareVersions(versions) {\n    // 1) get common precision for both versions, for example for \"10.0\" and \"9\" it should be 2\n    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));\n    var chunks = map(versions, function (version) {\n      var delta = precision - getVersionPrecision(version);\n\n      // 2) \"9\" -> \"9.0\" (for precision = 2)\n      version = version + new Array(delta + 1).join(\".0\");\n\n      // 3) \"9.0\" -> [\"000000000\"\", \"000000009\"]\n      return map(version.split(\".\"), function (chunk) {\n        return new Array(20 - chunk.length).join(\"0\") + chunk;\n      }).reverse();\n    });\n\n    // iterate in reverse order by reversed chunks array\n    while (--precision >= 0) {\n      // 4) compare: \"000000009\" > \"000000010\" = false (but \"9\" > \"10\" = true)\n      if (chunks[0][precision] > chunks[1][precision]) {\n        return 1;\n      }\n      else if (chunks[0][precision] === chunks[1][precision]) {\n        if (precision === 0) {\n          // all version chunks are same\n          return 0;\n        }\n      }\n      else {\n        return -1;\n      }\n    }\n  }\n\n  /**\n   * Check if browser is unsupported\n   *\n   * @example\n   *   bowser.isUnsupportedBrowser({\n   *     msie: \"10\",\n   *     firefox: \"23\",\n   *     chrome: \"29\",\n   *     safari: \"5.1\",\n   *     opera: \"16\",\n   *     phantom: \"534\"\n   *   });\n   *\n   * @param  {Object}  minVersions map of minimal version to browser\n   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map\n   * @param  {String}  [ua] user agent string\n   * @return {Boolean}\n   */\n  function isUnsupportedBrowser(minVersions, strictMode, ua) {\n    var _bowser = bowser;\n\n    // make strictMode param optional with ua param usage\n    if (typeof strictMode === 'string') {\n      ua = strictMode;\n      strictMode = void(0);\n    }\n\n    if (strictMode === void(0)) {\n      strictMode = false;\n    }\n    if (ua) {\n      _bowser = detect(ua);\n    }\n\n    var version = \"\" + _bowser.version;\n    for (var browser in minVersions) {\n      if (minVersions.hasOwnProperty(browser)) {\n        if (_bowser[browser]) {\n          if (typeof minVersions[browser] !== 'string') {\n            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));\n          }\n\n          // browser version and min supported version.\n          return compareVersions([version, minVersions[browser]]) < 0;\n        }\n      }\n    }\n\n    return strictMode; // not found\n  }\n\n  /**\n   * Check if browser is supported\n   *\n   * @param  {Object} minVersions map of minimal version to browser\n   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map\n   * @param  {String}  [ua] user agent string\n   * @return {Boolean}\n   */\n  function check(minVersions, strictMode, ua) {\n    return !isUnsupportedBrowser(minVersions, strictMode, ua);\n  }\n\n  bowser.isUnsupportedBrowser = isUnsupportedBrowser;\n  bowser.compareVersions = compareVersions;\n  bowser.check = check;\n\n  /*\n   * Set our detect method to the main bowser object so we can\n   * reuse it to test other user agents.\n   * This is needed to implement future tests.\n   */\n  bowser._detect = detect;\n\n  /*\n   * Set our detect public method to the main bowser object\n   * This is needed to implement bowser in server side\n   */\n  bowser.detect = detect;\n  return bowser\n});\n","import SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\n\n            // iterate over ssrc lines\n            mediaSsrc.lines.forEach(line => {\n                const idx = line.indexOf(' ');\n                const kv = line.substr(idx + 1);\n\n                modify.c('parameter');\n                if (kv.indexOf(':') === -1) {\n                    modify.attrs({ name: kv });\n                } else {\n                    const nv = kv.split(':', 2);\n                    const name = nv[0];\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\n\n                    modify.attrs({ name });\n                    modify.attrs({ value });\n                }\n                modify.up(); // end of parameter\n            });\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n\n    const self = this;\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            if (audioLevel !== self.audioLevel) {\n                self.audioLevel = animateLevel(audioLevel, self.audioLevel);\n                self.callback(self.audioLevel);\n            }\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Adds onended/oninactive handler to a MediaStream.\n * @param mediaStream a MediaStream to attach onended/oninactive handler\n * @param handler the handler\n */\nfunction addMediaStreamInactiveHandler(mediaStream, handler) {\n    mediaStream.oninactive = handler;\n}\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            // FIXME Why only video tracks?\n            for (const track of this.stream.getVideoTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            addMediaStreamInactiveHandler(this.stream, undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                addMediaStreamInactiveHandler(\n                    this.stream, this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        if (this.audioLevel !== audioLevel) {\n            this.audioLevel = audioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                audioLevel,\n                tpc);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","\n\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport JitsiTrack from './JitsiTrack';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport browser from '../browser';\nimport RTCUtils from './RTCUtils';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        if (browser.usesNewGumFlow()) {\n            // Get the resolution from the track itself because it cannot be\n            // certain which resolution webrtc has fallen back to using.\n            this.resolution = track.getSettings().height;\n\n            // Cache the constraints of the track in case of any this track\n            // model needs to call getUserMedia again, such as when unmuting.\n            this._constraints = track.getConstraints();\n        } else {\n            // FIXME Currently, Firefox is ignoring our constraints about\n            // resolutions so we do not store it, to avoid wrong reporting of\n            // local track resolution.\n            this.resolution = browser.isFirefox() ? null : resolution;\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        /**\n         * On mute event we are waiting for 3s to check if the stream is going\n         * to be still muted before firing the event for camera issue detected\n         * (NO_DATA_FROM_SOURCE).\n         */\n        this._noDataFromSourceTimeout = null;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            const _onNoDataFromSourceError\n                = this._onNoDataFromSourceError.bind(this);\n\n            this._setHandler('track_mute', () => {\n                if (this._checkForCameraIssues()) {\n                    const now = window.performance.now();\n\n                    this._noDataFromSourceTimeout\n                        = setTimeout(_onNoDataFromSourceError, 5000);\n                    this._setHandler('track_unmute', () => {\n                        this._clearNoDataFromSourceMuteResources();\n                        Statistics.sendAnalyticsAndLog(\n                            TRACK_UNMUTED,\n                            {\n                                'media_type': this.getType(),\n                                'track_type': 'local',\n                                value: window.performance.now() - now\n                            });\n                    });\n                }\n            });\n            this._setHandler('track_ended', _onNoDataFromSourceError);\n        }\n    }\n\n    /**\n     * Clears all timeouts and handlers set on MediaStreamTrack mute event.\n     * FIXME: Change the name of the method with better one.\n     */\n    _clearNoDataFromSourceMuteResources() {\n        if (this._noDataFromSourceTimeout) {\n            clearTimeout(this._noDataFromSourceTimeout);\n            this._noDataFromSourceTimeout = null;\n        }\n        this._setHandler('track_unmute', undefined);\n    }\n\n    /**\n     * Called when potential camera issue is detected. Clears the handlers and\n     * timeouts set on MediaStreamTrack muted event. Verifies that the camera\n     * issue persists and fires NO_DATA_FROM_SOURCE event.\n     */\n    _onNoDataFromSourceError() {\n        this._clearNoDataFromSourceMuteResources();\n        if (this._checkForCameraIssues()) {\n            this._fireNoDataFromSourceEvent();\n        }\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        this.emit(NO_DATA_FROM_SOURCE);\n\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType()));\n        const log = { name: NO_DATA_FROM_SOURCE };\n\n        if (this.isAudioTrack()) {\n            log.isReceivingData = this._isReceivingData();\n        }\n        Statistics.sendLog(JSON.stringify(log));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n            if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            if (browser.usesNewGumFlow()) {\n                promise\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\n                        {},\n                        streamOptions,\n                        { constraints: { video: this._constraints } }));\n            } else {\n                if (this.resolution) {\n                    streamOptions.resolution = this.resolution;\n                }\n\n                promise\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\n            }\n\n            promise.then(streamsInfo => {\n                const mediaType = this.getType();\n                const streamInfo\n                    = browser.usesNewGumFlow()\n                        ? streamsInfo.find(\n                            info => info.track.kind === mediaType)\n                        : streamsInfo.find(\n                            info => info.mediaType === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => this._sendMuteStatus(muted))\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {Promise}\n     */\n    _sendMuteStatus(mute) {\n        if (!this.conference || !this.conference.room) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute, resolve);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        let promise = Promise.resolve();\n\n        if (this.conference) {\n            promise = this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${this._bytesSent}`);\n\n                    // we are not receiving anything from the microphone\n                    this._fireNoDataFromSourceEvent();\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            let trackSettings;\n\n            try {\n                trackSettings = this.track.getSettings();\n            } catch (e) {\n                // XXX React-native-webrtc, for example, defines\n                // MediaStreamTrack#getSettings() but the implementation throws\n                // a \"Not implemented\" Error.\n            }\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n\n            /**\n             * <TABEEB> Set default \"environment\" camera when a user stars a call.\n             *\n             * Original code:\n             * return CameraFacingMode.USER;\n             */\n            return CameraFacingMode.ENVIRONMENT;\n            // </TABEEB>\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Detects camera issues, i.e. returns true if we expect this track to be\n     * receiving data from its source, but it isn't receiving data.\n     *\n     * @returns {boolean} true if an issue is detected and false otherwise\n     */\n    _checkForCameraIssues() {\n        if (!this.isVideoTrack()\n                || this._stopStreamInProgress\n                || this.videoType === VideoType.DESKTOP) {\n            return false;\n        }\n\n        return !this._isReceivingData();\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    _isReceivingData() {\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n        return this.stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as MediaType from './service/RTC/MediaType';\nimport browser from './modules/browser';\nimport RTC from './modules/RTC/RTC';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport Statistics from './modules/statistics/statistics';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._grantedPermissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n        RTC.addListener(\n            RTCEvents.GRANTED_PERMISSIONS,\n            grantedPermissions =>\n                this._handleGrantedPermissions(grantedPermissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and\n        // 'microphone' permissions are implemented. (Testing for at least one\n        // of them seems sufficient).\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(() => resolve(true), () => resolve(false));\n        });\n    }\n\n    /**\n     * Updated the local granted permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} grantedPermissions - Array with the permissions\n     * which were granted.\n     */\n    _handleGrantedPermissions(grantedPermissions) {\n        this._grantedPermissions = {\n            ...this._grantedPermissions,\n            ...grantedPermissions\n        };\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._grantedPermissions) {\n                resolve(this._grantedPermissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        // The status attribute is deprecated, and state\n                        // should be used instead, but check both for now\n                        // for backwards compatibility.\n                        const grantStatus = permissionStatus.state\n                            || permissionStatus.status;\n\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio\n     * from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !browser.isFirefox();\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices && availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // Defer to the browser capabilities to allow exposure of the api to the\n        // consumer but prevent other files from having to import\n        // JitsiMediaDevices.\n        return browser.supportsVideo();\n    }\n}\n\nexport default new JitsiMediaDevices();\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n"," /* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress); // was: relAddr\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort); // was: relPort\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n}\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  // was: channels\n  parsed.numChannels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (codec.numChannels !== 1 ? '/' + codec.numChannels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n          ? '/' + headerExtension.direction\n          : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      params.push(param + '=' + codec.parameters[param]);\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n}\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n      'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  // Search in session part, too.\n  lines = lines.concat(SDPUtils.splitLines(sessionpart));\n  var iceParameters = {\n    usernameFragment: lines.filter(function(line) {\n      return line.indexOf('a=ice-ufrag:') === 0;\n    })[0].substr(12),\n    password: lines.filter(function(line) {\n      return line.indexOf('a=ice-pwd:') === 0;\n    })[0].substr(10)\n  };\n  return iceParameters;\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n          mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n          mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  caps.headerExtensions.forEach(function(extension) {\n    sdp += SDPUtils.writeExtmap(extension);\n  });\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n  .map(function(line) {\n    return SDPUtils.parseSsrcMedia(line);\n  })\n  .filter(function(parts) {\n    return parts.attribute === 'cname';\n  });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n  .map(function(line) {\n    var parts = line.split(' ');\n    parts.shift();\n    return parts.map(function(part) {\n      return parseInt(part, 10);\n    });\n  });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n        rtx: {\n          ssrc: secondarySsrc\n        }\n      };\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: secondarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  var cname;\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n      .map(function(line) {\n        return SDPUtils.parseSsrcMedia(line);\n      })\n      .filter(function(obj) {\n        return obj.attribute === 'cname';\n      })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n  .map(function(line) {\n    return SDPUtils.parseSsrcMedia(line);\n  })\n  .filter(function(parts) {\n    return parts.attribute === 'msid';\n  });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=thisisadapterortc ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n}\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = createEmptyStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * Creates a empty MediaStream object which can be used\n * to add MediaStreamTracks to\n * @returns MediaStream\n */\nfunction createEmptyStream() {\n    if (typeof MediaStream !== 'undefined') {\n        return new MediaStream();\n    }\n    throw new Error('cannot create a clean mediaStream');\n}\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","import {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    return this.xmpp.caps.addFeature(feature, submit);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    return this.xmpp.caps.removeFeature(feature, submit);\n};\n","/* global __filename, $, Promise */\nimport { Strophe } from 'strophe.js';\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport JitsiDTMFManager from './modules/DTMF/JitsiDTMFManager';\nimport P2PDominantSpeakerDetection from './modules/P2PDominantSpeakerDetection';\nimport RTC from './modules/RTC/RTC';\nimport TalkMutedDetection from './modules/TalkMutedDetection';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedNotification\n    from './modules/connectivity/IceFailedNotification';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport RttMonitor from './modules/rttmonitor/rttmonitor';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\n * (don't open any channel).\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    // Override connection and xmpp properties (Useful if the connection\n    // reloaded)\n    if (options.connection) {\n        this.connection = options.connection;\n        this.xmpp = this.connection.xmpp;\n\n        // Setup XMPP events only if we have new connection object.\n        this.eventManager.setupXMPPListeners();\n    }\n\n    const { config } = this.options;\n\n    this.room = this.xmpp.createRoom(this.options.name, config);\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this.rttMonitor = new RttMonitor(config.rttMonitor || {});\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send a ping request or response.');\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    if (!this.statistics) {\n        // XXX The property location on the global variable window is not\n        // defined in all execution environments (e.g. react-native). While\n        // jitsi-meet may polyfill it when executing on react-native, it is\n        // better for the cross-platform support to not require window.location\n        // especially when there is a worthy alternative (as demonstrated\n        // bellow).\n        const windowLocation = window.location;\n\n        let callStatsAliasName = this.myUserId();\n\n        if (config.enableDisplayNameInStats && config.displayName) {\n            callStatsAliasName = config.displayName;\n        }\n\n        this.statistics = new Statistics(this.xmpp, {\n            callStatsAliasName,\n            callStatsConfIDNamespace:\n                config.callStatsConfIDNamespace\n                    || (windowLocation && windowLocation.hostname)\n                    || (config.hosts && config.hosts.domain),\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            roomName: this.options.name,\n            swapUserNameAndAlias: config.enableStatsID,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod\n        });\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    if (config.enableTalkWhileMuted) {\n        // eslint-disable-next-line no-new\n        new TalkMutedDetection(\n            this,\n            () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n    }\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n */\nJitsiConference.prototype.join = function(password) {\n    if (this.room) {\n        this.room.join(password).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(...args) {\n    return authenticateAndUpgradeRole.apply(this, args);\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this.rttMonitor) {\n        this.rttMonitor.stop();\n        this.rttMonitor = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command) {\n    if (this.room) {\n        this.room.removePresenceListener(command);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addToPresence(name, values);\n        this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        // remove previously set nickname\n        this.room.removeFromPresence('nick');\n\n        this.room.addToPresence('nick', {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        });\n        this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (track.isVideoTrack()) {\n        // Ensure there's exactly 1 local video track in the conference.\n        const localVideoTrack = this.rtc.getLocalVideoTrack();\n\n        if (localVideoTrack) {\n            // Don't be excessively harsh and severe if the API client happens\n            // to attempt to add the same local video track twice.\n            if (track === localVideoTrack) {\n                return Promise.resolve(track);\n            }\n\n            return Promise.reject(new Error(\n                'cannot add second video track to the conference'));\n\n        }\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false);\n    }\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track);\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrack) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrack, newTrack)\n        .then(() => {\n            if (oldTrack) {\n                this.onLocalTrackRemoved(oldTrack);\n            }\n            if (newTrack) {\n                // Now handle the addition of the newTrack at the\n                // JitsiConference level\n                this._setupNewTrack(newTrack);\n            }\n\n            return Promise.resolve();\n        }, error => Promise.reject(new Error(error)));\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        this.removeCommand('videoType');\n        this.sendCommand('videoType', {\n            value: newTrack.videoType,\n            attributes: {\n                xmlns: 'http://jitsi.org/jitmeet/video'\n            }\n        });\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no P2P Jingle session started yet');\n    }\n\n    return Promise.all(addAsUnmutePromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(\n            this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(\n            this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.all(removeAsMutePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject();\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.rtc.selectEndpoints(participantIds);\n};\n\n/**\n * Elects the participant with the given id to be the pinned participant in\n * order to always receive video for this participant (even when last n is\n * enabled).\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n */\nJitsiConference.prototype.pinParticipant = function(participantId) {\n    this.rtc.pinEndpoint(participantId);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.rtc.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.rtc.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.keys(this.participants).map(function(key) {\n        return this.participants[key];\n    }, this);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid());\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status);\n\n    participant._role = role;\n    participant._botType = botType;\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n    this.xmpp.caps.getFeatures(jid)\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n        },\n        error => logger.warn(`Failed to discover features of ${jid}`, error));\n\n    this._maybeStartOrStopP2P();\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant._botType = botType;\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant._botType) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    const removedTracks = this.rtc.removeRemoteTracks(id);\n\n    removedTracks.forEach(\n        track =>\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track));\n\n    // there can be no participant in case the member that left is focus\n    if (participant) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    this._maybeStartOrStopP2P(true /* triggered by user left event */);\n    this._maybeClearSITimeout();\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n\n    // Maybe start P2P\n    this._maybeStartOrStopP2P();\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant._role = role;\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n        this.p2pJingleSession.setAnswer(answer);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n    const role = this.room.getMemberRole(jingleSession.remoteJid);\n\n    if (role !== 'moderator') {\n        rejectReason = {\n            reason: 'security-error',\n            reasonDescription: 'Only focus can start new sessions',\n            errorMsg: 'Rejecting session-initiate from non-focus and'\n                        + `non-moderator user: ${jingleSession.remoteJid}`\n        };\n    } else if (!browser.supportsP2P()) {\n        rejectReason = {\n            reason: 'unsupported-applications',\n            reasonDescription: 'P2P not supported',\n            errorMsg: 'This client does not support P2P connections'\n        };\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n    try {\n        jingleSession.initialize(this.room, this.rtc, this.options.config);\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    // Add local tracks to the session\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            this.getLocalTracks()\n        );\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    let bridgeChannelType;\n\n    switch (this.options.config.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        bridgeChannelType = 'datachannel';\n        break;\n    case 'websocket':\n        bridgeChannelType = 'websocket';\n        break;\n    }\n\n    if (bridgeChannelType === 'datachannel'\n        && !browser.supportsDataChannels()) {\n        bridgeChannelType = 'websocket';\n    }\n\n    if (bridgeChannelType === 'datachannel') {\n        this.rtc.initializeBridgeChannel(pc, null);\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    if (!this.dtmfManager) {\n        const peerConnection = this.getActivePeerConnection();\n\n        if (!peerConnection) {\n            logger.warn('cannot sendTones: no peer connection');\n\n            return;\n        }\n\n        const localAudio = this.getLocalAudioTrack();\n\n        if (!localAudio) {\n            logger.warn('cannot sendTones: no local audio stream');\n\n            return;\n        }\n        this.dtmfManager = new JitsiDTMFManager(localAudio, peerConnection);\n    }\n\n    this.dtmfManager.sendTones(tones, duration, pause);\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection;\n    }\n\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.removeFromPresence('startmuted');\n    this.room.addToPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    });\n    this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConference.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\n * focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype._isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        if (this.xmpp.isPingSupported()) {\n            this._delayedIceFailed = new IceFailedNotification(this);\n            this._delayedIceFailed.start(session);\n        } else {\n            // Let Jicofo know that the JVB's ICE connection has failed\n            logger.info('PING not supported - sending ICE failed immediately');\n            session.sendIceFailedNotification();\n        }\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    if (this.options.config.enableStatsID) {\n        const participant = this.participants[remoteID];\n\n        if (participant) {\n            remoteID = participant.getStatsID() || remoteID;\n        }\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms',\n            'octo-enabled'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.rtc.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    if (this.options.config.enableStatsID) {\n        const participant = this.participants[remoteID];\n\n        if (participant) {\n            remoteID = participant.getStatsID() || remoteID;\n        }\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    // NOTE one may consider to start P2P with the local tracks detached,\n    // but no data will be sent until ICE succeeds anyway. And we switch\n    // immediately once the P2P ICE connects.\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!browser.supportsP2P()\n        || !this.isP2PEnabled()\n        || this.isP2PTestModeEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const isModerator = this.isModerator();\n    const hasBotPeer\n        = peers.find(p => p._botType === 'poltergeist') !== undefined;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(\n        `P2P? isModerator: ${isModerator}, peerCount: ${\n            peerCount}, hasBotPeer: ${hasBotPeer} => ${\n            shouldBeInP2P}`);\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (isModerator && !this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n        // Everyone is a moderator ?\n        if (isModerator && peer.getRole() === 'moderator') {\n            const myId = this.myUserId();\n            const peersId = peer.getId();\n\n            if (myId > peersId) {\n                logger.debug(\n                    'Everyone\\'s a moderator - '\n                    + 'the other peer should start P2P', myId, peersId);\n\n                return;\n            } else if (myId === peersId) {\n                logger.error('The same IDs ? ', myId, peersId);\n\n                return;\n            }\n        }\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(\n        maxFrameHeight) {\n    this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/* global __filename */\nimport { Strophe } from 'strophe.js';\n\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport Statistics from './modules/statistics/statistics';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        () => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                },\n                () =>\n                    logger.warn(\n                        'Error while audio muting due to focus request'));\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.JINGLE_FATAL_ERROR,\n        (session, error) => {\n            if (!session.isP2P) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.JINGLE_FATAL_ERROR, error);\n            }\n        });\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RECORDER_STATE_CHANGED,\n        JitsiConferenceEvents.RECORDER_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.addListener(\n        XMPPEvents.CONFERENCE_SETUP_FAILED,\n        (jingleSession, error) => {\n            if (!jingleSession.isP2P) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.SETUP_FAILED,\n                    error);\n            }\n        });\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.KICKED,\n        JitsiConferenceEvents.KICKED);\n    chatRoom.addListener(XMPPEvents.KICKED,\n        () => {\n            conference.leave();\n        });\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\n                    + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        id => {\n            if (conference.lastDominantSpeaker !== id && conference.room) {\n                conference.lastDominantSpeaker = id;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\n            }\n            if (conference.statistics && conference.myUserId() === id) {\n                // We are the new dominant speaker.\n                conference.statistics.sendDominantSpeakerEvent(\n                    conference.room.roomjid);\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    conference.xmpp.caps.removeListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    const featuresChangedListener = from => {\n        const participant\n            = conference.getParticipantById(\n            Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\n                participant);\n        }\n    };\n\n    conference.xmpp.caps.addListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        featuresChangedListener);\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\n        = featuresChangedListener;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n    conference.statistics.addByteSentStatsListener((tpc, stats) => {\n        conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n            const ssrc = tpc.getLocalSSRC(track);\n\n            if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                return;\n            }\n\n            track._onByteSentStatsReceived(tpc, stats[ssrc]);\n        });\n    });\n};\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","import {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'callstats_name': Settings.callStatsUserName,\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","import { getLogger } from 'jitsi-meet-logger';\nimport { BrowserDetection } from 'js-utils';\n\nconst logger = getLogger(__filename);\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return !(\n            this.isFirefox()\n            || this.isEdge()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc()\n        );\n    }\n\n    /**\n     * Check whether or not the current browser support peer to peer connections\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\n     * otherwise.\n     */\n    supportsP2P() {\n        return !this.isEdge() && !this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, that is, it's either\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\n     * Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\n     *   such as Brave and Vivaldi\n     * - Browsers which are NOT Chrome but use it as their engine, and have\n     *   custom detection code: Opera, Electron and NW.JS\n     */\n    isChromiumBased() {\n        return this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera();\n    }\n\n    /**\n     * Checks if current browser is a Safari and a version of Safari that\n     * supports native webrtc.\n     *\n     * @returns {boolean}\n     */\n    isSafariWithWebrtc() {\n        return this.isSafari()\n            && !this.isVersionLessThan('11');\n    }\n\n    /**\n     * Checks if current browser is a Safari and a version of Safari that\n     * supports VP8.\n     *\n     * @returns {boolean}\n     */\n    isSafariWithVP8() {\n        return this.isSafari()\n            && !this.isVersionLessThan('12.1');\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return this.isChromiumBased()\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative()\n            || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isEdge()\n            && !this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Checks if the current browser supports WebRTC datachannels.\n     * @return {boolean}\n     */\n    supportsDataChannels() {\n        // NOTE: Edge does not yet implement DataChannel.\n        return !this.isEdge();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports the MediaStream constructor as\n     * defined by https://www.w3.org/TR/mediacapture-streams/#constructors. In\n     * cases where there is no support, it maybe be necessary to get audio\n     * and video in two distinct GUM calls.\n     * @return {boolean}\n     */\n    supportsMediaStreamConstructor() {\n        return !this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser supports RTP statictics collecting.\n     * Required by {@link RTPStatsCollector}.\n     *\n     * @returns {boolean} true if they are supported, false otherwise.\n     */\n    supportsRtpStatistics() {\n        return this.isChromiumBased()\n            || this.isEdge()\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative()\n            || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox() && !this.isEdge();\n    }\n\n    /**\n     * Checks whether the browser supports RTPSender.\n     *\n     * @returns {boolean}\n     */\n    supportsRtpSender() {\n        return this.isFirefox() || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks whether the browser supports RTX.\n     *\n     * @returns {boolean}\n     */\n    supportsRtx() {\n        return !this.isFirefox() && !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Whether jitsi-meet supports simulcast on the current browser.\n     * @returns {boolean}\n     */\n    supportsSimulcast() {\n        return this.isChromiumBased() || this.isFirefox()\n            || this.isSafariWithVP8() || this.isReactNative();\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // FIXME: Check if we can use supportsVideoOut and supportsVideoIn. I\n        // leave the old implementation here in order not to brake something.\n\n        // Older versions of Safari using webrtc/adapter do not support video\n        // due in part to Safari only supporting H264 and the bridge sending VP8\n        // Newer Safari support VP8 and other WebRTC features.\n        return !this.isSafariWithWebrtc()\n            || (this.isSafariWithVP8() && this.usesPlanB());\n    }\n\n    /**\n     * Checks if the browser uses plan B.\n     *\n     * @returns {boolean}\n     */\n    usesPlanB() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the browser uses unified plan.\n     *\n     * @returns {boolean}\n     */\n    usesUnifiedPlan() {\n        if (this.isFirefox()) {\n            return true;\n        }\n\n        if (this.isSafariWithVP8()) {\n            // eslint-disable-next-line max-len\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n            // eslint-disable-next-line no-undef\n            return Object.keys(RTCRtpTransceiver.prototype)\n                   .indexOf('currentDirection') > -1;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns whether or not the current browser should be using the new\n     * getUserMedia flow, which utilizes the adapter shim. This method should\n     * be temporary and used while migrating all browsers to use adapter and\n     * the new getUserMedia.\n     *\n     * @returns {boolean}\n     */\n    usesNewGumFlow() {\n        const REQUIRED_CHROME_VERSION = 61;\n\n        if (this.isChrome()) {\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\n        }\n\n        if (this.isFirefox() || this.isSafariWithWebrtc()) {\n            return true;\n        }\n\n        if (this.isChromiumBased()) {\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\n     * getUserMedia flow and Edge.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return this.usesNewGumFlow() || this.isEdge();\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\n     * https://webrtc.org/web-apis/chrome/unified-plan/\n     *\n     * @returns {boolean}\n     */\n    supportsSdpSemantics() {\n        return this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","import browser from '../browser';\nimport { browsers } from 'js-utils';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\n * reported by RTCPeerConnection#getStats mapped by browser.\n */\nconst KEYS_BY_BROWSER_TYPE = {};\n\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsLost': 'packetsLost',\n    'packetsSent': 'packetsSent',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'framerateMean': 'framerateMean',\n    'ip': 'ipAddress',\n    'port': 'portNumber',\n    'protocol': 'transport'\n};\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\n    'sendBandwidth': 'googAvailableSendBandwidth',\n    'remoteAddress': 'googRemoteAddress',\n    'transportType': 'googTransportType',\n    'localAddress': 'googLocalAddress',\n    'activeConnection': 'googActiveConnection',\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsSent': 'packetsSent',\n    'packetsLost': 'packetsLost',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'googFrameHeightReceived': 'googFrameHeightReceived',\n    'googFrameWidthReceived': 'googFrameWidthReceived',\n    'googFrameHeightSent': 'googFrameHeightSent',\n    'googFrameWidthSent': 'googFrameWidthSent',\n    'googFrameRateReceived': 'googFrameRateReceived',\n    'googFrameRateSent': 'googFrameRateSent',\n    'audioInputLevel': 'audioInputLevel',\n    'audioOutputLevel': 'audioOutputLevel',\n    'currentRoundTripTime': 'googRtt',\n    'remoteCandidateType': 'googRemoteCandidateType',\n    'localCandidateType': 'googLocalCandidateType',\n    'ip': 'ip',\n    'port': 'port',\n    'protocol': 'protocol'\n};\nKEYS_BY_BROWSER_TYPE[browsers.EDGE] = {\n    'sendBandwidth': 'googAvailableSendBandwidth',\n    'remoteAddress': 'remoteAddress',\n    'transportType': 'protocol',\n    'localAddress': 'localAddress',\n    'activeConnection': 'activeConnection',\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsSent': 'packetsSent',\n    'packetsLost': 'packetsLost',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'googFrameHeightReceived': 'frameHeight',\n    'googFrameWidthReceived': 'frameWidth',\n    'googFrameHeightSent': 'frameHeight',\n    'googFrameWidthSent': 'frameWidth',\n    'googFrameRateReceived': 'framesPerSecond',\n    'googFrameRateSent': 'framesPerSecond',\n    'audioInputLevel': 'audioLevel',\n    'audioOutputLevel': 'audioLevel',\n    'currentRoundTripTime': 'roundTripTime'\n};\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(\n        peerconnection,\n        audioLevelsInterval,\n        statsInterval,\n        eventEmitter) {\n    // StatsCollector depends entirely on the format of the reports returned by\n    // RTCPeerConnection#getStats. Given that the value of\n    // browser#getName() is very unlikely to change at runtime, it\n    // makes sense to discover whether StatsCollector supports the executing\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\n    // needlessly check a \"static\" condition multiple times very very often and\n    // (2) the lack of support for the executing browser would be discovered and\n    // reported multiple times very very often too late in the execution in some\n    // totally unrelated callback.\n    /**\n     * The browser type supported by this StatsCollector. In other words, the\n     * type of the browser which initialized this StatsCollector\n     * instance.\n     * @private\n     */\n    this._browserType = browser.getName();\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\n\n    if (!keys) {\n        // eslint-disable-next-line no-throw-literal\n        throw `The browser type '${this._browserType}' isn't supported!`;\n    }\n\n    /**\n     * Whether to use the Promise-based getStats API or not.\n     * @type {boolean}\n     */\n    this._usesPromiseGetStats\n        = browser.isSafariWithWebrtc() || browser.isFirefox();\n\n    /**\n     * The function which is to be used to retrieve the value associated in a\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\n     * browser-agnostic name/key.\n     *\n     * @function\n     * @private\n     */\n    this._getStatValue\n        = this._usesPromiseGetStats\n            ? this._defineNewGetStatValueMethod(keys)\n            : this._defineGetStatValueMethod(keys);\n\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/* eslint-enable max-params */\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    const self = this;\n\n    if (startAudioLevelStats) {\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                // Interval updates\n                self.peerconnection.getStats(\n                    report => {\n                        let results = null;\n\n                        if (!report || !report.result\n                            || typeof report.result !== 'function') {\n                            results = report;\n                        } else {\n                            results = report.result();\n                        }\n                        self.currentAudioLevelsReport = results;\n                        if (this._usesPromiseGetStats) {\n                            self.processNewAudioLevelReport();\n                        } else {\n                            self.processAudioLevelReport();\n                        }\n\n                        self.baselineAudioLevelsReport\n                            = self.currentAudioLevelsReport;\n                    },\n                    error => self.errorCallback(error)\n                );\n            },\n            self.audioLevelsIntervalMilis\n        );\n    }\n\n    if (browser.supportsRtpStatistics()) {\n        this.statsIntervalId = setInterval(\n            () => {\n                // Interval updates\n                self.peerconnection.getStats(\n                    report => {\n                        let results = null;\n\n                        if (!report || !report.result\n                            || typeof report.result !== 'function') {\n                            // firefox\n                            results = report;\n                        } else {\n                            // chrome\n                            results = report.result();\n                        }\n\n                        self.currentStatsReport = results;\n                        try {\n                            if (this._usesPromiseGetStats) {\n                                self.processNewStatsReport();\n                            } else {\n                                self.processStatsReport();\n                            }\n                        } catch (e) {\n                            GlobalOnErrorHandler.callErrorHandler(e);\n                            logger.error(`Unsupported key:${e}`, e);\n                        }\n\n                        self.previousStatsReport = self.currentStatsReport;\n                    },\n                    error => self.errorCallback(error)\n                );\n            },\n            self.statsIntervalMilis\n        );\n    }\n};\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Define the function which retrieves the value from a specific report\n    // returned by RTCPeerConnection#getStats associated with a given\n    // browser-specific key.\n    let itemStatByKey;\n\n    switch (this._browserType) {\n    case browsers.CHROME:\n    case browsers.OPERA:\n    case browsers.NWJS:\n    case browsers.ELECTRON:\n        // TODO What about other types of browser which are based on Chrome such\n        // as NW.js? Every time we want to support a new type browser we have to\n        // go and add more conditions (here and in multiple other places).\n        // Cannot we do a feature detection instead of a browser type check? For\n        // example, if item has a stat property of type function, then it's very\n        // likely that whoever defined it wanted you to call it in order to\n        // retrieve the value associated with a specific key.\n        itemStatByKey = (item, key) => item.stat(key);\n        break;\n    case browsers.REACT_NATIVE:\n        // The implementation provided by react-native-webrtc follows the\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\n        // Array in which each element is a key-value pair.\n        itemStatByKey = function(item, key) {\n            let value;\n\n            item.values.some(pair => {\n                if (pair.hasOwnProperty(key)) {\n                    value = pair[key];\n\n                    return true;\n                }\n\n                return false;\n\n            });\n\n            return value;\n        };\n        break;\n    case browsers.EDGE:\n        itemStatByKey = (item, key) => item[key];\n        break;\n    default:\n        itemStatByKey = (item, key) => item[key];\n    }\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => itemStatByKey(item, keyFromName(name));\n};\n\n/**\n * Obtains a stat value from given stat and converts it to a non-negative\n * number. If the value is either invalid or negative then 0 will be returned.\n * @param report\n * @param {string} name\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\n    let value = this._getStatValue(report, name);\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/* eslint-disable no-continue */\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    for (const idx in this.currentStatsReport) {\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n        const now = this.currentStatsReport[idx];\n\n        // The browser API may return \"undefined\" values in the array\n        if (!now) {\n            continue;\n        }\n\n        try {\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\n\n            if (receiveBandwidth || sendBandwidth) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(receiveBandwidth / 1000),\n                    'upload': Math.round(sendBandwidth / 1000)\n                };\n            }\n        } catch (e) { /* not supported*/ }\n\n        if (now.type === 'googCandidatePair') {\n            let active, ip, localCandidateType, localip,\n                remoteCandidateType, rtt, type;\n\n            try {\n                active = getStatValue(now, 'activeConnection');\n                if (!active) {\n                    continue;\n                }\n\n                ip = getStatValue(now, 'remoteAddress');\n                type = getStatValue(now, 'transportType');\n                localip = getStatValue(now, 'localAddress');\n                localCandidateType = getStatValue(now, 'localCandidateType');\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\n            } catch (e) { /* not supported*/ }\n            if (!ip || !type || !localip || active !== 'true') {\n                continue;\n            }\n\n            // Save the address unless it has been saved already.\n            const conferenceStatsTransport = this.conferenceStats.transport;\n\n            if (!conferenceStatsTransport.some(\n                    t =>\n                        t.ip === ip\n                            && t.type === type\n                            && t.localip === localip)) {\n                conferenceStatsTransport.push({\n                    ip,\n                    type,\n                    localip,\n                    p2p: this.peerconnection.isP2P,\n                    localCandidateType,\n                    remoteCandidateType,\n                    rtt\n                });\n            }\n            continue;\n        }\n\n        if (now.type === 'candidatepair') {\n            // we need succeeded and selected pairs only\n            if (now.state !== 'succeeded' || !now.selected) {\n                continue;\n            }\n\n            const local = this.currentStatsReport[now.localCandidateId];\n            const remote = this.currentStatsReport[now.remoteCandidateId];\n\n            this.conferenceStats.transport.push({\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\n                type: local.transport,\n                localip: `${local.ipAddress}:${local.portNumber}`,\n                p2p: this.peerconnection.isP2P,\n                localCandidateType: local.candidateType,\n                remoteCandidateType: remote.candidateType\n            });\n        }\n\n        // NOTE: Edge's proprietary stats via RTCIceTransport.msGetStats().\n        if (now.msType === 'transportdiagnostics') {\n            this.conferenceStats.transport.push({\n                ip: now.remoteAddress,\n                type: now.protocol,\n                localip: now.localAddress,\n                p2p: this.peerconnection.isP2P\n            });\n        }\n\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\n            continue;\n        }\n\n        // NOTE: In Edge, stats with type \"inboundrtp\" and \"outboundrtp\" are\n        // completely useless, so ignore them.\n        if (browser.isEdge()\n            && (now.type === 'inboundrtp' || now.type === 'outboundrtp')) {\n            continue;\n        }\n\n        const before = this.previousStatsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        // If type=\"track\", take the first SSRC from ssrcIds.\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before || !ssrc) {\n            continue;\n        }\n\n        // isRemote is available only in FF and is ignored in case of chrome\n        // according to the spec\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\n        // when isRemote is true indicates that the measurements were done at\n        // the remote endpoint and reported in an RTCP RR/XR.\n        // Fixes a problem where we are calculating local stats wrong adding\n        // the sent bytes to the local download bitrate.\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\n        // property.\n        // Edge uses the new format, so skip this check.\n        if (!browser.isEdge()\n                && (now.isRemote === true || now.remoteSource === true)) {\n            continue;\n        }\n\n        let ssrcStats = this.ssrc2stats.get(ssrc);\n\n        if (!ssrcStats) {\n            ssrcStats = new SsrcStats();\n            this.ssrc2stats.set(ssrc, ssrcStats);\n        }\n\n        let isDownloadStream = true;\n        let key = 'packetsReceived';\n        let packetsNow = getStatValue(now, key);\n\n        if (typeof packetsNow === 'undefined'\n            || packetsNow === null || packetsNow === '') {\n            isDownloadStream = false;\n            key = 'packetsSent';\n            packetsNow = getStatValue(now, key);\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\n                logger.warn('No packetsReceived nor packetsSent stat found');\n            }\n        }\n        if (!packetsNow || packetsNow < 0) {\n            packetsNow = 0;\n        }\n\n        const packetsBefore = this.getNonNegativeStat(before, key);\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n        const packetsLostNow\n            = this.getNonNegativeStat(now, 'packetsLost');\n        const packetsLostBefore\n            = this.getNonNegativeStat(before, 'packetsLost');\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n        ssrcStats.setLoss({\n            packetsTotal: packetsDiff + packetsLostDiff,\n            packetsLost: packetsLostDiff,\n            isDownloadStream\n        });\n\n        const bytesReceivedNow\n            = this.getNonNegativeStat(now, 'bytesReceived');\n        const bytesReceivedBefore\n            = this.getNonNegativeStat(before, 'bytesReceived');\n        const bytesReceived\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\n\n        let bytesSent = 0;\n\n        // TODO: clean this mess up!\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\n\n        if (typeof nowBytesTransmitted === 'number'\n            || typeof nowBytesTransmitted === 'string') {\n            nowBytesTransmitted = Number(nowBytesTransmitted);\n            if (!isNaN(nowBytesTransmitted)) {\n                byteSentStats[ssrc] = nowBytesTransmitted;\n                if (nowBytesTransmitted > 0) {\n                    bytesSent = nowBytesTransmitted\n                        - getStatValue(before, 'bytesSent');\n                }\n            }\n        }\n        bytesSent = Math.max(0, bytesSent);\n\n        const timeMs = now.timestamp - before.timestamp;\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\n\n        if (timeMs > 0) {\n            // TODO is there any reason to round here?\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\n        }\n\n        ssrcStats.addBitrate({\n            'download': bitrateReceivedKbps,\n            'upload': bitrateSentKbps\n        });\n\n        const resolution = {\n            height: null,\n            width: null\n        };\n\n        try {\n            let height, width;\n\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\n                resolution.height = height;\n                resolution.width = width;\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\n                resolution.height = height;\n                resolution.width = width;\n            }\n        } catch (e) { /* not supported*/ }\n\n        // Tries to get frame rate\n        let frameRate;\n\n        try {\n            frameRate = getStatValue(now, 'googFrameRateReceived')\n                || getStatValue(now, 'googFrameRateSent') || 0;\n        } catch (e) {\n            // if it fails with previous properties(chrome),\n            // let's try with another one (FF)\n            try {\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\n            } catch (err) { /* not supported*/ }\n        }\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n        if (resolution.height && resolution.width) {\n            ssrcStats.setResolution(resolution);\n        } else {\n            ssrcStats.setResolution(null);\n        }\n    }\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'transport': this.conferenceStats.transport\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n\n    for (const idx in this.currentAudioLevelsReport) {\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n\n        const now = this.currentAudioLevelsReport[idx];\n\n        if (now.type !== 'ssrc' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.baselineAudioLevelsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before) {\n            logger.warn(`${ssrc} not enough data`);\n            continue;\n        }\n\n        if (!ssrc) {\n            if ((Date.now() - now.timestamp) < 3000) {\n                logger.warn('No ssrc: ');\n            }\n            continue;\n        }\n\n        // Audio level\n        let audioLevel;\n\n        try {\n            audioLevel\n                = getStatValue(now, 'audioInputLevel')\n                    || getStatValue(now, 'audioOutputLevel');\n        } catch (e) { /* not supported*/\n            logger.warn('Audio Levels are not available in the statistics.');\n            clearInterval(this.audioLevelsIntervalId);\n\n            return;\n        }\n\n        if (audioLevel) {\n            let isLocal;\n\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\n            if (now.type === 'ssrc') {\n                isLocal = !getStatValue(now, 'packetsReceived');\n\n            // If type=\"track\", check remoteSource boolean property.\n            } else {\n                isLocal = !now.remoteSource;\n            }\n\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\n            // 0..1 range (0 == silence). However browsers don't behave that\n            // way so we must convert it to 0..1.\n            //\n            // In Edge the range is -100..0 (-100 == silence) measured in dB,\n            // so convert to linear. The levels are set to 0 for remote tracks,\n            // so don't convert those, since 0 means \"the maximum\" in Edge.\n            if (browser.isEdge()) {\n                audioLevel = audioLevel < 0 ? Math.pow(10, audioLevel / 20) : 0;\n\n            // TODO: Can't find specs about what this value really is, but it\n            // seems to vary between 0 and around 32k.\n            } else {\n                audioLevel = audioLevel / 32767;\n            }\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    }\n};\n\n/* eslint-enable no-continue */\n\n/**\n * New promised based getStats report processing.\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\n * frameRate stat is missing and calculating it using framesSent,\n * gives values double the values seen in webrtc-internals.\n * https://w3c.github.io/webrtc-stats/\n */\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\n * Promised based getStats.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => item[keyFromName(name)];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing new getStats logic.\n */\nStatsCollector.prototype.processNewStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n\n        // RTCIceCandidatePairStats\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair'\n            && now.nominated\n            && now.state === 'succeeded') {\n\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate\n                = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate\n                = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            // safari currently does not provide ice candidates in stats\n            if (remoteUsedCandidate && localUsedCandidate) {\n                // FF uses non-standard ipAddress, portNumber, transport\n                // instead of ip, port, protocol\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\n                const localPort = getStatValue(localUsedCandidate, 'port');\n\n                const localIp = `${localIpAddress}:${localPort}`;\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(\n                        t =>\n                            t.ip === ip\n                            && t.type === type\n                            && t.localip === localIp)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localIp,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow\n                = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore\n                = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff\n                = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            if (now.type === 'inbound-rtp') {\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(\n                                    now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n\n                // RTCInboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\n                // TODO: can we use framesDecoded for frame rate, available\n                // in chrome\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(\n                                now, before, 'bytesSent')\n                });\n\n                // RTCOutboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\n                // TODO: can we use framesEncoded for frame rate, available\n                // in chrome\n            }\n\n            // FF has framerateMean out of spec\n            const framerateMean = now.framerateMean;\n\n            if (framerateMean) {\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\n            }\n\n        // track for resolution\n        // RTCVideoHandlerStats\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track') {\n\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n\n            // Tries to get frame rate\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                // we need to calculate it\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore\n                            = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            const trackIdentifier = now.trackIdentifier;\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            } else {\n                ssrcStats.setResolution(null);\n            }\n        }\n    });\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processNewAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n/**\n * End new promised based getStats processing methods.\n */\n","\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(timeout = 5000) {\n        return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room\n                    = xmpp.createRoom(this.options.name, this.options.config);\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nclass MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.rooms[roomJid]) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // XXX What are the semantics of the return value? Why is it sometimes\n        // undefined and sometimes a boolean?\n        if (!room) {\n            return;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n}\n\n/**\n *\n * @param XMPP\n */\nexport default function(XMPP) {\n    Strophe.addConnectionPlugin('emuc', new MucConnectionPlugin(XMPP));\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport Listenable from '../util/Listenable';\nimport Settings from '../settings/Settings';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param connection\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room. This is intended to be used only by\n     * jitsi-meet-spot.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.enableStatsID) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': Settings.callStatsUserName\n            });\n        }\n\n        // We need to broadcast 'videomuted' status from the beginning, cause\n        // Jicofo makes decisions based on that. Initialize it with 'false'\n        // here.\n        this.addVideoInfoToPresence(false);\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n    }\n\n    /**\n     * Joins the chat room.\n     * @param password\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password) {\n        this.password = password;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info('Conference focus disabled');\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        const self = this;\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: self.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            self.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n            }\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, jid);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                memberOfThis.isFocus = true;\n                this._initFocus(from, jid);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param mucJid the jid of the focus in the muc\n     */\n    _initFocus(from, mucJid) {\n        this.focusMucJid = from;\n\n        logger.info(`Ignore focus: ${from}, real JID: ${mucJid}`);\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendMessage(message, elementName, nickname) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendPrivateMessage(id, message, elementName, nickname) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>destroy').length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n\n        if (!isSelfPresence) {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        } else if (membersKeys.length > 0) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        }\n\n        if (isKick && this.myroomjid === from) {\n            this.eventEmitter.emit(XMPPEvents.KICKED);\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const nick\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\n                .text()\n            || Strophe.getResourceFromJid(from);\n\n        const txt = $(msg).find('>body').text();\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED,\n                $(msg).find('>text').text(), txt);\n\n            return true;\n        }\n\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid\n                && $(msg)\n                    .find(\n                        '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                            + '>status[code=\"104\"]')\n                    .length) {\n            this.discoRoomInfo();\n        }\n        const jsonMessage = $(msg).find('>json-message').text();\n        const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n        // We emit this event if the message is a valid json, and is not\n        // delivered after a delay, i.e. stamp is undefined.\n        // e.g. - subtitles should not be displayed if delayed.\n        if (parsedJson && stamp === undefined) {\n            this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                from, parsedJson);\n\n            return;\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    kick(jid) {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t('You have been kicked.').up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    // FIXME: is muc#roomconfig_passwordprotectedroom required?\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param key\n     * @param values\n     */\n    addToPresence(key, values) {\n        values.tagName = key;\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n    }\n\n    /**\n     *\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setVideoMute(mute, callback) {\n        this.sendVideoInfoPresence(mute);\n        if (callback) {\n            callback(mute);\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setAudioMute(mute, callback) {\n        return this.sendAudioInfoPresence(mute, callback);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        this.removeFromPresence('audiomuted');\n        this.addToPresence(\n            'audiomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    sendAudioInfoPresence(mute, callback) {\n        this.addAudioInfoToPresence(mute);\n        if (this.connection) {\n            this.sendPresence();\n        }\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        this.removeFromPresence('videomuted');\n        this.addToPresence(\n            'videomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute);\n        if (!this.connection) {\n            return;\n        }\n        this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: false, // unmuted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     */\n    muteParticipant(jid, mute) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: 'http://jitsi.org/jitmeet/audio',\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS);\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $, Promise */\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nimport { $iq, Strophe } from 'strophe.js';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\n    // it will be enabled automatically if focus detects the component through\n    // service discovery.\n    this.sipGatewayEnabled\n        = this.options.connection.hosts\n            && this.options.connection.hosts.call_control !== undefined;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    logger.info(`Someone left is it focus ? ${jid}`);\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n    if (this.options.connection.enforcedBridge !== undefined) {\n        elem.c(\n            'property', {\n                name: 'enforcedBridge',\n                value: this.options.connection.enforcedBridge\n            }).up();\n    }\n\n    // Tell the focus we have Jigasi configured\n    if (this.options.connection.hosts !== undefined\n        && this.options.connection.hosts.call_control !== undefined) {\n        elem.c(\n            'property', {\n                name: 'call_control',\n                value: this.options.connection.hosts.call_control\n            }).up();\n    }\n    if (config.channelLastN !== undefined) {\n        elem.c(\n            'property', {\n                name: 'channelLastN',\n                value: config.channelLastN\n            }).up();\n    }\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.enableTcc !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableTcc',\n                    value: Boolean(config.enableTcc)\n                }).up();\n    }\n    if (config.enableRemb !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableRemb',\n                    value: Boolean(config.enableRemb)\n                }).up();\n    }\n    if (config.minParticipants !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'minParticipants',\n                    value: config.minParticipants\n                }).up();\n    }\n\n    elem.c(\n        'property', {\n            name: 'enableLipSync',\n            value: this.options.connection.enableLipSync !== false\n        }).up();\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n    if (config.testing && config.testing.octo\n        && typeof config.testing.octo.probability === 'number') {\n        if (Math.random() < config.testing.octo.probability) {\n            elem.c(\n                'property', {\n                    name: 'octo',\n                    value: true\n                }).up();\n        }\n    }\n\n    let openSctp;\n\n    switch (this.options.conference.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        openSctp = true;\n        break;\n    case 'websocket':\n        openSctp = false;\n        break;\n    }\n\n    if (openSctp && !browser.supportsDataChannels()) {\n        openSctp = false;\n    }\n\n    elem.c(\n        'property', {\n            name: 'openSctp',\n            value: openSctp\n        }).up();\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    if (this.options.conference.stereo !== undefined) {\n        elem.c(\n            'property', {\n                name: 'stereo',\n                value: this.options.conference.stereo\n            }).up();\n    }\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\n        elem.c(\n            'property', {\n                name: 'useRoomAsSharedDocumentName',\n                value: this.options.conference.useRoomAsSharedDocumentName\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if focus has auto-detected Jigasi component(this will be also\n    // included if we have passed our host from the config)\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $, __filename */\n\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\nimport Statistics from '../statistics/statistics';\n\nimport JingleSessionPC from './JingleSessionPC';\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nclass JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn('invalid session id', iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            if (startMuted && startMuted.length > 0) {\n                const audioMuted = startMuted.attr('audio');\n                const videoMuted = startMuted.attr('video');\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n\n            logger.info(\n                `Marking session from ${fromJid\n                } as ${isP2P ? '' : '*not*'} P2P`);\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n                    isP2P ? this.p2pIceConfig : this.jvbIceConfig,\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\n                sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            this.eventEmitter.emit(\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            this.eventEmitter.emit(\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\n                sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.info('(TIME) Start transport replace', now);\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success!', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        case 'addsource': // FIXME: proprietary, un-jingleish\n        case 'source-add': // FIXME: proprietary\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'removesource': // FIXME: proprietary, un-jingleish\n        case 'source-remove': // FIXME: proprietary\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.connection.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n            res => {\n                const iceservers = [];\n\n                $(res).find('>services>service').each((idx, el) => {\n                    // eslint-disable-next-line no-param-reassign\n                    el = $(el);\n                    const dict = {};\n                    const type = el.attr('type');\n\n                    switch (type) {\n                    case 'stun':\n                        dict.url = `stun:${el.attr('host')}`;\n                        if (el.attr('port')) {\n                            dict.url += `:${el.attr('port')}`;\n                        }\n                        iceservers.push(dict);\n                        break;\n                    case 'turn':\n                    case 'turns': {\n                        dict.url = `${type}:`;\n                        const username = el.attr('username');\n\n                        // https://code.google.com/p/webrtc/issues/detail\n                        // ?id=1508\n\n                        if (username) {\n                            const match\n                                = navigator.userAgent.match(\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\n\n                            if (match && parseInt(match[2], 10) < 28) {\n                                dict.url += `${username}@`;\n                            } else {\n                                // only works in M28\n                                dict.username = username;\n                            }\n                        }\n                        dict.url += el.attr('host');\n                        const port = el.attr('port');\n\n                        if (port) {\n                            dict.url += `:${el.attr('port')}`;\n                        }\n                        const transport = el.attr('transport');\n\n                        if (transport && transport !== 'udp') {\n                            dict.url += `?transport=${transport}`;\n                        }\n\n                        dict.credential = el.attr('password')\n                                || dict.credential;\n                        iceservers.push(dict);\n                        break;\n                    }\n                    }\n                });\n\n                const options = this.xmpp.options;\n\n                if (options.useStunTurn) {\n                    // we want to filter and leave only tcp/turns candidates\n                    // which make sense for the jvb connections\n                    this.jvbIceConfig.iceServers\n                        = iceservers.filter(s => s.url.startsWith('turns'));\n                }\n\n                if (options.p2p && options.p2p.useStunTurn) {\n                    this.p2pIceConfig.iceServers = iceservers;\n                }\n\n            }, err => {\n                logger.warn('getting turn credentials failed', err);\n                logger.warn('is mod_turncredentials or similar installed?');\n            });\n\n        // implement push?\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n\n/**\n *\n * @param XMPP\n * @param eventEmitter\n * @param iceConfig\n */\nexport default function initJingle(XMPP, eventEmitter, iceConfig) {\n    Strophe.addConnectionPlugin(\n        'jingle',\n        new JingleConnectionPlugin(XMPP, eventEmitter, iceConfig));\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {Strophe.Connection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\n     * @param {Object} iceConfig the ICE servers config object as defined by\n     * the WebRTC. Passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isInitiator) {\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.iceConfig = iceConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Ping every 10 sec\n */\nconst PING_INTERVAL = 10000;\n\n/**\n * Ping timeout error after 15 sec of waiting.\n */\nconst PING_TIMEOUT = 15000;\n\n/**\n * Will close the connection after 3 consecutive ping errors.\n */\nconst PING_THRESHOLD = 3;\n\n/**\n * The number of timestamps of send pings to keep.\n * The current value is 2 minutes.\n * @type {number} number of timestamps.\n */\nconst PING_TIMESTAMPS_TO_KEEP = 120000 / PING_INTERVAL;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nclass PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Contructs new object\n     * @param {XMPP} xmpp the xmpp module.\n     * @constructor\n     */\n    constructor(xmpp) {\n        super();\n        this.failedPings = 0;\n        this.xmpp = xmpp;\n        this.pingExecIntervals = new Array(PING_TIMESTAMPS_TO_KEEP);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ(iq, success, error, timeout);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     * @param interval task interval in ms.\n     */\n    startInterval(remoteJid, interval = PING_INTERVAL) {\n        if (this.intervalId) {\n            const errmsg = 'Ping task scheduled already';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n\n            return;\n        }\n        this.intervalId = window.setInterval(() => {\n            this.ping(remoteJid, () => {\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= PING_THRESHOLD) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n\n                    // FIXME it doesn't help to disconnect when 3rd PING\n                    // times out, it only stops Strophe from retrying.\n                    // Not really sure what's the right thing to do in that\n                    // situation, but just closing the connection makes no\n                    // sense.\n                    // self.connection.disconnect();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, PING_TIMEOUT);\n        }, interval);\n        logger.info(`XMPP pings will be sent every ${interval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > PING_TIMESTAMPS_TO_KEEP) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= PING_INTERVAL;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n\n/**\n *\n * @param xmpp\n */\nexport default function(xmpp) {\n    Strophe.addConnectionPlugin('ping', new PingConnectionPlugin(xmpp));\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nclass RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.versionToCapabilities = Object.create(null);\n        this.jidToVersion = Object.create(null);\n        this.version = '';\n        this.rooms = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\n\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    addFeature(feature, submit = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    removeFeature(feature, submit = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Returns a set with the features for a participant.\n     * @param {String} jid the jid of the participant\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(jid, timeout = 5000) {\n        const user\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\n\n        if (!user || !(user.version in this.versionToCapabilities)) {\n            const node = user ? `${user.node}#${user.version}` : null;\n\n            return this._getDiscoInfo(jid, node, timeout)\n                .then(({ features }) => {\n                    if (user) {\n                        // TODO: Maybe use the version + node + hash as keys?\n                        this.versionToCapabilities[user.version] = features;\n                    }\n\n                    return features;\n                });\n        }\n\n        return Promise.resolve(this.versionToCapabilities[user.version]);\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, timeout = 5000) {\n        return this._getDiscoInfo(jid, null, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                const features = new Set();\n                const identities = new Set();\n\n                $(response)\n                    .find('>query>feature')\n                    .each(\n                        (_, el) => features.add(el.getAttribute('var')));\n                $(response)\n                    .find('>query>identity')\n                    .each(\n                        (_, el) => identities.add({\n                            type: el.getAttribute('type'),\n                            name: el.getAttribute('name'),\n                            category: el.getAttribute('category')\n                        }));\n                resolve({\n                    features,\n                    identities });\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n        this._fixChatRoomPresenceMap(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addToPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n        this.submit();\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        const identities\n          = this.disco._identities.sort(compareIdentities).reduce(\n              (accumulatedValue, identity) =>\n                  `${\n                      IDENTITY_PROPERTIES.reduce(\n                          (tmp, key, idx) =>\n                              tmp\n                                  + (idx === 0 ? '' : '/')\n                                  + identity[key],\n                          '')\n                  }<`,\n              '');\n        const features\n            = this.disco._features.sort().reduce(\n                (tmp, feature) => `${tmp + feature}<`, '');\n\n        this.version = b64_sha1(identities + features);\n        this._notifyVersionChanged();\n    }\n\n    /**\n     * Parses the \"c\" xml node from presence.\n     * @param {DOMElement} stanza the presence packet\n     */\n    _handleCaps(stanza) {\n        const from = stanza.getAttribute('from');\n        const caps = stanza.querySelector('c');\n        const version = caps.getAttribute('ver');\n        const node = caps.getAttribute('node');\n        const oldVersion = this.jidToVersion[from];\n\n        this.jidToVersion[from] = { version,\n            node };\n        if (oldVersion && oldVersion.version !== version) {\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n                from);\n        }\n\n        // return true to not remove the handler from Strophe\n        return true;\n    }\n\n    /**\n     * Removes entry from this.jidToVersion map.\n     * @param {String} jid the jid to be removed.\n     */\n    _removeJidToVersionEntry(jid) {\n        if (jid in this.jidToVersion) {\n            delete this.jidToVersion[jid];\n        }\n    }\n}\n","const logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n *\n * @param localAudio\n * @param peerConnection\n */\nfunction JitsiDTMFManager(localAudio, peerConnection) {\n    const audioTrack = localAudio.getTrack();\n\n    if (!audioTrack) {\n        throw new Error('Failed to initialize DTMFSender: no audio track.');\n    }\n    this.dtmfSender\n        = peerConnection.peerconnection.createDTMFSender(audioTrack);\n    logger.debug('Initialized DTMFSender');\n}\n\nJitsiDTMFManager.prototype.sendTones = function(tones, duration, pause) {\n    this.dtmfSender.insertDTMF(tones, duration || 200, pause || 200);\n};\n\nmodule.exports = JitsiDTMFManager;\n\n","import * as JitsiConferenceEvents from '../JitsiConferenceEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} eventEmitter EventEmitter instance.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError(\n                'At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError(\n                'Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            // Create a WebSocket instance.\n            const ws = new WebSocket(wsUrl);\n\n            // Handle the WebSocket.\n            this._handleChannel(ws);\n            this._mode = 'websocket';\n        }\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        const jsonObject = {\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        };\n\n        this._send(jsonObject);\n        logger.log(`Channel lastN set to: ${value}`);\n    }\n\n    /**\n     * Sends a \"pinned endpoint changed\" message via the channel.\n     * @param {string} endpointId The id of the pinned endpoint.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendPinnedEndpointMessage(endpointId) {\n        logger.log(\n            'sending pinned changed notification to the bridge for endpoint ',\n            endpointId);\n\n        this._send({\n            colibriClass: 'PinnedEndpointChangedEvent',\n            pinnedEndpoint: endpointId || null\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(\n            'sending selected changed notification to the bridge for endpoints',\n            endpointIds);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log('sending a ReceiverVideoConstraint message with '\n            + `a maxFrameHeight of ${maxFrameHeightPixels} pixels`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = error => {\n            logger.error('Channel error:', error);\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to parse channel message as JSON: ',\n                    data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                // Endpoint ID from the Videobridge.\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\n\n                logger.info(\n                    'Channel new dominant speaker event: ',\n                    dominantSpeakerEndpoint);\n                emitter.emit(\n                    RTCEvents.DOMINANT_SPEAKER_CHANGED,\n                    dominantSpeakerEndpoint);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(\n                    `Endpoint connection status changed: ${endpoint} active ? ${\n                        isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n                    endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(\n                    RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from,\n                    obj.msgPayload);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs.\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info('Channel new last-n event: ',\n                    lastNEndpoints, obj);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                    lastNEndpoints, obj);\n\n                break;\n            }\n            case 'SelectedUpdateEvent': {\n                const isSelected = obj.isSelected;\n\n                logger.info(`SelectedUpdateEvent isSelected? ${isSelected}`);\n                emitter.emit(RTCEvents.IS_SELECTED_CHANGED, isSelected);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = () => {\n            logger.info('Channel closed');\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/* global __filename, RTCSessionDescription */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport LocalSdpMunger from './LocalSdpMunger';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RtxModifier from '../xmpp/RtxModifier';\n\n// FIXME SDP tools should end up in some kind of util module\nimport SDP from '../xmpp/SDP';\nimport SdpConsistency from '../xmpp/SdpConsistency';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\n\nconst logger = getLogger(__filename);\nconst SIMULCAST_LAYERS = 3;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\nconst SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used\n * in a peer to peer connection\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\n * the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\n * @param {boolean} options.enableFirefoxSimulcast if set to 'true' will enable\n * experimental simulcast support on Firefox.\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\n *      disabled by removing it from the SDP.\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\n * over other video codecs.\n * @param {boolean} options.enableLayerSuspension if set to 'true', we will\n * cap the video send bitrate when we are told we have not been selected by\n * any endpoints (and therefore the non-thumbnail streams are not in use).\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        iceConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = true;\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    this.peerconnection\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, constraints);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n    const Interop = require('@jitsi/sdp-interop').Interop;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast({ numOfLayers: SIMULCAST_LAYERS,\n        explodeRemoteSimulcast: false });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this);\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n    this.peerconnection.onaddstream\n        = event => this._remoteStreamAdded(event.stream);\n    this.peerconnection.onremovestream\n        = event => this._remoteStreamRemoved(event.stream);\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats(stats => {\n                if (stats.result\n                    && typeof stats.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            }, () => {\n\n                // empty error callback\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\n        mediaType) {\n    let mediaTransferActive = true;\n\n    if (mediaType === MediaType.AUDIO) {\n        mediaTransferActive = this.audioTransferActive;\n    } else if (mediaType === MediaType.VIDEO) {\n        mediaTransferActive = this.videoTransferActive;\n    }\n    if (mediaTransferActive) {\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\n    }\n\n    return 'inactive';\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast\n        && browser.supportsSimulcast()\n\n        // Firefox has been added as supporting simulcast, but it is\n        // experimental so we only want to do it for firefox if the config\n        // option is set.  Unfortunately, browser::supportsSimulcast()\n        // doesn't have a reference to the config options, so we have\n        // to do it here\n        && (!browser.isFirefox()\n            || this.options.enableFirefoxSimulcast);\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error('On peerMuteChanged - no endpoint ID');\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased() || browser.isEdge()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    logger.info(`${this} remote track added:`, streamId, mediaType);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = new SDP(this.remoteDescription.sdp);\n    const mediaLines\n        = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No media lines for type ${\n                    mediaType} found in remote SDP for remote track: ${\n                    streamId}`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC lines for streamId ${\n                    streamId} for remote track, media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for: ${\n                    trackSsrc} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    logger.log(`${this} associated ssrc`, ownerEndpointId, trackSsrc);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `${this}: no peer media info available for ${\n                    ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from\n        // 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(\n            `${this} ignored duplicated remote track added event for: `\n                + `${ownerEndpointId}, ${mediaType}`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(\n            `${this} overwriting remote track for`\n                + `${ownerEndpointId} ${mediaType}`);\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(\n            `${this} Removed track not found for msid: ${streamId},\n             track id: ${trackId}`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n\n    logger.debug(\n        `${this} removed remote tracks for ${owner} count: ${\n            removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * @typedef {Object} SSRCGroupInfo\n * @property {Array<number>} ssrcs group's SSRCs\n * @property {string} semantics\n */\n/**\n * @typedef {Object} TrackSSRCInfo\n * @property {Array<number>} ssrcs track's SSRCs\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\n */\n/**\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\n * @param {Object} desc the WebRTC SDP instance.\n * @return {Map<string,TrackSSRCInfo>}\n */\nfunction extractSSRCMap(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    for (const mLine of session.media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs\n                        = group.ssrcs.split(' ').map(\n                            ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n        for (const ssrc of mLine.ssrcs) {\n            if (ssrc.attribute !== 'msid') {\n                continue; // eslint-disable-line no-continue\n            }\n\n            const msid = ssrc.value;\n            let ssrcInfo = ssrcMap.get(msid);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid\n                };\n                ssrcMap.set(msid, ssrcInfo);\n            }\n\n            const ssrcNumber = ssrc.id;\n\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n}\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `recvonly-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n */\nconst enforceSendRecv = function(localDescription) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia('audio');\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\n        audioMedia.direction = 'sendrecv';\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\n        videoMedia.direction = 'sendrecv';\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * NOTE: unlike plan B simulcast, the ssrcs in this inject ssrc-group will\n * NOT necessarily be in order of quality (low to high) because:\n * a) when translating between unified plan and plan b the order of the ssrcs\n * is not preserved and\n * b) it isn't guaranteed that firefox will give them to us in order to begin\n * with\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        if (video.simulcast_03) {\n            const ssrcs = [];\n\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n            video.ssrcGroups = video.ssrcGroups || [];\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug('getLocalDescription no localDescription found');\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        }\n\n        if (browser.doesVideoMuteByStreamRemove()) {\n            desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n            logger.debug(\n                'getLocalDescription::postTransform (munge local SDP)', desc);\n        }\n\n        // What comes out of this getter will be signalled over Jingle to\n        // the other peer, so we need to make sure the media direction is\n        // 'sendrecv' because we won't change the direction later and don't want\n        // the other peer to think we can't send or receive.\n        //\n        // Note that the description we set in chrome does have the accurate\n        // direction (e.g. 'recvonly'), since that is technically what is\n        // happening (check setLocalDescription impl).\n        desc = enforceSendRecv(desc);\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace(\n                'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n        }\n\n        return desc || {};\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n */\nTraceablePeerConnection.prototype.addTrack = function(track) {\n    const rtcId = track.rtcId;\n\n    logger.info(`add ${track} to: ${this}`);\n\n    if (this.localTracks.has(rtcId)) {\n        logger.error(`${track} is already in ${this}`);\n\n        return;\n    }\n\n    this.localTracks.set(rtcId, track);\n\n    const webrtcStream = track.getOriginalStream();\n\n    if (webrtcStream) {\n        this._addStream(webrtcStream);\n\n    // It's not ok for a track to not have a WebRTC stream if:\n    } else if (!browser.doesVideoMuteByStreamRemove()\n                || track.isAudioTrack()\n                || (track.isVideoTrack() && !track.isMuted())) {\n        logger.error(`${this} no WebRTC stream for: ${track}`);\n    }\n\n    // Muted video tracks do not have WebRTC stream\n    if (browser.doesVideoMuteByStreamRemove()\n            && track.isVideoTrack() && track.isMuted()) {\n        const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n        this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n        const simGroup\n            = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n        if (simGroup) {\n            this.simulcast.setSsrcCache(simGroup.ssrcs);\n        }\n        const fidGroups\n            = ssrcInfo.groups.filter(\n                groupInfo => groupInfo.semantics === 'FID');\n\n        if (fidGroups) {\n            const rtxSsrcMapping = new Map();\n\n            fidGroups.forEach(fidGroup => {\n                const primarySsrc = fidGroup.ssrcs[0];\n                const rtxSsrc = fidGroup.ssrcs[1];\n\n                rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n            });\n            this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n        }\n    }\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {boolean} <tt>true</tt> if the state of underlying PC has changed and\n * the renegotiation is required or <tt>false</tt> otherwise.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return false;\n    }\n\n    logger.info(`Adding ${track} as unmute to ${this}`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\n\n        return false;\n    }\n    this._addStream(webRtcStream);\n\n    return true;\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    if (browser.supportsRtpSender()) {\n        this._handleSenderRemoveStream(mediaStream);\n    } else {\n        this.peerconnection.removeStream(mediaStream);\n    }\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(\n            `${methodName}: ${localTrack} does not belong to ${this}`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        if (browser.supportsRtpSender()) {\n            this._handleSenderRemoveStream(webRtcStream);\n        } else {\n            this.peerconnection.removeStream(webRtcStream);\n        }\n    }\n};\n\n/**\n * Returns the sender corresponding to the given MediaStream.\n *\n * @param {MediaStream} stream - The media stream used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByStream = function(stream) {\n    const track = stream.getTracks()[0];\n\n    if (!track) {\n        logger.error('Cannot find sender: no tracks.');\n\n        return;\n    }\n\n    // Find the right sender (for audio or video)\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (browser.supportsRtpSender() && oldTrack && newTrack) {\n        // Add and than remove stream in FF leads to wrong local SDP. In order\n        // to workaround the issue we need to use sender.replaceTrack().\n        const sender = this.findSenderByStream(oldTrack.getOriginalStream());\n        const stream = newTrack.getOriginalStream();\n\n        if (sender && stream) {\n            const track = stream.getTracks()[0];\n\n            if (track) {\n                return sender.replaceTrack(track, stream).then(() => {\n                    // Since there is no need to do renegotiations we need to\n                    // fix all ssrc-msid mappings here.\n                    // NOTE: after sender.replaceTrack the sdp will remain the\n                    // same but the stream attach to the new JitsiLocalTrack\n                    // will have different msid. Luckily on FF we are not doing\n                    // all the transformations related to video mute.\n\n                    const ssrc = this.localSSRCs.get(oldTrack.rtcId);\n\n                    this.localTracks.delete(oldTrack.rtcId);\n                    this.localSSRCs.delete(oldTrack.rtcId);\n                    this._addedStreams\n                        = this._addedStreams.filter(s => s !== stream);\n\n                    this.localTracks.set(newTrack.rtcId, newTrack);\n\n                    // Override the msid of JitsiLocalTrack in order to be\n                    // consistent with the SDP values.\n                    newTrack.storedMSID = oldTrack.storedMSID;\n                    this._addedStreams.push(stream);\n\n                    this.localSSRCs.set(newTrack.rtcId, ssrc);\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n                        newTrack,\n                        extractPrimarySSRC(ssrc));\n\n                    return false;\n                });\n            }\n        }\n    }\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        this.addTrack(newTrack);\n    }\n\n    return Promise.resolve(true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {boolean} <tt>true</tt> if the underlying PeerConnection's state has\n * changed and the renegotiation is required or <tt>false</tt> otherwise.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return false;\n    }\n\n    if (webRtcStream) {\n        logger.info(\n            `Removing ${localTrack} as mute from ${this}`);\n        this._removeStream(webRtcStream);\n\n        return true;\n    }\n\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\n\n    return false;\n};\n\n/**\n * Remove stream handling for browsers supporting RTPSender\n * @param stream: webrtc media stream\n */\nTraceablePeerConnection.prototype._handleSenderRemoveStream = function(\n        stream) {\n    if (!stream) {\n        // There is nothing to be changed\n        return;\n    }\n\n    const sender = this.findSenderByStream(stream);\n\n    if (sender) {\n        this.peerconnection.removeTrack(sender);\n    } else {\n        logger.log('Cannot remove tracks: no RTPSender.');\n    }\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {Object} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\n        localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia('audio');\n\n    if (audioMedia) {\n        const desiredAudioDirection\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"audio\" media found int the local description');\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia) {\n        const desiredVideoDirection\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(\n                `Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"video\" media found in the local description');\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    if (this.options.disableH264 || this.options.preferH264) {\n        const parsedSdp = transform.parse(localSdp.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        if (this.options.disableH264) {\n            SDPUtil.stripVideoCodec(videoMLine, 'h264');\n        } else {\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\n        }\n\n        localSdp = new RTCSessionDescription({\n            type: localSdp.type,\n            sdp: transform.write(parsedSdp)\n        });\n\n        this.trace('setLocalDescription::postTransform (H264)',\n            dumpSDP(localSdp));\n    }\n\n    localSdp = this._adjustLocalMediaDirection(localSdp);\n\n    localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n\n    // if we're using unified plan, transform to it first.\n    if (browser.usesUnifiedPlan()) {\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Takes in a *unified plan* offer and inserts the appropriate\n * parameters for adding simulcast receive support.\n * @param {Object} desc - A session description object\n * @param {String} desc.type - the type (offer/answer)\n * @param {String} desc.sdp - the sdp content\n *\n * @return {Object} A session description (same format as above) object\n * with its sdp field modified to advertise simulcast receive support\n */\nTraceablePeerConnection.prototype._insertUnifiedPlanSimulcastReceive\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // In order of lowest to highest spatial quality\n        video.rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n        // eslint-disable-next-line camelcase\n        video.simulcast_03 = {\n            value: `recv rid=${SIM_LAYER_RIDS.join(';')}`\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // TODO the focus should squeze or explode the remote simulcast\n    // eslint-disable-next-line no-param-reassign\n    description = this.simulcast.mungeRemoteDescription(description);\n    this.trace(\n        'setRemoteDescription::postTransform (simulcast)',\n        dumpSDP(description));\n\n    if (this.options.preferH264) {\n        const parsedSdp = transform.parse(description.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        SDPUtil.preferVideoCodec(videoMLine, 'h264');\n\n        // eslint-disable-next-line no-param-reassign\n        description = new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    // If the browser uses unified plan, transform to it first\n    if (browser.usesUnifiedPlan()) {\n        // eslint-disable-next-line no-param-reassign\n        description = new RTCSessionDescription({\n            type: description.type,\n            sdp: this.rtxModifier.stripRtx(description.sdp)\n        });\n\n        this.trace(\n            'setRemoteDescription::postTransform (stripRtx)',\n            dumpSDP(description));\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description);\n        this.trace(\n            'setRemoteDescription::postTransform (Plan A)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this._insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n        }\n    } else {\n        // Plan B\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    }\n\n    // Safari WebRTC errors when no supported video codec is found in the offer.\n    // To prevent the error, inject H264 into the video mLine.\n    if (browser.isSafariWithWebrtc() && !browser.isSafariWithVP8()) {\n        logger.debug('Maybe injecting H264 into the remote description');\n\n        // eslint-disable-next-line no-param-reassign\n        description = this._injectH264IfNotPresent(description);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Inserts an H264 payload into the description if not already present. This is\n * need for Safari WebRTC, which errors when no supported video codec is found\n * in the offer. Related bug reports:\n * https://bugs.webkit.org/show_bug.cgi?id=173141\n * https://bugs.chromium.org/p/webrtc/issues/detail?id=4957\n *\n * @param {RTCSessionDescription} description - An RTCSessionDescription\n * to inject with an H264 payload.\n * @private\n * @returns {RTCSessionDescription}\n */\nTraceablePeerConnection.prototype._injectH264IfNotPresent = function(\n        description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n    if (!videoMLine) {\n        logger.debug('No videoMLine found, no need to inject H264.');\n\n        return description;\n    }\n\n    if (videoMLine.rtp.some(rtp => rtp.codec.toLowerCase() === 'h264')) {\n        logger.debug('H264 codec found in video mLine, no need to inject.');\n\n        return description;\n    }\n\n    const { fmtp, payloads, rtp } = videoMLine;\n    const payloadsArray = payloads.toString().split(' ');\n    let dummyPayloadType;\n\n    for (let i = 127; i >= 96; i--) {\n        if (!payloadsArray.includes(i)) {\n            dummyPayloadType = i;\n            payloadsArray.push(i);\n            videoMLine.payloads = payloadsArray.join(' ');\n            break;\n        }\n    }\n\n    if (typeof dummyPayloadType === 'undefined') {\n        logger.error('Could not find valid payload type to inject.');\n\n        return description;\n    }\n\n    rtp.push({\n        codec: 'H264',\n        payload: dummyPayloadType,\n        rate: 90000\n    });\n\n    fmtp.push({\n        config: 'level-asymmetry-allowed=1;'\n            + 'packetization-mode=1;'\n            + 'profile-level-id=42e01f',\n        payload: dummyPayloadType\n    });\n\n    logger.debug(\n        `Injecting H264 payload type ${dummyPayloadType} into video mLine.`);\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info('Clearing primary video SSRC!');\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error('RTC._removePeerConnection returned false');\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`Closing ${this}...`);\n    this.peerconnection.close();\n};\n\n/**\n * Modifies the values of the setup attributes (defined by\n * {@link http://tools.ietf.org/html/rfc4145#section-4}) of a specific SDP\n * answer in order to overcome a delay of 1 second in the connection\n * establishment between some devices and Videobridge.\n *\n * @param {SDP} offer - the SDP offer to which the specified SDP answer is\n * being prepared to respond\n * @param {SDP} answer - the SDP to modify\n * @private\n */\nconst _fixAnswerRFC4145Setup = function(offer, answer) {\n    if (!(browser.isChromiumBased() || browser.isReactNative())) {\n        // It looks like Firefox doesn't agree with the fix (at least in its\n        // current implementation) because it effectively remains active even\n        // after we tell it to become passive. Apart from Firefox which I tested\n        // after the fix was deployed, I tested Chrome only. In order to prevent\n        // issues with other browsers, limit the fix to known devices for the\n        // time being.\n        return;\n    }\n\n    // XXX Videobridge is the (SDP) offerer and WebRTC (e.g. Chrome) is the\n    // answerer (as orchestrated by Jicofo). In accord with\n    // http://tools.ietf.org/html/rfc5245#section-5.2 and because both peers\n    // are ICE FULL agents, Videobridge will take on the controlling role and\n    // WebRTC will take on the controlled role. In accord with\n    // https://tools.ietf.org/html/rfc5763#section-5, Videobridge will use the\n    // setup attribute value of setup:actpass and WebRTC will be allowed to\n    // choose either the setup attribute value of setup:active or\n    // setup:passive. Chrome will by default choose setup:active because it is\n    // RECOMMENDED by the respective RFC since setup:passive adds additional\n    // latency. The case of setup:active allows WebRTC to send a DTLS\n    // ClientHello as soon as an ICE connectivity check of its succeeds.\n    // Unfortunately, Videobridge will be unable to respond immediately because\n    // may not have WebRTC's answer or may have not completed the ICE\n    // connectivity establishment. Even more unfortunate is that in the\n    // described scenario Chrome's DTLS implementation will insist on\n    // retransmitting its ClientHello after a second (the time is in accord\n    // with the respective RFC) and will thus cause the whole connection\n    // establishment to exceed at least 1 second. To work around Chrome's\n    // idiosyncracy, don't allow it to send a ClientHello i.e. change its\n    // default choice of setup:active to setup:passive.\n    if (offer && answer\n            && offer.media && answer.media\n            && offer.media.length === answer.media.length) {\n        answer.media.forEach((a, i) => {\n            if (SDPUtil.findLine(\n                    offer.media[i],\n                    'a=setup:actpass',\n                    offer.session)) {\n                answer.media[i]\n                    = a.replace(/a=setup:active/g, 'a=setup:passive');\n            }\n        });\n        answer.raw = answer.session + answer.media.join('');\n    }\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    if (browser.isFirefox() && this.isSimulcastOn()) {\n        const videoSender\n            = this.peerconnection.getSenders().find(sender =>\n                sender.track !== null && sender.track.kind === 'video');\n        const simParams = {\n            encodings: [\n                {\n                    rid: SIM_LAYER_1_RID,\n                    scaleResolutionDownBy: 4\n                },\n                {\n                    rid: SIM_LAYER_2_RID,\n                    scaleResolutionDownBy: 2\n                },\n                {\n                    rid: SIM_LAYER_3_RID\n                }\n            ]\n        };\n\n        videoSender.setParameters(simParams);\n    }\n\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            // if we're using unified plan, transform to Plan B.\n            if (browser.usesUnifiedPlan()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.interop.toPlanB(resultSdp);\n                this.trace(\n                    `create${logName}OnSuccess::postTransform (Plan B)`,\n                    dumpSDP(resultSdp));\n                if (this.isSimulcastOn()) {\n                    // eslint-disable-next-line no-param-reassign\n                    resultSdp\n                        = this._injectSsrcGroupForUnifiedSimulcast(resultSdp);\n                    this.trace(\n                        `create${logName}OnSuccess::postTransform`\n                        + '(inject ssrc group)', dumpSDP(resultSdp));\n                }\n            }\n\n            /**\n             * We don't keep ssrcs consitent for Firefox because rewriting\n             *  the ssrcs between createAnswer and setLocalDescription breaks\n             *  the caching in sdp-interop (sdp-interop must know about all\n             *  ssrcs, and it updates its cache in toPlanB so if we rewrite them\n             *  after that, when we try and go back to unified plan it will\n             *  complain about unmapped ssrcs)\n             */\n            if (!browser.usesUnifiedPlan()) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Add simulcast streams if simulcast is enabled\n            if (this.isSimulcastOn()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.supportsRtx()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Fix the setup attribute (see _fixAnswerRFC4145Setup for\n            //  details)\n            if (!isOffer) {\n                const remoteDescription\n                    = new SDP(this.remoteDescription.sdp);\n                const localDescription = new SDP(resultSdp.sdp);\n\n                _fixAnswerRFC4145Setup(remoteDescription, localDescription);\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: localDescription.raw\n                });\n            }\n\n            const ssrcMap = extractSSRCMap(resultSdp);\n\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nfunction extractPrimarySSRC(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n}\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const trackMSID = track.storedMSID;\n\n        if (ssrcMap.has(trackMSID)) {\n            const newSSRC = ssrcMap.get(trackMSID);\n\n            if (!newSSRC) {\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                if (oldSSRCNum === null) {\n                    logger.info(\n                        `Storing new local SSRC for ${track} in ${this}`,\n                        newSSRC);\n                } else {\n                    logger.error(\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\n                        } with: `, newSSRC);\n                }\n                this.localSSRCs.set(track.rtcId, newSSRC);\n\n                this.eventEmitter.emit(\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            } else {\n                logger.debug(\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\n                     + `is still up to date in ${this}`);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @param {Function} callback - The function to invoke after successfully\n * obtaining stats.\n * @param {Function} errback - The function to invoke after failing to obtain\n * stats.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\n    // accounting for different getStats apis, making the browser-checking-if\n    // unnecessary.\n    if (browser.isSafariWithWebrtc() || browser.isFirefox()\n            || browser.isReactNative()) {\n        // uses the new Promise based getStats\n        this.peerconnection.getStats()\n            .then(callback)\n            .catch(errback || (() => {\n\n                // Making sure that getStats won't fail if error callback is\n                // not passed.\n            }));\n    } else {\n        this.peerconnection.getStats(callback);\n    }\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\n    }\n    if (this.isSimulcastOn()) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIMULCAST_LAYERS; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx && browser.supportsRtx()) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\nconst handleLayerSuspension = function(peerConnection, isSelected) {\n    if (!peerConnection.getSenders) {\n        logger.debug('Browser doesn\\'t support RTPSender');\n\n        return;\n    }\n\n    const videoSender = peerConnection.getSenders()\n        .find(sender => sender.track.kind === 'video');\n\n    if (!videoSender) {\n        logger.warn('handleLayerSuspension unable to find video sender');\n\n        return;\n    }\n    if (!videoSender.getParameters) {\n        logger.debug('Browser doesn\\'t support RTPSender parameters');\n\n        return;\n    }\n    const parameters = videoSender.getParameters();\n\n    if (isSelected) {\n        logger.debug('Currently selected, enabling all sim layers');\n\n        // Make sure all encodings are enabled\n        parameters.encodings.forEach(e => {\n            e.active = true;\n        });\n    } else {\n        logger.debug('Not currently selected, disabling upper layers');\n\n        // Turn off the upper simulcast layers\n        [ 1, 2 ].forEach(simIndex => {\n            if (parameters.encodings[simIndex]) {\n                parameters.encodings[simIndex].active = false;\n            }\n        });\n    }\n    videoSender.setParameters(parameters);\n};\n\n/**\n * Set whether or not the endpoint is 'selected' by other endpoints, meaning\n * it appears on their main stage\n */\nTraceablePeerConnection.prototype.setIsSelected = function(isSelected) {\n    if (this.options.enableLayerSuspension) {\n        logger.debug('Layer suspension enabled,'\n            + `currently selected? ${isSelected}`);\n        handleLayerSuspension(this.peerconnection, isSelected);\n    }\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\n};\n","import { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiTrack from './JitsiTrack';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindMuteHandlers();\n        }\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track muted handlers.\n     *\n     * @returns {void}\n     */\n    _bindMuteHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(\n            `\"onmute\" event(${Date.now()}): `,\n            this.getParticipantId(), this.getType(), this.getSSRC());\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(\n            `\"onunmute\" event(${Date.now()}): `,\n            this.getParticipantId(), this.getType(), this.getSSRC());\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[${\n            this.ownerEndpointId}, ${\n            this.getType()}, p2p: ${\n            this.isP2P}]`;\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     */\n    constructor(tpc) {\n        this.tpc = tpc;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = muted || !isInPeerConnection;\n\n            logger.debug(\n                `${this.tpc} ${videoTrack} muted: ${\n                    muted}, is in PeerConnection: ${\n                    isInPeerConnection} => should fake sdp ? : ${\n                    shouldFakeSdp}`);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = 'sendrecv';\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                logger.debug(\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\n                        videoTrack}`);\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    logger.debug(\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\n                        group);\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        const streamId = streamAndTrackIDs[0];\n                        const trackId = streamAndTrackIDs[1];\n\n                        ssrcLine.value\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\n                    } else {\n                        logger.warn(\n                            'Unable to munge local MSID'\n                                + `- weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\nimport SDPUtil from './SDPUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    logger.debug(\n        `Updating mline to associate ${rtxSsrc}`\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\n\n        return;\n    }\n    if (previousRtxSSRC) {\n        logger.debug(\n            `${primarySsrc} was previously associated with rtx`\n            + `${previousRtxSSRC}, removing all references to it`);\n\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\n        logger.debug(mLine.dumpSSRCGroups());\n\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return false;\n        }\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\n            ' making sure all have rtx streams');\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (correspondingRtxSsrc) {\n                logger.debug(\n                    'Already have an associated rtx ssrc for'\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\n            } else {\n                logger.debug(\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\n\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    logger.debug(\n                        `Rtx stream ${previousAssociatedRtxStream} `\n                        + 'already existed in the sdp as an rtx stream for '\n                        + `${ssrc}`);\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\n                                 + `for ssrc ${ssrc}`);\n                }\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\n                             + `for video ssrc ${ssrc}`);\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.logPrefix} no 'video' media found in the sdp: `\n                    + `${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(\n                    `${this.logPrefix} no SSRC found for the recvonly video`\n                        + 'stream!');\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency couldn't`\n                        + ' parse new primary ssrc');\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\n                        + `${newPrimarySsrc} with cached `\n                        + `${this.cachedPrimarySsrc}`);\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n                logger.info(\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\n                        + `${this.cachedPrimarySsrc}`);\n            }\n\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiConferenceEvents from '../JitsiConferenceEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * Detect user trying to speek while is locally muted and fires an event.\n */\nexport default class TalkMutedDetection {\n    /**\n     * Creates TalkMutedDetection\n     * @param conference the JitsiConference instance that created us.\n     * @param callback the callback to call when detected that the local user is\n     * talking while her microphone is muted.\n     * @constructor\n     */\n    constructor(conference, callback) {\n        /**\n         * The callback to call when detected that the local user is talking\n         * while her microphone is muted.\n         *\n         * @private\n         */\n        this._callback = callback;\n\n        /**\n         * The indicator which determines whether <tt>callback</tt> has been\n         * invoked for the current local audio track of <tt>conference</tt> so\n         * that it is invoked once only.\n         *\n         * @private\n         */\n        this._eventFired = false;\n\n        // XXX I went back and forth on the subject of where to put the access\n        // to statistics. On the one had, (1) statistics is likely intended to\n        // be private to conference and (2) there is a desire to keep the\n        // dependencies of modules to the minimum (i.e. not have\n        // TalkMutedDetection depend on statistics). On the other hand, (1)\n        // statistics is technically not private because\n        // JitsiConferenceEventManager accesses it and (2) TalkMutedDetection\n        // works exactly because it knows that there are no audio levels for\n        // JitsiLocalTrack but there are audio levels for the local participant\n        // through statistics.\n        conference.statistics.addAudioLevelListener(\n            this._audioLevel.bind(this));\n\n        conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n        conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            this._trackAdded.bind(this));\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Receives audio level events for all send and receive streams.\n     *\n     * @param {TraceablePeerConnection} pc - WebRTC PeerConnection object of the\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of\n     * the endpoint/participant/stream being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt>.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> represents a\n     * local/send stream or <tt>false</tt> for a remote/receive stream.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio stream only and if event is not\n        // sent yet.\n        if (!isLocal || !this.audioTrack || this._eventFired) {\n            return;\n        }\n\n        if (this.audioTrack.isMuted()\n            && audioLevel > SPEECH_DETECT_THRESHOLD) {\n            this._eventFired = true;\n            this._callback();\n        }\n    }\n    /* eslint-enable max-params */\n\n    /**\n     * Determines whether a specific {@link JitsiTrack} represents a local audio\n     * track.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> to be checked whether\n     * it represents a local audio track.\n     * @private\n     * @return {boolean} - <tt>true</tt> if the specified <tt>track</tt>\n     * represents a local audio track; otherwise, <tt>false</tt>.\n     */\n    _isLocalAudioTrack(track) {\n        return track.isAudioTrack() && track.isLocal();\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that a {@link JitsiTrack} was\n     * added to the associated {@link JitsiConference}. Looks for the local\n     * audio track only.\n     *\n     * @param {JitsiTrack} track - The added <tt>JitsiTrack</tt>.\n     * @private\n     */\n    _trackAdded(track) {\n        if (this._isLocalAudioTrack(track)) {\n            this.audioTrack = track;\n        }\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that the mute state of a\n     * {@link JitsiTrack} has changed. Looks for the local audio track only.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> whose mute state has\n     * changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (this._isLocalAudioTrack(track) && track.isMuted()) {\n            this._eventFired = false;\n        }\n    }\n}\n","import * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst VideoType = require('../../service/RTC/VideoType');\nconst Resolutions = require('../../service/RTC/Resolutions');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * See media/engine/simulcast.ss from webrtc.org\n */\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        max: 5000,\n        target: 4000,\n        min: 800 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        max: 2500,\n        target: 2500,\n        min: 600 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        max: 900,\n        target: 900,\n        min: 450 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        max: 700,\n        target: 500,\n        min: 150 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        max: 450,\n        target: 350,\n        min: 150 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        max: 200,\n        target: 150,\n        min: 30 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n\n/**\n * The current cap (in kbps) put on the video stream (or null if there isn't\n * a cap).  If there is a cap, we'll take it into account when calculating\n * the current quality.\n */\nlet videoBitrateCap = null;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video started.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart) {\n    // Completely ignore the bitrate in the first 5 seconds, as the first\n    // event seems to fire very early and the value is suspicious and causes\n    // false positives.\n    if (millisSinceStart < 15000) {\n        return 1;\n    }\n\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    if (simulcast) {\n        // Find the first format with height no bigger than ours.\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n        if (simulcastFormat) {\n            // Sum the target fields from all simulcast layers for the given\n            // resolution (e.g. 720p + 360p + 180p).\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\n                const targetHeight = height;\n\n                simulcastFormat\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\n                if (simulcastFormat) {\n                    target += simulcastFormat.target;\n                } else {\n                    break;\n                }\n            }\n        }\n    } else {\n        // See GetMaxDefaultVideoBitrateKbps in\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\n        const pixels = resolution.width * resolution.height;\n\n        if (pixels <= 320 * 240) {\n            target = 600;\n        } else if (pixels <= 640 * 480) {\n            target = 1700;\n        } else if (pixels <= 960 * 540) {\n            target = 2000;\n        } else {\n            target = 2500;\n        }\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second.\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        /**\n         * The time at which a video bitrate cap was last removed.  We use\n         * this to calculate how much time we, as a sender, have had to\n         * ramp-up\n         */\n        this._timeLastBwCapRemoved = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\n            startBitrate = options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module\n        // and update the _localStats field.\n        // Oh, and by the way, the resolutions of all remote participants are\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\n        // if one carefully reads the *code* (but not the docs) in\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\n        // jitsi-meet\n        // TODO: We should keep track of the remote resolution in _remoteStats,\n        // and notify about changes via separate events.\n        conference.statistics.addConnectionStatsListener(\n            this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or\n     * a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the\n     * camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the sending bitrate.\n\n            // Figure out if simulcast is in use\n            const activeTPC = this._conference.getActivePeerConnection();\n            const isSimulcastOn\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\n\n            const newVideoBitrateCap\n                = activeTPC && activeTPC.bandwidthLimiter\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\n\n            // If we had a cap set but there isn't one now, then it has\n            // just been 'lifted', so we should treat this like a new\n            // ramp up.\n            if (!newVideoBitrateCap && videoBitrateCap) {\n                this._timeLastBwCapRemoved = window.performance.now();\n\n                // Set the start bitrate to whatever we were just capped to\n                startBitrate = videoBitrateCap;\n            }\n            videoBitrateCap = newVideoBitrateCap;\n\n            // time since sending of video was enabled.\n            const millisSinceStart = window.performance.now()\n                - Math.max(this._timeVideoUnmuted,\n                    this._timeIceConnected,\n                    this._timeLastBwCapRemoved);\n\n            // expected sending bitrate in perfect conditions\n            let target\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\n\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\n\n            if (videoBitrateCap) {\n                target = Math.min(target, videoBitrateCap);\n            }\n\n            quality = 100 * this._localStats.bitrate.upload / target;\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\n                    / 1000;\n\n            quality\n                = Math.min(\n                    quality,\n                    prevConnectionQuality\n                        + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion\n        };\n\n        try {\n            this._conference.broadcastEndpointMessage({\n                type: STATS_MESSAGE_TYPE,\n                values: data });\n        } catch (e) {\n            // We often hit this in the beginning of a call, before the data\n            // channel is ready. It is not a big problem, because we will\n            // send the statistics again after a few seconds, and the error is\n            // already logged elsewhere. So just ignore it.\n\n            // let errorMsg = \"Failed to broadcast local stats\";\n            // logger.error(errorMsg, e);\n            // GlobalOnErrorHandler.callErrorHandler(\n            //    new Error(errorMsg + \": \" + e));\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack ? localVideoTrack.resolution : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A delayed ICE failed notification which is triggered only if the ICE\n * connection does not recover soon after or before the XMPP connection is\n * restored (if it was ever broken). If ICE fails while the XMPP connection is\n * not broken then the notifications will be sent after 2 seconds delay. This\n * extra delay is not intentional just a side effect of the code.\n * NOTE that this delayed task can only be used if PING is supported by the XMPP\n * server.\n */\nexport default class IceFailedNotification {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * Starts the task.\n     * @param {JingleSessionPC} session - the JVB Jingle session.\n     */\n    start(session) {\n        // The 65 seconds are greater than the default Prosody's BOSH\n        // timeout of 60. This gives some time for the XMPP connection\n        // to recover.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (this._canceled) {\n                    return;\n                }\n\n                if (this._conference.isJvbConnectionInterrupted) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        logger.info(\n                            'Sending ICE failed'\n                            + ' - the connection has not recovered');\n                        this._iceFailedTimeout = undefined;\n                        session.sendIceFailedNotification();\n                    }, 2000);\n                } else {\n                    logger.info(\n                        'ICE connection restored - not sending ICE failed');\n                }\n            },\n            error => {\n                logger.error(\n                    'PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        if (this._iceFailedTimeout) {\n            window.clearTimeout(this._iceFailedTimeout);\n        }\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     */\n    _emitSessionUpdate(session) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { sessionID, status, error, recordingMode } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import browser from '../browser';\nimport { createRttByRegionEvent }\n    from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport RTCUtils from '../RTC/RTCUtils';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The options to pass to createOffer (we need to offer to receive *something*\n * for the PC to gather candidates.\n */\nconst offerOptions = {\n    offerToReceiveAudio: 1,\n    offerToReceiveVideo: 0\n};\n\n\n/**\n * The interval at which the webrtc engine sends STUN keep alive requests.\n * @type {number}\n */\nconst stunKeepAliveIntervalMs = 10000;\n\n/**\n * Wraps a PeerConnection with one specific STUN server and measures the RTT\n * to the STUN server.\n */\nclass PCMonitor {\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {String} region - The region of the STUN server.\n     * @param {String} address - The address of the STUN server.\n     * @param {number} getStatsIntervalMs how often to call getStats.\n     * @param {number} delay the delay after which the PeerConnection will be\n     * started (that is, createOffer and setLocalDescription will be invoked).\n     *\n     */\n    constructor(region, address, getStatsIntervalMs, delay) {\n        /* eslint-disable max-params */\n        this.region = region;\n        this.getStatsIntervalMs = getStatsIntervalMs;\n        this.getStatsInterval = null;\n\n        // What we consider the current RTT. It is Math.min(this.rtts).\n        this.rtt = Infinity;\n\n        // The RTT measurements we've made from the latest getStats() calls.\n        this.rtts = [];\n\n        const iceServers = [ { 'url': `stun:${address}` } ];\n\n        this.pc = new RTCUtils.RTCPeerConnectionType(\n            {\n                'iceServers': iceServers\n            });\n\n        // Maps a key consisting of the IP address, port and priority of a\n        // candidate to some state related to it. If we have more than one\n        // network interface we will might multiple srflx candidates and this\n        // helps to distinguish between then.\n        this.candidates = {};\n\n        this.stopped = false;\n\n        this.start = this.start.bind(this);\n        this.stop = this.stop.bind(this);\n        this.startStatsInterval = this.startStatsInterval.bind(this);\n        this.handleCandidateRtt = this.handleCandidateRtt.bind(this);\n\n        window.setTimeout(this.start, delay);\n    }\n\n    /**\n     * Starts this PCMonitor. That is, invokes createOffer and\n     * setLocalDescription on the PeerConnection and starts an interval which\n     * calls getStats.\n     */\n    start() {\n        if (this.stopped) {\n            return;\n        }\n\n        this.pc.createOffer(offerOptions).then(offer => {\n            this.pc.setLocalDescription(\n                offer,\n                () => {\n                    logger.info(\n                        `setLocalDescription success for ${this.region}`);\n                    this.startStatsInterval();\n                },\n                error => {\n                    logger.warn(\n                        `setLocalDescription failed for ${this.region}: ${\n                            error}`);\n                }\n            );\n        });\n    }\n\n    /**\n     * Starts an interval which invokes getStats on the PeerConnection and\n     * measures the RTTs for the different candidates.\n     */\n    startStatsInterval() {\n        this.getStatsInterval = window.setInterval(\n            () => {\n                // Note that the data that we use to measure the RTT is only\n                // available in the legacy (callback based) getStats API.\n                this.pc.getStats(stats => {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n                        const rttTotal\n                            = Number(res.stat('stunKeepaliveRttTotal'));\n\n                        // We recognize the results that we care for (local\n                        // candidates of type srflx) by the existance of the\n                        // stunKeepaliveRttTotal stat.\n                        if (rttTotal > 0) {\n                            const candidateKey\n                                = `${res.stat('ipAddress')}_${\n                                    res.stat('portNumber')}_${\n                                    res.stat('priority')}`;\n\n                            this.handleCandidateRtt(\n                                candidateKey,\n                                rttTotal,\n                                Number(\n                                    res.stat('stunKeepaliveResponsesReceived')),\n                                Number(\n                                    res.stat('stunKeepaliveRequestsSent')));\n                        }\n                    }\n\n                    // After we've measured the RTT for all candidates we,\n                    // update the state of the PC with the shortest one.\n                    let rtt = Infinity;\n\n                    for (const key in this.candidates) {\n                        if (this.candidates.hasOwnProperty(key)\n                            && this.candidates[key].rtt > 0) {\n                            rtt = Math.min(rtt, this.candidates[key].rtt);\n                        }\n                    }\n\n                    // We keep the last 6 measured RTTs and choose the shortest\n                    // one to export to analytics. This is because we often see\n                    // failures get a real measurement which end up as Infinity.\n                    this.rtts.push(rtt);\n                    if (this.rtts.length > 6) {\n                        this.rtts = this.rtts.splice(1, 7);\n                    }\n                    this.rtt = Math.min(...this.rtts);\n                });\n            },\n            this.getStatsIntervalMs\n        );\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Updates the RTT for a candidate identified by \"key\" based on the values\n     * from getStats() and the previously saved state (i.e. old values).\n     *\n     * @param {String} key the ID for the candidate\n     * @param {number} rttTotal the value of the 'stunKeepaliveRttTotal' just\n     * measured.\n     * @param {number} responsesReceived the value of the\n     * 'stunKeepaliveResponsesReceived' stat just measured.\n     * @param {number} requestsSent the value of the 'stunKeepaliveRequestsSent'\n     * stat just measured.\n     */\n    handleCandidateRtt(key, rttTotal, responsesReceived, requestsSent) {\n        /* eslist-enable max-params */\n        if (!this.candidates[key]) {\n            this.candidates[key] = {\n                rttTotal: 0,\n                responsesReceived: 0,\n                requestsSent: 0,\n                rtt: NaN\n            };\n        }\n\n        const rttTotalDiff = rttTotal - this.candidates[key].rttTotal;\n        const responsesReceivedDiff\n            = responsesReceived - this.candidates[key].responsesReceived;\n\n        // We observe that when the difference between the number of requests\n        // and responses has grown (i.q. when the value below is positive), the\n        // the RTT measurements are incorrect (too low). For this reason we\n        // ignore these measurement (setting rtt=NaN), but update our state.\n        const requestsResponsesDiff\n            = (requestsSent - responsesReceived)\n            - (this.candidates[key].requestsSent\n                - this.candidates[key].responsesReceived);\n        let rtt = NaN;\n\n        if (responsesReceivedDiff > 0 && requestsResponsesDiff === 0) {\n            rtt = rttTotalDiff / responsesReceivedDiff;\n        }\n\n        this.candidates[key].rttTotal = rttTotal;\n        this.candidates[key].responsesReceived = responsesReceived;\n        this.candidates[key].requestsSent = requestsSent;\n        this.candidates[key].rtt = rtt;\n    }\n\n\n    /**\n     * Stops this PCMonitor, clearing its intervals and stopping the\n     * PeerConnection.\n     */\n    stop() {\n        if (this.getStatsInterval) {\n            window.clearInterval(this.getStatsInterval);\n        }\n\n        this.pc.close();\n\n        this.stopped = true;\n    }\n}\n\n/**\n * A class which monitors the round-trip time (RTT) to a set of STUN servers.\n * The measured RTTs are sent as analytics events. It uses a separate\n * PeerConnection (represented as a PCMonitor) for each STUN server.\n */\nexport default class RttMonitor {\n    /**\n     * Initializes a new RttMonitor.\n     * @param {Object} config the object holding the configuration.\n     */\n    constructor(config) {\n        if (!config || !config.enabled\n            || !browser.supportsLocalCandidateRttStatistics()) {\n            return;\n        }\n\n        // Maps a region to the PCMonitor instance for that region.\n        this.pcMonitors = {};\n\n        this.startPCMonitors = this.startPCMonitors.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n        this.stop = this.stop.bind(this);\n\n        this.analyticsInterval = null;\n        this.stopped = false;\n\n        const initialDelay = config.initialDelay || 60000;\n\n\n        logger.info(\n            `Starting RTT monitor with an initial delay of ${initialDelay}`);\n\n\n        window.setTimeout(\n            () => this.startPCMonitors(config),\n            initialDelay);\n    }\n\n    /**\n     * Starts the PCMonitors according to the configuration.\n     */\n    startPCMonitors(config) {\n        if (!config.stunServers) {\n            logger.warn('No stun servers configured.');\n\n            return;\n        }\n\n        if (this.stopped) {\n            return;\n        }\n\n        const getStatsIntervalMs\n            = config.getStatsInterval || stunKeepAliveIntervalMs;\n        const analyticsIntervalMs\n            = config.analyticsInterval || getStatsIntervalMs;\n        const count = Object.keys(config.stunServers).length;\n        const offset = getStatsIntervalMs / count;\n\n        // We delay the initialization of each PC so that they are uniformly\n        // distributed across the getStatsIntervalMs.\n        let i = 0;\n\n        for (const region in config.stunServers) {\n            if (config.stunServers.hasOwnProperty(region)) {\n                const address = config.stunServers[region];\n\n                this.pcMonitors[region]\n                    = new PCMonitor(\n                        region,\n                        address,\n                        getStatsIntervalMs,\n                        offset * i);\n                i++;\n            }\n        }\n\n        window.setTimeout(\n            () => {\n                if (!this.stopped) {\n                    this.analyticsInterval\n                        = window.setInterval(\n                        this.sendAnalytics, analyticsIntervalMs);\n                }\n            },\n            1000);\n    }\n\n    /**\n     * Sends an analytics event with the measured RTT to each region/STUN\n     * server.\n     */\n    sendAnalytics() {\n        const rtts = {};\n\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                const rtt = this.pcMonitors[region].rtt;\n\n                if (!isNaN(rtt) && rtt !== Infinity) {\n                    rtts[region.replace('-', '_')] = rtt;\n                }\n            }\n        }\n\n        if (rtts) {\n            Statistics.sendAnalytics(createRttByRegionEvent(rtts));\n        }\n    }\n\n    /**\n     * Stops this RttMonitor, clearing all intervals and closing all\n     * PeerConnections.\n     */\n    stop() {\n        logger.info('Stopping RttMonitor.');\n        this.stopped = true;\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                this.pcMonitors[region].stop();\n            }\n        }\n        this.pcMonitors = {};\n\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n}\n","/* global __filename */\n\nimport { createRtpStatsEvent } from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport Statistics from './statistics';\nimport * as VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._onLocalStatsUpdated = data => this._calculateAvgStats(data);\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport SpeakerStats from './SpeakerStats';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        let savedUser = this.stats.users[userId];\n\n        if (!savedUser) {\n            savedUser = this.stats.users[userId]\n                = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n\n            if (this.stats.users[userId]) {\n                speakerStatsToUpdate = this.stats.users[userId];\n\n                if (!speakerStatsToUpdate.getDisplayName()) {\n                    speakerStatsToUpdate\n                        .setDisplayName(newStats[userId].displayName);\n                }\n            } else {\n                speakerStatsToUpdate = new SpeakerStats(\n                    userId, newStats[userId].displayName);\n                this.stats.users[userId] = speakerStatsToUpdate;\n                speakerStatsToUpdate.markAsHasLeft();\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n        }\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio the the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The constant for the name of the focus component.\n * @type {string}\n */\nComponentsVersions.FOCUS_COMPONENT = 'focus';\n\n/**\n * The constant for the name of the videobridge component.\n * @type {string}\n */\nComponentsVersions.VIDEOBRIDGE_COMPONENT = 'videobridge';\n\n/**\n * The constant for the name of the XMPP server component.\n * @type {string}\n */\nComponentsVersions.XMPP_SERVER_COMPONENT = 'xmpp';\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processPresence.bind(this));\n}\n\nComponentsVersions.prototype.processPresence\n    = function(node, mucResource, mucJid) {\n        if (node.attributes.xmlns !== 'http://jitsi.org/jitmeet') {\n            logger.warn('Ignored presence versions node - invalid xmlns', node);\n\n            return;\n        }\n\n        if (!this.conference._isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${node}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        node.children.forEach(item => {\n\n            const componentName = item.attributes.name;\n\n            if (componentName !== ComponentsVersions.FOCUS_COMPONENT\n            && componentName !== ComponentsVersions.XMPP_SERVER_COMPONENT\n            && componentName !== ComponentsVersions.VIDEOBRIDGE_COMPONENT) {\n                logger.warn(\n                    `Received version for not supported component name: ${\n                        componentName}`);\n\n                return;\n            }\n\n            const version = item.value;\n\n            if (this.versions[componentName] !== version) {\n                this.versions[componentName] = version;\n                logger.info(`Got ${componentName} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: componentName,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\n     * video should be returned as a desktop stream. Defaults to false.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\n     * the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote video stream has been received and converted to a\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out. The arguments passed in are the\n     * jid to send the message to and the message\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            iceConfig: jitsiConnection\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            iceConfig: this._options.iceConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTC from '../RTC/RTC';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should\n     * send offers. If false, the local client should send answers. Defaults to\n     * false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote media stream has been received through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which\n     * the peer connection is being establish and which should receive direct\n     * messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\n     * connection should accept incoming video streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            iceConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const iceConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.iceConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference} to be passed in. {@code ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ }\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(this, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            iceConfigStub, // iceConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/* global __filename */\n\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport AuthUtil from './modules/util/AuthUtil';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport Logger from 'jitsi-meet-logger';\nimport * as MediaType from './service/RTC/MediaType';\nimport Resolutions from './service/RTC/Resolutions';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport Statistics from './modules/statistics/statistics';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\n\n/**\n * Gets the next lowest desirable resolution to try for a camera. If the given\n * resolution is already the lowest acceptable resolution, returns {@code null}.\n *\n * @param resolution the current resolution\n * @return the next lowest resolution from the given one, or {@code null} if it\n * is already the lowest acceptable resolution.\n */\nfunction getLowerResolution(resolution) {\n    if (!Resolutions[resolution]) {\n        return null;\n    }\n    const order = Resolutions[resolution].order;\n    let res = null;\n    let resName = null;\n\n    Object.keys(Resolutions).forEach(r => {\n        const value = Resolutions[r];\n\n        if (!res || (res.order < value.order && value.order < order)) {\n            resName = r;\n            res = value;\n        }\n    });\n\n    if (resName === resolution) {\n        resName = null;\n    }\n\n    return resName;\n}\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {object} options.desktopSharingExtensionExternalInstallation -\n     * enables external installation process for desktop sharing extension if\n     * the inline installation is not posible. The following properties should\n     * be provided:\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param originalOptions - internal use only, to be able to store the\n     * originally requested options.\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\n        let promiseFulfilled = false;\n\n        if (firePermissionPromptIsShownEvent === true) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                        browser.getName());\n                }\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(options)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(options)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\n                    && !browser.usesNewGumFlow()) {\n                    const oldResolution = options.resolution || '720';\n                    const newResolution = getLowerResolution(oldResolution);\n\n                    if (newResolution !== null) {\n                        options.resolution = newResolution;\n\n                        logger.debug(\n                            'Retry createLocalTracks with resolution',\n                            newResolution);\n\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\n                            'warning',\n                            {\n                                'old_resolution': oldResolution,\n                                'new_resolution': newResolution,\n                                reason: 'unsupported resolution'\n                            }));\n\n                        return this.createLocalTracks(\n                            options,\n                            undefined,\n                            originalOptions || Object.assign({}, options));\n                    }\n\n                    // We tried everything. If there is a mandatory device id,\n                    // remove it and let gum find a device to use.\n                    if (originalOptions\n                        && error.gum.constraints\n                        && error.gum.constraints.video\n                        && error.gum.constraints.video.mandatory\n                        && error.gum.constraints.video.mandatory.sourceId) {\n                        originalOptions.cameraDeviceId = undefined;\n\n                        return this.createLocalTracks(originalOptions);\n                    }\n                }\n\n                if (error.name\n                        === JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'chrome_extension_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","module.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\nstrophe_js.Strophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), strophe_js.Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), strophe_js.Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = strophe_js.$iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n\n})));\n//# sourceMappingURL=strophe.disco.js.map\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n'use strict';\n\nvar adapterFactory = require('./adapter_factory.js');\nmodule.exports = adapterFactory({window: global.window});\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n'use strict';\n\nvar utils = require('./utils');\n// Shimming starts here.\nmodule.exports = function(dependencies, opts) {\n  var window = dependencies && dependencies.window;\n\n  var options = {\n    shimChrome: true,\n    shimFirefox: true,\n    shimEdge: true,\n    shimSafari: true,\n  };\n\n  for (var key in opts) {\n    if (hasOwnProperty.call(opts, key)) {\n      options[key] = opts[key];\n    }\n  }\n\n  // Utils.\n  var logging = utils.log;\n  var browserDetails = utils.detectBrowser(window);\n\n  // Export to the adapter global object visible in the browser.\n  var adapter = {\n    browserDetails: browserDetails,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  };\n\n  // Uncomment the line below if you want logging to occur, including logging\n  // for the switch statement below. Can also be turned on in the browser via\n  // adapter.disableLog(false), but then logging from the switch statement below\n  // will not appear.\n  // require('./utils').disableLog(false);\n\n  // Browser shims.\n  var chromeShim = require('./chrome/chrome_shim') || null;\n  var edgeShim = require('./edge/edge_shim') || null;\n  var firefoxShim = require('./firefox/firefox_shim') || null;\n  var safariShim = require('./safari/safari_shim') || null;\n  var commonShim = require('./common_shim') || null;\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n      commonShim.shimCreateObjectURL(window);\n\n      chromeShim.shimGetUserMedia(window);\n      chromeShim.shimMediaStream(window);\n      chromeShim.shimSourceObject(window);\n      chromeShim.shimPeerConnection(window);\n      chromeShim.shimOnTrack(window);\n      chromeShim.shimAddTrackRemoveTrack(window);\n      chromeShim.shimGetSendersWithDtmf(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n      commonShim.shimCreateObjectURL(window);\n\n      firefoxShim.shimGetUserMedia(window);\n      firefoxShim.shimSourceObject(window);\n      firefoxShim.shimPeerConnection(window);\n      firefoxShim.shimOnTrack(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = edgeShim;\n      commonShim.shimCreateObjectURL(window);\n\n      edgeShim.shimGetUserMedia(window);\n      edgeShim.shimPeerConnection(window);\n      edgeShim.shimReplaceTrack(window);\n\n      // the edge shim implements the full RTCIceCandidate object.\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n      commonShim.shimCreateObjectURL(window);\n\n      safariShim.shimRTCIceServerUrls(window);\n      safariShim.shimCallbacksAPI(window);\n      safariShim.shimLocalStreamsAPI(window);\n      safariShim.shimRemoteStreamsAPI(window);\n      safariShim.shimTrackEventTransceiver(window);\n      safariShim.shimGetUserMedia(window);\n      safariShim.shimCreateOfferLegacy(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n};\n","\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nvar utils = require('../utils.js');\nvar logging = utils.log;\n\nvar chromeShim = {\n  shimMediaStream: function(window) {\n    window.MediaStream = window.MediaStream || window.webkitMediaStream;\n  },\n\n  shimOnTrack: function(window) {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n          }\n          this.addEventListener('track', this._ontrack = f);\n        }\n      });\n      var origSetRemoteDescription =\n          window.RTCPeerConnection.prototype.setRemoteDescription;\n      window.RTCPeerConnection.prototype.setRemoteDescription = function() {\n        var pc = this;\n        if (!pc._ontrackpoly) {\n          pc._ontrackpoly = function(e) {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', function(te) {\n              var receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = pc.getReceivers().find(function(r) {\n                  return r.track && r.track.id === te.track.id;\n                });\n              } else {\n                receiver = {track: te.track};\n              }\n\n              var event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver: receiver};\n              event.streams = [e.stream];\n              pc.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(function(track) {\n              var receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = pc.getReceivers().find(function(r) {\n                  return r.track && r.track.id === track.id;\n                });\n              } else {\n                receiver = {track: track};\n              }\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver: receiver};\n              event.streams = [e.stream];\n              pc.dispatchEvent(event);\n            });\n          };\n          pc.addEventListener('addstream', pc._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n    }\n  },\n\n  shimGetSendersWithDtmf: function(window) {\n    // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n    if (typeof window === 'object' && window.RTCPeerConnection &&\n        !('getSenders' in window.RTCPeerConnection.prototype) &&\n        'createDTMFSender' in window.RTCPeerConnection.prototype) {\n      var shimSenderWithDtmf = function(pc, track) {\n        return {\n          track: track,\n          get dtmf() {\n            if (this._dtmf === undefined) {\n              if (track.kind === 'audio') {\n                this._dtmf = pc.createDTMFSender(track);\n              } else {\n                this._dtmf = null;\n              }\n            }\n            return this._dtmf;\n          },\n          _pc: pc\n        };\n      };\n\n      // augment addTrack when getSenders is not available.\n      if (!window.RTCPeerConnection.prototype.getSenders) {\n        window.RTCPeerConnection.prototype.getSenders = function() {\n          this._senders = this._senders || [];\n          return this._senders.slice(); // return a copy of the internal state.\n        };\n        var origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n        window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n          var pc = this;\n          var sender = origAddTrack.apply(pc, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(pc, track);\n            pc._senders.push(sender);\n          }\n          return sender;\n        };\n\n        var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n        window.RTCPeerConnection.prototype.removeTrack = function(sender) {\n          var pc = this;\n          origRemoveTrack.apply(pc, arguments);\n          var idx = pc._senders.indexOf(sender);\n          if (idx !== -1) {\n            pc._senders.splice(idx, 1);\n          }\n        };\n      }\n      var origAddStream = window.RTCPeerConnection.prototype.addStream;\n      window.RTCPeerConnection.prototype.addStream = function(stream) {\n        var pc = this;\n        pc._senders = pc._senders || [];\n        origAddStream.apply(pc, [stream]);\n        stream.getTracks().forEach(function(track) {\n          pc._senders.push(shimSenderWithDtmf(pc, track));\n        });\n      };\n\n      var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n      window.RTCPeerConnection.prototype.removeStream = function(stream) {\n        var pc = this;\n        pc._senders = pc._senders || [];\n        origRemoveStream.apply(pc, [stream]);\n\n        stream.getTracks().forEach(function(track) {\n          var sender = pc._senders.find(function(s) {\n            return s.track === track;\n          });\n          if (sender) {\n            pc._senders.splice(pc._senders.indexOf(sender), 1); // remove sender\n          }\n        });\n      };\n    } else if (typeof window === 'object' && window.RTCPeerConnection &&\n               'getSenders' in window.RTCPeerConnection.prototype &&\n               'createDTMFSender' in window.RTCPeerConnection.prototype &&\n               window.RTCRtpSender &&\n               !('dtmf' in window.RTCRtpSender.prototype)) {\n      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n      window.RTCPeerConnection.prototype.getSenders = function() {\n        var pc = this;\n        var senders = origGetSenders.apply(pc, []);\n        senders.forEach(function(sender) {\n          sender._pc = pc;\n        });\n        return senders;\n      };\n\n      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n        get: function() {\n          if (this._dtmf === undefined) {\n            if (this.track.kind === 'audio') {\n              this._dtmf = this._pc.createDTMFSender(this.track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function(window) {\n    var URL = window && window.URL;\n\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this._srcObject;\n          },\n          set: function(stream) {\n            var self = this;\n            // Use _srcObject as a private property for this shim\n            this._srcObject = stream;\n            if (this.src) {\n              URL.revokeObjectURL(this.src);\n            }\n\n            if (!stream) {\n              this.src = '';\n              return undefined;\n            }\n            this.src = URL.createObjectURL(stream);\n            // We need to recreate the blob url when a track is added or\n            // removed. Doing it manually since we want to avoid a recursion.\n            stream.addEventListener('addtrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n            stream.addEventListener('removetrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n          }\n        });\n      }\n    }\n  },\n\n  shimAddTrackRemoveTrack: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n    // shim addTrack and removeTrack.\n    if (window.RTCPeerConnection.prototype.addTrack &&\n        browserDetails.version >= 63) {\n      return;\n    }\n\n    // also shim pc.getLocalStreams when addTrack is shimmed\n    // to return the original streams.\n    var origGetLocalStreams = window.RTCPeerConnection.prototype\n        .getLocalStreams;\n    window.RTCPeerConnection.prototype.getLocalStreams = function() {\n      var self = this;\n      var nativeStreams = origGetLocalStreams.apply(this);\n      self._reverseStreams = self._reverseStreams || {};\n      return nativeStreams.map(function(stream) {\n        return self._reverseStreams[stream.id];\n      });\n    };\n\n    var origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function(stream) {\n      var pc = this;\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n\n      stream.getTracks().forEach(function(track) {\n        var alreadyExists = pc.getSenders().find(function(s) {\n          return s.track === track;\n        });\n        if (alreadyExists) {\n          throw new DOMException('Track already exists.',\n              'InvalidAccessError');\n        }\n      });\n      // Add identity mapping for consistency with addTrack.\n      // Unless this is being used with a stream from addTrack.\n      if (!pc._reverseStreams[stream.id]) {\n        var newStream = new window.MediaStream(stream.getTracks());\n        pc._streams[stream.id] = newStream;\n        pc._reverseStreams[newStream.id] = stream;\n        stream = newStream;\n      }\n      origAddStream.apply(pc, [stream]);\n    };\n\n    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream = function(stream) {\n      var pc = this;\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n\n      origRemoveStream.apply(pc, [(pc._streams[stream.id] || stream)]);\n      delete pc._reverseStreams[(pc._streams[stream.id] ?\n          pc._streams[stream.id].id : stream.id)];\n      delete pc._streams[stream.id];\n    };\n\n    window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n      var pc = this;\n      if (pc.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      var streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(function(t) {\n            return t === track;\n          })) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      var alreadyExists = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n      var oldStream = pc._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(function() {\n          pc.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        var newStream = new window.MediaStream([track]);\n        pc._streams[stream.id] = newStream;\n        pc._reverseStreams[newStream.id] = stream;\n        pc.addStream(newStream);\n      }\n      return pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n    };\n\n    // replace the internal stream id with the external one and\n    // vice versa.\n    function replaceInternalStreamId(pc, description) {\n      var sdp = description.sdp;\n      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {\n        var externalStream = pc._reverseStreams[internalId];\n        var internalStream = pc._streams[externalStream.id];\n        sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n            externalStream.id);\n      });\n      return new RTCSessionDescription({\n        type: description.type,\n        sdp: sdp\n      });\n    }\n    function replaceExternalStreamId(pc, description) {\n      var sdp = description.sdp;\n      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {\n        var externalStream = pc._reverseStreams[internalId];\n        var internalStream = pc._streams[externalStream.id];\n        sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n            internalStream.id);\n      });\n      return new RTCSessionDescription({\n        type: description.type,\n        sdp: sdp\n      });\n    }\n    ['createOffer', 'createAnswer'].forEach(function(method) {\n      var nativeMethod = window.RTCPeerConnection.prototype[method];\n      window.RTCPeerConnection.prototype[method] = function() {\n        var pc = this;\n        var args = arguments;\n        var isLegacyCall = arguments.length &&\n            typeof arguments[0] === 'function';\n        if (isLegacyCall) {\n          return nativeMethod.apply(pc, [\n            function(description) {\n              var desc = replaceInternalStreamId(pc, description);\n              args[0].apply(null, [desc]);\n            },\n            function(err) {\n              if (args[1]) {\n                args[1].apply(null, err);\n              }\n            }, arguments[2]\n          ]);\n        }\n        return nativeMethod.apply(pc, arguments)\n        .then(function(description) {\n          return replaceInternalStreamId(pc, description);\n        });\n      };\n    });\n\n    var origSetLocalDescription =\n        window.RTCPeerConnection.prototype.setLocalDescription;\n    window.RTCPeerConnection.prototype.setLocalDescription = function() {\n      var pc = this;\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(pc, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(pc, arguments[0]);\n      return origSetLocalDescription.apply(pc, arguments);\n    };\n\n    // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n    var origLocalDescription = Object.getOwnPropertyDescriptor(\n        window.RTCPeerConnection.prototype, 'localDescription');\n    Object.defineProperty(window.RTCPeerConnection.prototype,\n        'localDescription', {\n          get: function() {\n            var pc = this;\n            var description = origLocalDescription.get.apply(this);\n            if (description.type === '') {\n              return description;\n            }\n            return replaceInternalStreamId(pc, description);\n          }\n        });\n\n    window.RTCPeerConnection.prototype.removeTrack = function(sender) {\n      var pc = this;\n      if (pc.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      var isLocal = sender._pc === pc;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      pc._streams = pc._streams || {};\n      var stream;\n      Object.keys(pc._streams).forEach(function(streamid) {\n        var hasTrack = pc._streams[streamid].getTracks().find(function(track) {\n          return sender.track === track;\n        });\n        if (hasTrack) {\n          stream = pc._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          pc.removeStream(pc._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        pc.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n  },\n\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    // The RTCPeerConnection object.\n    if (!window.RTCPeerConnection) {\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        // Translate iceTransportPolicy to iceTransports,\n        // see https://code.google.com/p/webrtc/issues/detail?id=4869\n        // this was fixed in M56 along with unprefixing RTCPeerConnection.\n        logging('PeerConnection');\n        if (pcConfig && pcConfig.iceTransportPolicy) {\n          pcConfig.iceTransports = pcConfig.iceTransportPolicy;\n        }\n\n        return new window.webkitRTCPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype =\n          window.webkitRTCPeerConnection.prototype;\n      // wrap static methods. Currently just generateCertificate.\n      if (window.webkitRTCPeerConnection.generateCertificate) {\n        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n          get: function() {\n            return window.webkitRTCPeerConnection.generateCertificate;\n          }\n        });\n      }\n    } else {\n      // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n      var OrigPeerConnection = window.RTCPeerConnection;\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        if (pcConfig && pcConfig.iceServers) {\n          var newIceServers = [];\n          for (var i = 0; i < pcConfig.iceServers.length; i++) {\n            var server = pcConfig.iceServers[i];\n            if (!server.hasOwnProperty('urls') &&\n                server.hasOwnProperty('url')) {\n              utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n              server = JSON.parse(JSON.stringify(server));\n              server.urls = server.url;\n              newIceServers.push(server);\n            } else {\n              newIceServers.push(pcConfig.iceServers[i]);\n            }\n          }\n          pcConfig.iceServers = newIceServers;\n        }\n        return new OrigPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n      // wrap static methods. Currently just generateCertificate.\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function() {\n          return OrigPeerConnection.generateCertificate;\n        }\n      });\n    }\n\n    var origGetStats = window.RTCPeerConnection.prototype.getStats;\n    window.RTCPeerConnection.prototype.getStats = function(selector,\n        successCallback, errorCallback) {\n      var self = this;\n      var args = arguments;\n\n      // If selector is a function then we are in the old style stats so just\n      // pass back the original getStats format to avoid breaking old users.\n      if (arguments.length > 0 && typeof selector === 'function') {\n        return origGetStats.apply(this, arguments);\n      }\n\n      // When spec-style getStats is supported, return those when called with\n      // either no arguments or the selector argument is null.\n      if (origGetStats.length === 0 && (arguments.length === 0 ||\n          typeof arguments[0] !== 'function')) {\n        return origGetStats.apply(this, []);\n      }\n\n      var fixChromeStats_ = function(response) {\n        var standardReport = {};\n        var reports = response.result();\n        reports.forEach(function(report) {\n          var standardStats = {\n            id: report.id,\n            timestamp: report.timestamp,\n            type: {\n              localcandidate: 'local-candidate',\n              remotecandidate: 'remote-candidate'\n            }[report.type] || report.type\n          };\n          report.names().forEach(function(name) {\n            standardStats[name] = report.stat(name);\n          });\n          standardReport[standardStats.id] = standardStats;\n        });\n\n        return standardReport;\n      };\n\n      // shim getStats with maplike support\n      var makeMapStats = function(stats) {\n        return new Map(Object.keys(stats).map(function(key) {\n          return [key, stats[key]];\n        }));\n      };\n\n      if (arguments.length >= 2) {\n        var successCallbackWrapper_ = function(response) {\n          args[1](makeMapStats(fixChromeStats_(response)));\n        };\n\n        return origGetStats.apply(this, [successCallbackWrapper_,\n          arguments[0]]);\n      }\n\n      // promise-support\n      return new Promise(function(resolve, reject) {\n        origGetStats.apply(self, [\n          function(response) {\n            resolve(makeMapStats(fixChromeStats_(response)));\n          }, reject]);\n      }).then(successCallback, errorCallback);\n    };\n\n    // add promise support -- natively available in Chrome 51\n    if (browserDetails.version < 51) {\n      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n          .forEach(function(method) {\n            var nativeMethod = window.RTCPeerConnection.prototype[method];\n            window.RTCPeerConnection.prototype[method] = function() {\n              var args = arguments;\n              var self = this;\n              var promise = new Promise(function(resolve, reject) {\n                nativeMethod.apply(self, [args[0], resolve, reject]);\n              });\n              if (args.length < 2) {\n                return promise;\n              }\n              return promise.then(function() {\n                args[1].apply(null, []);\n              },\n              function(err) {\n                if (args.length >= 3) {\n                  args[2].apply(null, [err]);\n                }\n              });\n            };\n          });\n    }\n\n    // promise support for createOffer and createAnswer. Available (without\n    // bugs) since M52: crbug/619289\n    if (browserDetails.version < 52) {\n      ['createOffer', 'createAnswer'].forEach(function(method) {\n        var nativeMethod = window.RTCPeerConnection.prototype[method];\n        window.RTCPeerConnection.prototype[method] = function() {\n          var self = this;\n          if (arguments.length < 1 || (arguments.length === 1 &&\n              typeof arguments[0] === 'object')) {\n            var opts = arguments.length === 1 ? arguments[0] : undefined;\n            return new Promise(function(resolve, reject) {\n              nativeMethod.apply(self, [resolve, reject, opts]);\n            });\n          }\n          return nativeMethod.apply(this, arguments);\n        };\n      });\n    }\n\n    // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = window.RTCPeerConnection.prototype[method];\n          window.RTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null or undefined)\n    var nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate = function() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n};\n\n\n// Expose public methods.\nmodule.exports = {\n  shimMediaStream: chromeShim.shimMediaStream,\n  shimOnTrack: chromeShim.shimOnTrack,\n  shimAddTrackRemoveTrack: chromeShim.shimAddTrackRemoveTrack,\n  shimGetSendersWithDtmf: chromeShim.shimGetSendersWithDtmf,\n  shimSourceObject: chromeShim.shimSourceObject,\n  shimPeerConnection: chromeShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nvar utils = require('../utils.js');\nvar logging = utils.log;\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var browserDetails = utils.detectBrowser(window);\n  var navigator = window && window.navigator;\n\n  var constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    var cc = {};\n    Object.keys(c).forEach(function(key) {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      var oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        var oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(function(mix) {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  var shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      var remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      var face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      var getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        var matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(function(devices) {\n            devices = devices.filter(function(d) {\n              return d.kind === 'videoinput';\n            });\n            var dev = devices.find(function(d) {\n              return matches.some(function(match) {\n                return d.label.toLowerCase().indexOf(match) !== -1;\n              });\n            });\n            if (!dev && devices.length && matches.indexOf('back') !== -1) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  var shimError_ = function(e) {\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        InvalidStateError: 'NotReadableError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotReadableError',\n        MediaDeviceKillSwitchOn: 'NotReadableError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraintName,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, function(c) {\n      navigator.webkitGetUserMedia(c, onSuccess, function(e) {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n\n  navigator.getUserMedia = getUserMedia_;\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      navigator.getUserMedia(constraints, resolve, reject);\n    });\n  };\n\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {\n      getUserMedia: getUserMediaPromise_,\n      enumerateDevices: function() {\n        return new Promise(function(resolve) {\n          var kinds = {audio: 'audioinput', video: 'videoinput'};\n          return window.MediaStreamTrack.getSources(function(devices) {\n            resolve(devices.map(function(device) {\n              return {label: device.label,\n                kind: kinds[device.kind],\n                deviceId: device.id,\n                groupId: ''};\n            }));\n          });\n        });\n      },\n      getSupportedConstraints: function() {\n        return {\n          deviceId: true, echoCancellation: true, facingMode: true,\n          frameRate: true, height: true, width: true\n        };\n      }\n    };\n  }\n\n  // A shim for getUserMedia method on the mediaDevices object.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (!navigator.mediaDevices.getUserMedia) {\n    navigator.mediaDevices.getUserMedia = function(constraints) {\n      return getUserMediaPromise_(constraints);\n    };\n  } else {\n    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n    // function which returns a Promise, it does not accept spec-style\n    // constraints.\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, function(c) {\n        return origGetUserMedia(c).then(function(stream) {\n          if (c.audio && !stream.getAudioTracks().length ||\n              c.video && !stream.getVideoTracks().length) {\n            stream.getTracks().forEach(function(track) {\n              track.stop();\n            });\n            throw new DOMException('', 'NotFoundError');\n          }\n          return stream;\n        }, function(e) {\n          return Promise.reject(shimError_(e));\n        });\n      });\n    };\n  }\n\n  // Dummy devicechange event methods.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {\n    navigator.mediaDevices.addEventListener = function() {\n      logging('Dummy mediaDevices.addEventListener called.');\n    };\n  }\n  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {\n    navigator.mediaDevices.removeEventListener = function() {\n      logging('Dummy mediaDevices.removeEventListener called.');\n    };\n  }\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\nvar shimRTCPeerConnection = require('rtcpeerconnection-shim');\n\nmodule.exports = {\n  shimGetUserMedia: require('./getusermedia'),\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    if (window.RTCIceGatherer) {\n      // ORTC defines an RTCIceCandidate object but no constructor.\n      // Not implemented in Edge.\n      if (!window.RTCIceCandidate) {\n        window.RTCIceCandidate = function(args) {\n          return args;\n        };\n      }\n      // ORTC does not have a session description object but\n      // other browsers (i.e. Chrome) that will support both PC and ORTC\n      // in the future might have this defined already.\n      if (!window.RTCSessionDescription) {\n        window.RTCSessionDescription = function(args) {\n          return args;\n        };\n      }\n      // this adds an additional event listener to MediaStrackTrack that signals\n      // when a tracks enabled property was changed. Workaround for a bug in\n      // addStream, see below. No longer required in 15025+\n      if (browserDetails.version < 15025) {\n        var origMSTEnabled = Object.getOwnPropertyDescriptor(\n            window.MediaStreamTrack.prototype, 'enabled');\n        Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n          set: function(value) {\n            origMSTEnabled.set.call(this, value);\n            var ev = new Event('enabled');\n            ev.enabled = value;\n            this.dispatchEvent(ev);\n          }\n        });\n      }\n    }\n\n    // ORTC defines the DTMF sender a bit different.\n    // https://github.com/w3c/ortc/issues/714\n    if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n        get: function() {\n          if (this._dtmf === undefined) {\n            if (this.track.kind === 'audio') {\n              this._dtmf = new window.RTCDtmfSender(this);\n            } else if (this.track.kind === 'video') {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        }\n      });\n    }\n\n    window.RTCPeerConnection =\n        shimRTCPeerConnection(window, browserDetails.version);\n  },\n  shimReplaceTrack: function(window) {\n    // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n    if (window.RTCRtpSender &&\n        !('replaceTrack' in window.RTCRtpSender.prototype)) {\n      window.RTCRtpSender.prototype.replaceTrack =\n          window.RTCRtpSender.prototype.setTrack;\n    }\n  }\n};\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n}\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function(server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n      var isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(function(url) {\n        var validTurn = url.indexOf('turn:') === 0 &&\n            url.indexOf('transport=udp') !== -1 &&\n            url.indexOf('turn:[') === -1 &&\n            !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n            url.indexOf('?transport=udp') === -1;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n\n// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function(pt, codecs) {\n    pt = parseInt(pt, 10);\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt ||\n          codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec &&\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function(lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n          lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' &&\n            lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec,\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n        rCodec.numChannels = Math.min(lCodec.numChannels,\n            rCodec.numChannels);\n        // push rCodec so we reply with offerer payload type\n        commonCapabilities.codecs.push(rCodec);\n\n        // determine common feedback mechanisms\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n          return false;\n        });\n        // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n        break;\n      }\n    }\n  });\n\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n         i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  });\n\n  // FIXME: fecMechanisms\n  return commonCapabilities;\n}\n\n// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates()\n      .find(function(remoteCandidate) {\n        return candidate.foundation === remoteCandidate.foundation &&\n            candidate.ip === remoteCandidate.ip &&\n            candidate.port === remoteCandidate.port &&\n            candidate.priority === remoteCandidate.priority &&\n            candidate.protocol === remoteCandidate.protocol &&\n            candidate.type === remoteCandidate.type;\n      });\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n  return !alreadyAdded;\n}\n\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name;\n  return e;\n}\n\nmodule.exports = function(window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n        {track: track}));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n        {track: track}));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {receiver: receiver};\n    trackEvent.streams = streams;\n    window.setTimeout(function() {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n        .forEach(function(method) {\n          pc[method] = _eventTarget[method].bind(_eventTarget);\n        });\n\n    this.canTrickleIceCandidates = null;\n\n    this.needNegotiation = false;\n\n    this.localStreams = [];\n    this.remoteStreams = [];\n\n    this.localDescription = null;\n    this.remoteDescription = null;\n\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.iceGatheringState = 'new';\n\n    config = JSON.parse(JSON.stringify(config || {}));\n\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw(makeError('NotSupportedError',\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n    this._iceGatherers = [];\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config;\n\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n    this.transceivers = [];\n\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  // set up event handlers on prototype\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\n    if (this._isClosed) {\n      return;\n    }\n    this.dispatchEvent(event);\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\n    var event = new Event('icegatheringstatechange');\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function() {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function() {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\n    return this.remoteStreams;\n  };\n\n  // internal helper to create a transceiver object.\n  // (whih is not yet the same as the WebRTC 1.0 transceiver)\n  RTCPeerConnection.prototype._createTransceiver = function(kind) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n    this.transceivers.push(transceiver);\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function(s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track &&\n          this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track,\n        transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function(stream) {\n    var pc = this;\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function(track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function(track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n          'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function(t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError',\n          'Sender was not created by this connection.');\n    }\n    var stream = transceiver.stream;\n\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null;\n\n    // remove the stream from the set of local streams\n    var localStreams = this.transceivers.map(function(t) {\n      return t.stream;\n    });\n    if (localStreams.indexOf(stream) === -1 &&\n        this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function(stream) {\n    var pc = this;\n    stream.getTracks().forEach(function(track) {\n      var sender = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpSender;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpReceiver;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\n      usingBundle) {\n    var pc = this;\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state',\n        {value: 'new', writable: true}\n    );\n\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\n      // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n      iceGatherer.state = end ? 'completed' : 'gathering';\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n    iceGatherer.addEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  };\n\n  // start gathering from an RTCIceGatherer.\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n    var bufferedCandidateEvents =\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    iceGatherer.onlocalcandidate = function(evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n      var event = new Event('icecandidate');\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n      var cand = evt.candidate;\n      // Edge emits an empty object for RTCIceCandidateComplete‥\n      var end = !cand || Object.keys(cand).length === 0;\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        }\n        // RTCIceCandidate doesn't have a component, needs to be added\n        cand.component = 1;\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate,\n            SDPUtils.parseCandidate(serializedCandidate));\n        event.candidate.candidate = serializedCandidate;\n      }\n\n      // update local description.\n      var sections = SDPUtils.splitSections(pc.localDescription.sdp);\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex + 1] +=\n            'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex + 1] +=\n            'a=end-of-candidates\\r\\n';\n      }\n      pc.localDescription.sdp = sections.join('');\n      var complete = pc.transceivers.every(function(transceiver) {\n        return transceiver.iceGatherer &&\n            transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n        pc._emitGatheringStateChange();\n      }\n\n      // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n        pc.iceGatheringState = 'complete';\n        pc._emitGatheringStateChange();\n      }\n    };\n\n    // emit already gathered candidates.\n    window.setTimeout(function() {\n      bufferedCandidateEvents.forEach(function(e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  };\n\n  // Create ICE transport and DTLS transport.\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n    iceTransport.onicestatechange = function() {\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n    dtlsTransport.ondtlsstatechange = function() {\n      pc._updateConnectionState();\n    };\n    dtlsTransport.onerror = function() {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state',\n          {value: 'failed', writable: true});\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  };\n\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\n      sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  };\n\n  // Start the RTP Sender and Receiver for a transceiver.\n  RTCPeerConnection.prototype._transceive = function(transceiver,\n      send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities,\n        transceiver.remoteCapabilities);\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpSender.send(params);\n    }\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video'\n          && transceiver.recvEncodingParameters\n          && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function(p) {\n          delete p.rtx;\n        });\n      }\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      }\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set local ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc.remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\n          'a=ice-lite').length > 0;\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities;\n\n        // treat bundle-only as not-rejected.\n        var rejected = SDPUtils.isRejected(mediaSection) &&\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.isDatachannel) {\n          var remoteIceParameters = SDPUtils.getIceParameters(\n              mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n              mediaSection, sessionpart);\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters,\n                  isIceLite ? 'controlling' : 'controlled');\n            }\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          }\n\n          // Calculate intersection of capabilities.\n          var params = getCommonCapabilities(localCapabilities,\n              remoteCapabilities);\n\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n          pc._transceive(transceiver,\n              params.codecs.length > 0,\n              false);\n        }\n      });\n    }\n\n    pc.localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set remote ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function(stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n        'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-options:')[0];\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n          .indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection);\n      // treat bundle-only as not-rejected.\n      var rejected = SDPUtils.isRejected(mediaSection) &&\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n      // Reject datachannels which are not implemented yet.\n      if (kind === 'application' && protocol === 'DTLS/SCTP') {\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          isDatachannel: true\n        };\n        return;\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n\n      var track;\n      // FIXME: ensure the mediaSection has rtcp-mux set.\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n      recvEncodingParameters =\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\n          'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n          .map(function(cand) {\n            return SDPUtils.parseCandidate(cand);\n          })\n          .filter(function(cand) {\n            return cand.component === 1;\n          });\n\n      // Check if we can use BUNDLE and dispose transports.\n      if ((description.type === 'offer' || description.type === 'answer') &&\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\n          pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n        pc.transceivers[sdpMLineIndex].iceGatherer =\n            pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport =\n            pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\n            pc.transceivers[0].dtlsTransport;\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n      }\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] ||\n            pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n              usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(\n              function(codec) {\n                return codec.name !== 'rtx';\n              });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }];\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        var isNewTrack = false;\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver ||\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track;\n            // FIXME: does not work with Plan B.\n            if (remoteMsid && remoteMsid.stream === '-') {\n              // no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n              Object.defineProperty(track, 'id', {\n                get: function() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n              stream = streams.default;\n            }\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\n            var nativeTrack = s.getTracks().find(function(t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters;\n\n        // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n        pc._transceive(pc.transceivers[sdpMLineIndex],\n            false,\n            isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n            recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\n            remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) &&\n              (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters,\n                'controlling');\n          }\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        }\n\n        pc._transceive(transceiver,\n            direction === 'sendrecv' || direction === 'recvonly',\n            direction === 'sendrecv' || direction === 'sendonly');\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        if (rtpReceiver &&\n            (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc.remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n    Object.keys(streams).forEach(function(sid) {\n      var stream = streams[sid];\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function() {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function(item) {\n          var track = item[0];\n          var receiver = item[1];\n          if (stream.id !== item[2].id) {\n            return;\n          }\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function(item) {\n      if (item[2]) {\n        return;\n      }\n      fireAddTrack(pc, item[0], item[1], []);\n    });\n\n    // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n    window.setTimeout(function() {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n      pc.transceivers.forEach(function(transceiver) {\n        if (transceiver.iceTransport &&\n            transceiver.iceTransport.state === 'new' &&\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n              'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function() {\n    this.transceivers.forEach(function(transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    });\n    // FIXME: clean up tracks, local streams, remote streams, etc\n    this._isClosed = true;\n    this._updateSignalingState('closed');\n  };\n\n  // Update the signaling state.\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n    this._dispatchEvent('signalingstatechange', event);\n  };\n\n  // Determine whether to fire the negotiationneeded event.\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\n    var pc = this;\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n    this.needNegotiation = true;\n    window.setTimeout(function() {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  };\n\n  // Update the connection state.\n  RTCPeerConnection.prototype._updateConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      states[transceiver.iceTransport.state]++;\n      states[transceiver.dtlsTransport.state]++;\n    });\n    // ICETransport.completed and connected are the same for this purpose.\n    states.connected += states.completed;\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0 || states.checking > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0 || states.completed > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'video';\n    }).length;\n\n    // Determine number of audio and video tracks we need to send/recv.\n    var offerOptions = arguments[0];\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError(\n            'Legacy mandatory/optional constraints not supported.');\n      }\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function(transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    });\n\n    // Create M-lines for recvonly streams.\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n        numAudioTracks--;\n      }\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n            pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n      // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n      }\n      localCapabilities.codecs.forEach(function(codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' &&\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        }\n      });\n\n      // generate an ssrc now, to be used later in rtpSender.send\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' &&\n            !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\n            transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    });\n\n    // always offer BUNDLE and dispose on return if not supported.\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n          'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer after close'));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    var mediaSectionsInOffer = SDPUtils.splitSections(\n        pc.remoteDescription.sdp).length - 1;\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n      if (transceiver.isDatachannel) {\n        sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n' +\n            'c=IN IP4 0.0.0.0\\r\\n' +\n            'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      }\n\n      // FIXME: look at direction.\n      if (transceiver.stream) {\n        var localTrack;\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n              !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      }\n\n      // Calculate intersection of capabilities.\n      var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities,\n          'answer', transceiver.stream, pc._dtlsRole);\n      if (transceiver.rtcpParameters &&\n          transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n    var pc = this;\n    var sections;\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n        candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    }\n\n    // TODO: needs to go into ops queue.\n    return new Promise(function(resolve, reject) {\n      if (!pc.remoteDescription) {\n        return reject(makeError('InvalidStateError',\n            'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].isDatachannel) {\n            continue;\n          }\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.splitSections(pc.remoteDescription.sdp);\n          sections[j + 1] += 'a=end-of-candidates\\r\\n';\n          pc.remoteDescription.sdp = sections.join('');\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        if (transceiver) {\n          if (transceiver.isDatachannel) {\n            return resolve();\n          }\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          }\n          // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError',\n                  'Can not add ICE candidate'));\n            }\n          }\n\n          // update the remoteDescription.\n          var candidateString = candidate.candidate.trim();\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n          sections = SDPUtils.splitSections(pc.remoteDescription.sdp);\n          sections[sdpMLineIndex + 1] += 'a=' +\n              (cand.type ? candidateString : 'end-of-candidates')\n              + '\\r\\n';\n          pc.remoteDescription.sdp = sections.join('');\n        } else {\n          return reject(makeError('OperationError',\n              'Can not add ICE candidate'));\n        }\n      }\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function() {\n    var promises = [];\n    this.transceivers.forEach(function(transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n          'dtlsTransport'].forEach(function(method) {\n            if (transceiver[method]) {\n              promises.push(transceiver[method].getStats());\n            }\n          });\n    });\n    var fixStatsType = function(stat) {\n      return {\n        inboundrtp: 'inbound-rtp',\n        outboundrtp: 'outbound-rtp',\n        candidatepair: 'candidate-pair',\n        localcandidate: 'local-candidate',\n        remotecandidate: 'remote-candidate'\n      }[stat.type] || stat.type;\n    };\n    return new Promise(function(resolve) {\n      // shim getStats with maplike support\n      var results = new Map();\n      Promise.all(promises).then(function(res) {\n        res.forEach(function(result) {\n          Object.keys(result).forEach(function(id) {\n            result[id].type = fixStatsType(result[id]);\n            results.set(id, result[id]);\n          });\n        });\n        resolve(results);\n      });\n    });\n  };\n\n  // legacy callback shims. Should be moved to adapter.js some days.\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[0] === 'function' ||\n          typeof args[1] === 'function') { // legacy\n        return nativeMethod.apply(this, [arguments[2]])\n        .then(function(description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function(error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function' ||\n          typeof args[2] === 'function') { // legacy\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function(error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n  ['getStats'].forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  return RTCPeerConnection;\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var navigator = window && window.navigator;\n\n  var shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(function(e) {\n      return Promise.reject(shimError_(e));\n    });\n  };\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\n\nvar firefoxShim = {\n  shimOnTrack: function(window) {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n            this.removeEventListener('addstream', this._ontrackpoly);\n          }\n          this.addEventListener('track', this._ontrack = f);\n          this.addEventListener('addstream', this._ontrackpoly = function(e) {\n            e.stream.getTracks().forEach(function(track) {\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = {track: track};\n              event.transceiver = {receiver: event.receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            }.bind(this));\n          }.bind(this));\n        }\n      });\n    }\n    if (typeof window === 'object' && window.RTCTrackEvent &&\n        ('receiver' in window.RTCTrackEvent.prototype) &&\n        !('transceiver' in window.RTCTrackEvent.prototype)) {\n      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n        get: function() {\n          return {receiver: this.receiver};\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function(window) {\n    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this.mozSrcObject;\n          },\n          set: function(stream) {\n            this.mozSrcObject = stream;\n          }\n        });\n      }\n    }\n  },\n\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    if (typeof window !== 'object' || !(window.RTCPeerConnection ||\n        window.mozRTCPeerConnection)) {\n      return; // probably media.peerconnection.enabled=false in about:config\n    }\n    // The RTCPeerConnection object.\n    if (!window.RTCPeerConnection) {\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        if (browserDetails.version < 38) {\n          // .urls is not supported in FF < 38.\n          // create RTCIceServers with a single url.\n          if (pcConfig && pcConfig.iceServers) {\n            var newIceServers = [];\n            for (var i = 0; i < pcConfig.iceServers.length; i++) {\n              var server = pcConfig.iceServers[i];\n              if (server.hasOwnProperty('urls')) {\n                for (var j = 0; j < server.urls.length; j++) {\n                  var newServer = {\n                    url: server.urls[j]\n                  };\n                  if (server.urls[j].indexOf('turn') === 0) {\n                    newServer.username = server.username;\n                    newServer.credential = server.credential;\n                  }\n                  newIceServers.push(newServer);\n                }\n              } else {\n                newIceServers.push(pcConfig.iceServers[i]);\n              }\n            }\n            pcConfig.iceServers = newIceServers;\n          }\n        }\n        return new window.mozRTCPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype =\n          window.mozRTCPeerConnection.prototype;\n\n      // wrap static methods. Currently just generateCertificate.\n      if (window.mozRTCPeerConnection.generateCertificate) {\n        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n          get: function() {\n            return window.mozRTCPeerConnection.generateCertificate;\n          }\n        });\n      }\n\n      window.RTCSessionDescription = window.mozRTCSessionDescription;\n      window.RTCIceCandidate = window.mozRTCIceCandidate;\n    }\n\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = window.RTCPeerConnection.prototype[method];\n          window.RTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null or undefined)\n    var nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate = function() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n\n    // shim getStats with maplike support\n    var makeMapStats = function(stats) {\n      var map = new Map();\n      Object.keys(stats).forEach(function(key) {\n        map.set(key, stats[key]);\n        map[key] = stats[key];\n      });\n      return map;\n    };\n\n    var modernStatsTypes = {\n      inboundrtp: 'inbound-rtp',\n      outboundrtp: 'outbound-rtp',\n      candidatepair: 'candidate-pair',\n      localcandidate: 'local-candidate',\n      remotecandidate: 'remote-candidate'\n    };\n\n    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n    window.RTCPeerConnection.prototype.getStats = function(\n      selector,\n      onSucc,\n      onErr\n    ) {\n      return nativeGetStats.apply(this, [selector || null])\n        .then(function(stats) {\n          if (browserDetails.version < 48) {\n            stats = makeMapStats(stats);\n          }\n          if (browserDetails.version < 53 && !onSucc) {\n            // Shim only promise getStats with spec-hyphens in type names\n            // Leave callback version alone; misc old uses of forEach before Map\n            try {\n              stats.forEach(function(stat) {\n                stat.type = modernStatsTypes[stat.type] || stat.type;\n              });\n            } catch (e) {\n              if (e.name !== 'TypeError') {\n                throw e;\n              }\n              // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n              stats.forEach(function(stat, i) {\n                stats.set(i, Object.assign({}, stat, {\n                  type: modernStatsTypes[stat.type] || stat.type\n                }));\n              });\n            }\n          }\n          return stats;\n        })\n        .then(onSucc, onErr);\n    };\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimOnTrack: firefoxShim.shimOnTrack,\n  shimSourceObject: firefoxShim.shimSourceObject,\n  shimPeerConnection: firefoxShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\nvar logging = utils.log;\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var browserDetails = utils.detectBrowser(window);\n  var navigator = window && window.navigator;\n  var MediaStreamTrack = window && window.MediaStreamTrack;\n\n  var shimError_ = function(e) {\n    return {\n      name: {\n        InternalError: 'NotReadableError',\n        NotSupportedError: 'TypeError',\n        PermissionDeniedError: 'NotAllowedError',\n        SecurityError: 'NotAllowedError'\n      }[e.name] || e.name,\n      message: {\n        'The operation is insecure.': 'The request is not allowed by the ' +\n        'user agent or the platform in the current context.'\n      }[e.message] || e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  // getUserMedia constraints shim.\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    var constraintsToFF37_ = function(c) {\n      if (typeof c !== 'object' || c.require) {\n        return c;\n      }\n      var require = [];\n      Object.keys(c).forEach(function(key) {\n        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n          return;\n        }\n        var r = c[key] = (typeof c[key] === 'object') ?\n            c[key] : {ideal: c[key]};\n        if (r.min !== undefined ||\n            r.max !== undefined || r.exact !== undefined) {\n          require.push(key);\n        }\n        if (r.exact !== undefined) {\n          if (typeof r.exact === 'number') {\n            r. min = r.max = r.exact;\n          } else {\n            c[key] = r.exact;\n          }\n          delete r.exact;\n        }\n        if (r.ideal !== undefined) {\n          c.advanced = c.advanced || [];\n          var oc = {};\n          if (typeof r.ideal === 'number') {\n            oc[key] = {min: r.ideal, max: r.ideal};\n          } else {\n            oc[key] = r.ideal;\n          }\n          c.advanced.push(oc);\n          delete r.ideal;\n          if (!Object.keys(r).length) {\n            delete c[key];\n          }\n        }\n      });\n      if (require.length) {\n        c.require = require;\n      }\n      return c;\n    };\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (browserDetails.version < 38) {\n      logging('spec: ' + JSON.stringify(constraints));\n      if (constraints.audio) {\n        constraints.audio = constraintsToFF37_(constraints.audio);\n      }\n      if (constraints.video) {\n        constraints.video = constraintsToFF37_(constraints.video);\n      }\n      logging('ff37: ' + JSON.stringify(constraints));\n    }\n    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {\n      onError(shimError_(e));\n    });\n  };\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      getUserMedia_(constraints, resolve, reject);\n    });\n  };\n\n  // Shim for mediaDevices on older versions.\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,\n      addEventListener: function() { },\n      removeEventListener: function() { }\n    };\n  }\n  navigator.mediaDevices.enumerateDevices =\n      navigator.mediaDevices.enumerateDevices || function() {\n        return new Promise(function(resolve) {\n          var infos = [\n            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},\n            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}\n          ];\n          resolve(infos);\n        });\n      };\n\n  if (browserDetails.version < 41) {\n    // Work around http://bugzil.la/1169665\n    var orgEnumerateDevices =\n        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);\n    navigator.mediaDevices.enumerateDevices = function() {\n      return orgEnumerateDevices().then(undefined, function(e) {\n        if (e.name === 'NotFoundError') {\n          return [];\n        }\n        throw e;\n      });\n    };\n  }\n  if (browserDetails.version < 49) {\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      return origGetUserMedia(c).then(function(stream) {\n        // Work around https://bugzil.la/802326\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(function(track) {\n            track.stop();\n          });\n          throw new DOMException('The object can not be found here.',\n                                 'NotFoundError');\n        }\n        return stream;\n      }, function(e) {\n        return Promise.reject(shimError_(e));\n      });\n    };\n  }\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    var remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        var obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    if (browserDetails.version < 44) {\n      return getUserMedia_(constraints, onSuccess, onError);\n    }\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nvar utils = require('../utils');\n\nvar safariShim = {\n  // TODO: DrAlex, should be here, double check against LayoutTests\n\n  // TODO: once the back-end for the mac port is done, add.\n  // TODO: check for webkitGTK+\n  // shimPeerConnection: function() { },\n\n  shimLocalStreamsAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getLocalStreams = function() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n    }\n    if (!('getStreamById' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getStreamById = function(id) {\n        var result = null;\n        if (this._localStreams) {\n          this._localStreams.forEach(function(stream) {\n            if (stream.id === id) {\n              result = stream;\n            }\n          });\n        }\n        if (this._remoteStreams) {\n          this._remoteStreams.forEach(function(stream) {\n            if (stream.id === id) {\n              result = stream;\n            }\n          });\n        }\n        return result;\n      };\n    }\n    if (!('addStream' in window.RTCPeerConnection.prototype)) {\n      var _addTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addStream = function(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        if (this._localStreams.indexOf(stream) === -1) {\n          this._localStreams.push(stream);\n        }\n        var self = this;\n        stream.getTracks().forEach(function(track) {\n          _addTrack.call(self, track, stream);\n        });\n      };\n\n      window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n        if (stream) {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (this._localStreams.indexOf(stream) === -1) {\n            this._localStreams.push(stream);\n          }\n        }\n        _addTrack.call(this, track, stream);\n      };\n    }\n    if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.removeStream = function(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        var index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        var self = this;\n        var tracks = stream.getTracks();\n        this.getSenders().forEach(function(sender) {\n          if (tracks.indexOf(sender.track) !== -1) {\n            self.removeTrack(sender);\n          }\n        });\n      };\n    }\n  },\n  shimRemoteStreamsAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getRemoteStreams = function() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n    }\n    if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n        get: function() {\n          return this._onaddstream;\n        },\n        set: function(f) {\n          if (this._onaddstream) {\n            this.removeEventListener('addstream', this._onaddstream);\n            this.removeEventListener('track', this._onaddstreampoly);\n          }\n          this.addEventListener('addstream', this._onaddstream = f);\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            var stream = e.streams[0];\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.indexOf(stream) >= 0) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            var event = new Event('addstream');\n            event.stream = e.streams[0];\n            this.dispatchEvent(event);\n          }.bind(this));\n        }\n      });\n    }\n  },\n  shimCallbacksAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    var prototype = window.RTCPeerConnection.prototype;\n    var createOffer = prototype.createOffer;\n    var createAnswer = prototype.createAnswer;\n    var setLocalDescription = prototype.setLocalDescription;\n    var setRemoteDescription = prototype.setRemoteDescription;\n    var addIceCandidate = prototype.addIceCandidate;\n\n    prototype.createOffer = function(successCallback, failureCallback) {\n      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      var promise = createOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    prototype.createAnswer = function(successCallback, failureCallback) {\n      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      var promise = createAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    var withCallback = function(description, successCallback, failureCallback) {\n      var promise = setLocalDescription.apply(this, [description]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.setLocalDescription = withCallback;\n\n    withCallback = function(description, successCallback, failureCallback) {\n      var promise = setRemoteDescription.apply(this, [description]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.setRemoteDescription = withCallback;\n\n    withCallback = function(candidate, successCallback, failureCallback) {\n      var promise = addIceCandidate.apply(this, [candidate]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.addIceCandidate = withCallback;\n  },\n  shimGetUserMedia: function(window) {\n    var navigator = window && window.navigator;\n\n    if (!navigator.getUserMedia) {\n      if (navigator.webkitGetUserMedia) {\n        navigator.getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n      } else if (navigator.mediaDevices &&\n          navigator.mediaDevices.getUserMedia) {\n        navigator.getUserMedia = function(constraints, cb, errcb) {\n          navigator.mediaDevices.getUserMedia(constraints)\n          .then(cb, errcb);\n        }.bind(navigator);\n      }\n    }\n  },\n  shimRTCIceServerUrls: function(window) {\n    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n    var OrigPeerConnection = window.RTCPeerConnection;\n    window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        var newIceServers = [];\n        for (var i = 0; i < pcConfig.iceServers.length; i++) {\n          var server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n    // wrap static methods. Currently just generateCertificate.\n    if ('generateCertificate' in window.RTCPeerConnection) {\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function() {\n          return OrigPeerConnection.generateCertificate;\n        }\n      });\n    }\n  },\n  shimTrackEventTransceiver: function(window) {\n    // Add event.transceiver member over deprecated event.receiver\n    if (typeof window === 'object' && window.RTCPeerConnection &&\n        ('receiver' in window.RTCTrackEvent.prototype) &&\n        // can't check 'transceiver' in window.RTCTrackEvent.prototype, as it is\n        // defined for some reason even when window.RTCTransceiver is not.\n        !window.RTCTransceiver) {\n      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n        get: function() {\n          return {receiver: this.receiver};\n        }\n      });\n    }\n  },\n\n  shimCreateOfferLegacy: function(window) {\n    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n    window.RTCPeerConnection.prototype.createOffer = function(offerOptions) {\n      var pc = this;\n      if (offerOptions) {\n        var audioTransceiver = pc.getTransceivers().find(function(transceiver) {\n          return transceiver.sender.track &&\n              transceiver.sender.track.kind === 'audio';\n        });\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            audioTransceiver.setDirection('sendonly');\n          } else if (audioTransceiver.direction === 'recvonly') {\n            audioTransceiver.setDirection('inactive');\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          pc.addTransceiver('audio');\n        }\n\n        var videoTransceiver = pc.getTransceivers().find(function(transceiver) {\n          return transceiver.sender.track &&\n              transceiver.sender.track.kind === 'video';\n        });\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            videoTransceiver.setDirection('sendonly');\n          } else if (videoTransceiver.direction === 'recvonly') {\n            videoTransceiver.setDirection('inactive');\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          pc.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(pc, arguments);\n    };\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimCallbacksAPI: safariShim.shimCallbacksAPI,\n  shimLocalStreamsAPI: safariShim.shimLocalStreamsAPI,\n  shimRemoteStreamsAPI: safariShim.shimRemoteStreamsAPI,\n  shimGetUserMedia: safariShim.shimGetUserMedia,\n  shimRTCIceServerUrls: safariShim.shimRTCIceServerUrls,\n  shimTrackEventTransceiver: safariShim.shimTrackEventTransceiver,\n  shimCreateOfferLegacy: safariShim.shimCreateOfferLegacy\n  // TODO\n  // shimPeerConnection: safariShim.shimPeerConnection\n};\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\nvar utils = require('./utils');\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object.\nfunction wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  var proto = window.RTCPeerConnection.prototype;\n  var nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    var wrappedCallback = function(e) {\n      cb(wrapper(e));\n    };\n    this._eventMap = this._eventMap || {};\n    this._eventMap[cb] = wrappedCallback;\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  var nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[cb]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    var unwrappedCb = this._eventMap[cb];\n    delete this._eventMap[cb];\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get: function() {\n      return this['_on' + eventNameToWrap];\n    },\n    set: function(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    }\n  });\n}\n\nmodule.exports = {\n  shimRTCIceCandidate: function(window) {\n    // foundation is arbitrarily chosen as an indicator for full support for\n    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n    if (window.RTCIceCandidate && 'foundation' in\n        window.RTCIceCandidate.prototype) {\n      return;\n    }\n\n    var NativeRTCIceCandidate = window.RTCIceCandidate;\n    window.RTCIceCandidate = function(args) {\n      // Remove the a= which shouldn't be part of the candidate string.\n      if (typeof args === 'object' && args.candidate &&\n          args.candidate.indexOf('a=') === 0) {\n        args = JSON.parse(JSON.stringify(args));\n        args.candidate = args.candidate.substr(2);\n      }\n\n      // Augment the native candidate with the parsed fields.\n      var nativeCandidate = new NativeRTCIceCandidate(args);\n      var parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      var augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    };\n\n    // Hook up the augmented candidate in onicecandidate and\n    // addEventListener('icecandidate', ...)\n    wrapPeerConnectionEvent(window, 'icecandidate', function(e) {\n      if (e.candidate) {\n        Object.defineProperty(e, 'candidate', {\n          value: new window.RTCIceCandidate(e.candidate),\n          writable: 'false'\n        });\n      }\n      return e;\n    });\n  },\n\n  // shimCreateObjectURL must be called before shimSourceObject to avoid loop.\n\n  shimCreateObjectURL: function(window) {\n    var URL = window && window.URL;\n\n    if (!(typeof window === 'object' && window.HTMLMediaElement &&\n          'srcObject' in window.HTMLMediaElement.prototype &&\n        URL.createObjectURL && URL.revokeObjectURL)) {\n      // Only shim CreateObjectURL using srcObject if srcObject exists.\n      return undefined;\n    }\n\n    var nativeCreateObjectURL = URL.createObjectURL.bind(URL);\n    var nativeRevokeObjectURL = URL.revokeObjectURL.bind(URL);\n    var streams = new Map(), newId = 0;\n\n    URL.createObjectURL = function(stream) {\n      if ('getTracks' in stream) {\n        var url = 'polyblob:' + (++newId);\n        streams.set(url, stream);\n        utils.deprecated('URL.createObjectURL(stream)',\n            'elem.srcObject = stream');\n        return url;\n      }\n      return nativeCreateObjectURL(stream);\n    };\n    URL.revokeObjectURL = function(url) {\n      nativeRevokeObjectURL(url);\n      streams.delete(url);\n    };\n\n    var dsc = Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype,\n                                              'src');\n    Object.defineProperty(window.HTMLMediaElement.prototype, 'src', {\n      get: function() {\n        return dsc.get.apply(this);\n      },\n      set: function(url) {\n        this.srcObject = streams.get(url) || null;\n        return dsc.set.apply(this, [url]);\n      }\n    });\n\n    var nativeSetAttribute = window.HTMLMediaElement.prototype.setAttribute;\n    window.HTMLMediaElement.prototype.setAttribute = function() {\n      if (arguments.length === 2 &&\n          ('' + arguments[0]).toLowerCase() === 'src') {\n        this.srcObject = streams.get(arguments[1]) || null;\n      }\n      return nativeSetAttribute.apply(this, arguments);\n    };\n  }\n};\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.Interop = require('./interop');\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global RTCSessionDescription */\n/* global RTCIceCandidate */\n/* jshint -W097 */\n\"use strict\";\n\nvar transform = require('./transform');\nvar arrayEquals = require('./array-equals');\n\n/**\n * Unified Plan mids may be parsed as integers\n */\nfunction midToString(line) {\n    if (typeof line.mid === 'number') {\n        line.mid = line.mid.toString();\n    }\n}\n\n\nfunction Interop() {\n\n    /**\n     * This map holds the most recent Unified Plan offer/answer SDP that was\n     * converted to Plan B, with the SDP type ('offer' or 'answer') as keys and\n     * the SDP string as values.\n     *\n     * @type {{}}\n     */\n    this.cache = {\n        mlB2UMap : {},\n        mlU2BMap : {}\n    };\n}\n\nmodule.exports = Interop;\n\n/**\n * Changes the candidate args to match with the related Unified Plan\n */\nInterop.prototype.candidateToUnifiedPlan = function(candidate) {\n    var cand = new RTCIceCandidate(candidate);\n\n    cand.sdpMLineIndex = this.cache.mlB2UMap[cand.sdpMLineIndex];\n    /* TODO: change sdpMid to (audio|video)-SSRC */\n\n    return cand;\n};\n\n/**\n * Changes the candidate args to match with the related Plan B\n */\nInterop.prototype.candidateToPlanB = function(candidate) {\n    var cand = new RTCIceCandidate(candidate);\n\n    if (cand.sdpMid.indexOf('audio') === 0) {\n      cand.sdpMid = 'audio';\n    } else if (cand.sdpMid.indexOf('video') === 0) {\n      cand.sdpMid = 'video';\n    } else {\n      throw new Error('candidate with ' + cand.sdpMid + ' not allowed');\n    }\n\n    cand.sdpMLineIndex = this.cache.mlU2BMap[cand.sdpMLineIndex];\n\n    return cand;\n};\n\n/**\n * Returns the index of the first m-line with the given media type and with a\n * direction which allows sending, in the last Unified Plan description with\n * type \"answer\" converted to Plan B. Returns {null} if there is no saved\n * answer, or if none of its m-lines with the given type allow sending.\n * @param type the media type (\"audio\" or \"video\").\n * @returns {*}\n */\nInterop.prototype.getFirstSendingIndexFromAnswer = function(type) {\n    if (!this.cache.answer) {\n        return null;\n    }\n\n    var session = transform.parse(this.cache.answer);\n    if (session && session.media && Array.isArray(session.media)){\n        for (var i = 0; i < session.media.length; i++) {\n            if (session.media[i].type == type &&\n                (!session.media[i].direction /* default to sendrecv */ ||\n                    session.media[i].direction === 'sendrecv' ||\n                    session.media[i].direction === 'sendonly')){\n                return i;\n            }\n        }\n    }\n\n    return null;\n};\n\n/**\n * This method transforms a Unified Plan SDP to an equivalent Plan B SDP. A\n * PeerConnection wrapper transforms the SDP to Plan B before passing it to the\n * application.\n *\n * @param desc\n * @returns {*}\n */\nInterop.prototype.toPlanB = function(desc) {\n    var self = this;\n    //#region Preliminary input validation.\n\n    if (typeof desc !== 'object' || desc === null ||\n        typeof desc.sdp !== 'string') {\n        console.warn('An empty description was passed as an argument.');\n        return desc;\n    }\n\n    // Objectify the SDP for easier manipulation.\n    var session = transform.parse(desc.sdp);\n\n    // If the SDP contains no media, there's nothing to transform.\n    if (typeof session.media === 'undefined' ||\n        !Array.isArray(session.media) || session.media.length === 0) {\n        console.warn('The description has no media.');\n        return desc;\n    }\n\n    // Try some heuristics to \"make sure\" this is a Unified Plan SDP. Plan B\n    // SDP has a video, an audio and a data \"channel\" at most.\n    if (session.media.length <= 3 && session.media.every(function(m) {\n            return ['video', 'audio', 'data'].indexOf(m.mid) !== -1;\n        })) {\n        console.warn('This description does not look like Unified Plan.');\n        return desc;\n    }\n\n    //#endregion\n\n    // HACK https://bugzilla.mozilla.org/show_bug.cgi?id=1113443\n    var sdp = desc.sdp;\n    var rewrite = false;\n    for (var i = 0; i < session.media.length; i++) {\n        var uLine = session.media[i];\n        uLine.rtp.forEach(function(rtp) {\n            if (rtp.codec === 'NULL')\n            {\n                rewrite = true;\n                var offer = transform.parse(self.cache.offer);\n                rtp.codec = offer.media[i].rtp[0].codec;\n            }\n        });\n    }\n    if (rewrite) {\n        sdp = transform.write(session);\n    }\n\n    // Unified Plan SDP is our \"precious\". Cache it for later use in the Plan B\n    // -> Unified Plan transformation.\n    this.cache[desc.type] = sdp;\n\n    //#region Convert from Unified Plan to Plan B.\n\n    // We rebuild the session.media array.\n    var media = session.media;\n    session.media = [];\n\n    // Associative array that maps channel types to channel objects for fast\n    // access to channel objects by their type, e.g. type2bl['audio']->channel\n    // obj.\n    var type2bl = {};\n\n    // Used to build the group:BUNDLE value after the channels construction\n    // loop.\n    var types = [];\n\n    // Used to aggregate the directions of the m-lines.\n    var directionResult = {};\n\n    media.forEach(function(uLine) {\n        midToString(uLine);\n        // rtcp-mux is required in the Plan B SDP.\n        if ((typeof uLine.rtcpMux !== 'string' ||\n            uLine.rtcpMux !== 'rtcp-mux') &&\n            uLine.direction !== 'inactive' && uLine.type !== 'application') {\n            throw new Error('Cannot convert to Plan B because m-lines ' +\n                'without the rtcp-mux attribute were found.');\n        }\n\n        // If we don't have a channel for this uLine.type OR the selected is\n        // inactive, then select this uLine as the channel basis.\n        if (typeof type2bl[uLine.type] === 'undefined' ||\n            type2bl[uLine.type].direction === 'inactive') {\n            type2bl[uLine.type] = uLine;\n        }\n    });\n\n    // Implode the Unified Plan m-lines/tracks into Plan B channels.\n    media.forEach(function(uLine) {\n        var type = uLine.type;\n\n        if (type === 'application') {\n            uLine.mid = \"data\";\n            session.media.push(uLine);\n            types.push(uLine.mid);\n            return;\n        }\n\n        // Add sources to the channel and handle a=msid.\n        if (typeof uLine.sources === 'object') {\n            Object.keys(uLine.sources).forEach(function(ssrc) {\n                if (typeof type2bl[type].sources !== 'object')\n                    type2bl[type].sources = {};\n\n                // Assign the sources to the channel.\n                type2bl[type].sources[ssrc] = uLine.sources[ssrc];\n\n                if (typeof uLine.msid !== 'undefined') {\n                    // In Plan B the msid is an SSRC attribute. Also, we don't\n                    // care about the obsolete label and mslabel attributes.\n                    //\n                    // Note that it is not guaranteed that the uLine will\n                    // have an msid. recvonly channels in particular don't have\n                    // one.\n                    type2bl[type].sources[ssrc].msid = uLine.msid;\n                }\n                // NOTE ssrcs in ssrc groups will share msids, as\n                // draft-uberti-rtcweb-plan-00 mandates.\n            });\n        }\n\n        // Add ssrc groups to the channel.\n        if (typeof uLine.ssrcGroups !== 'undefined' &&\n                Array.isArray(uLine.ssrcGroups)) {\n\n            // Create the ssrcGroups array, if it's not defined.\n            if (typeof type2bl[type].ssrcGroups === 'undefined' ||\n                    !Array.isArray(type2bl[type].ssrcGroups)) {\n                type2bl[type].ssrcGroups = [];\n            }\n\n            // Different ssrc may belong to the same group\n            if (!arrayEquals.apply(type2bl[type].ssrcGroups,\n                                   [uLine.ssrcGroups])) {\n                type2bl[type].ssrcGroups\n                    = type2bl[type].ssrcGroups.concat(uLine.ssrcGroups);\n            }\n        }\n\n        var direction = uLine.direction;\n\n        directionResult[type]\n            = (directionResult[type] || 0 /* inactive */)\n                | directionMasks[direction || 'inactive'];\n\n        if (type2bl[type] === uLine) {\n            // Plan B mids are in ['audio', 'video', 'data']\n            uLine.mid = type;\n\n            // Plan B doesn't support/need the bundle-only attribute.\n            delete uLine.bundleOnly;\n\n            // In Plan B the msid is an SSRC attribute.\n            delete uLine.msid;\n\n            if (direction !== 'inactive') {\n              // Used to build the group:BUNDLE value after this loop.\n              types.push(type);\n            }\n\n            // Add the channel to the new media array.\n            session.media.push(uLine);\n        }\n    });\n\n    // We regenerate the BUNDLE group with the new mids.\n    session.groups.some(function(group) {\n        if (group.type === 'BUNDLE') {\n            group.mids = types.join(' ');\n            return true;\n        }\n    });\n\n    // msid semantic\n    session.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n    };\n\n    var resStr = transform.write(session);\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n\n    //#endregion\n};\n\n/**\n * This method transforms a Plan B SDP to an equivalent Unified Plan SDP. A\n * PeerConnection wrapper transforms the SDP to Unified Plan before passing it\n * to FF.\n *\n * @param desc\n * @returns {*}\n */\nInterop.prototype.toUnifiedPlan = function(desc) {\n    var self = this;\n    //#region Preliminary input validation.\n\n    if (typeof desc !== 'object' || desc === null ||\n        typeof desc.sdp !== 'string') {\n        console.warn('An empty description was passed as an argument.');\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    // If the SDP contains no media, there's nothing to transform.\n    if (typeof session.media === 'undefined' ||\n        !Array.isArray(session.media) || session.media.length === 0) {\n        console.warn('The description has no media.');\n        return desc;\n    }\n\n    // Try some heuristics to \"make sure\" this is a Plan B SDP. Plan B SDP has\n    // a video, an audio and a data \"channel\" at most.\n    if (session.media.length > 3 || !session.media.every(function(m) {\n            return ['video', 'audio', 'data'].indexOf(m.mid) !== -1;\n        })) {\n        console.warn('This description does not look like Plan B.');\n        return desc;\n    }\n\n    // Make sure this Plan B SDP can be converted to a Unified Plan SDP.\n    var mids = [];\n    session.media.forEach(function(m) {\n        mids.push(m.mid);\n    });\n\n    var hasBundle = false;\n    if (typeof session.groups !== 'undefined' &&\n        Array.isArray(session.groups)) {\n        hasBundle = session.groups.every(function(g) {\n            return g.type !== 'BUNDLE' ||\n                arrayEquals.apply(g.mids.sort(), [mids.sort()]);\n        });\n    }\n\n    if (!hasBundle) {\n        throw new Error(\"Cannot convert to Unified Plan because m-lines that\" +\n            \" are not bundled were found.\");\n    }\n\n    //#endregion\n\n\n    //#region Convert from Plan B to Unified Plan.\n\n    // Unfortunately, a Plan B offer/answer doesn't have enough information to\n    // rebuild an equivalent Unified Plan offer/answer.\n    //\n    // For example, if this is a local answer (in Unified Plan style) that we\n    // convert to Plan B prior to handing it over to the application (the\n    // PeerConnection wrapper called us, for instance, after a successful\n    // createAnswer), we want to remember the m-line at which we've seen the\n    // (local) SSRC. That's because when the application wants to do call the\n    // SLD method, forcing us to do the inverse transformation (from Plan B to\n    // Unified Plan), we need to know to which m-line to assign the (local)\n    // SSRC. We also need to know all the other m-lines that the original\n    // answer had and include them in the transformed answer as well.\n    //\n    // Another example is if this is a remote offer that we convert to Plan B\n    // prior to giving it to the application, we want to remember the mid at\n    // which we've seen the (remote) SSRC.\n    //\n    // In the iteration that follows, we use the cached Unified Plan (if it\n    // exists) to assign mids to ssrcs.\n\n    var cached;\n    if (typeof this.cache[desc.type] !== 'undefined') {\n        cached = transform.parse(this.cache[desc.type]);\n    }\n\n    var recvonlySsrcs = {\n        audio: {},\n        video: {}\n    };\n\n    // A helper map that sends mids to m-line objects. We use it later to\n    // rebuild the Unified Plan style session.media array.\n    var mid2ul = {};\n    var bIdx = 0;\n    var uIdx = 0;\n\n    session.media.forEach(function(bLine) {\n\n        if ((typeof bLine.rtcpMux !== 'string' ||\n            bLine.rtcpMux !== 'rtcp-mux') &&\n            bLine.direction !== 'inactive' && bLine.type !== 'application') {\n            throw new Error(\"Cannot convert to Unified Plan because m-lines \" +\n                \"without the rtcp-mux attribute were found.\");\n        }\n\n        if (bLine.type === 'application') {\n            var uLineData = null;\n            if (cached && cached.media) {\n                uLineData = cached.media.find(function(uLine) {\n                    return uLine.type === 'application';\n                });\n            }\n            if (uLineData) {\n                mid2ul[uLineData.mid] = uLineData;\n            } else {\n                mid2ul[bLine.mid] = bLine;\n            }\n            return;\n        }\n\n        // With rtcp-mux and bundle all the channels should have the same ICE\n        // stuff.\n        var sources = bLine.sources;\n        var ssrcGroups = bLine.ssrcGroups;\n        var candidates = bLine.candidates;\n        var iceUfrag = bLine.iceUfrag;\n        var icePwd = bLine.icePwd;\n        var fingerprint = bLine.fingerprint;\n        var port = bLine.port;\n\n        // We'll use the \"bLine\" object as a prototype for each new \"mLine\"\n        // that we create, but first we need to clean it up a bit.\n        delete bLine.sources;\n        delete bLine.ssrcGroups;\n        delete bLine.candidates;\n        delete bLine.iceUfrag;\n        delete bLine.icePwd;\n        delete bLine.fingerprint;\n        delete bLine.port;\n        delete bLine.mid;\n\n        // inverted ssrc group map\n        var ssrc2group = {};\n        if (typeof ssrcGroups !== 'undefined' && Array.isArray(ssrcGroups)) {\n            ssrcGroups.forEach(function (ssrcGroup) {\n\n                // TODO(gp) find out how to receive simulcast with FF. For the\n                // time being, hide it.\n                if (ssrcGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                // XXX This might brake if an SSRC is in more than one group\n                // for some reason.\n                if (typeof ssrcGroup.ssrcs !== 'undefined' &&\n                    Array.isArray(ssrcGroup.ssrcs)) {\n                    ssrcGroup.ssrcs.forEach(function (ssrc) {\n                        if (typeof ssrc2group[ssrc] === 'undefined') {\n                            ssrc2group[ssrc] = [];\n                        }\n\n                        ssrc2group[ssrc].push(ssrcGroup);\n                    });\n                }\n            });\n        }\n\n        // ssrc to m-line index.\n        var ssrc2ml = {};\n\n        if (typeof sources === 'object') {\n\n            // Explode the Plan B channel sources with one m-line per source.\n            Object.keys(sources).forEach(function(ssrc) {\n\n                // The (unified) m-line for this SSRC. We either create it from\n                // scratch or, if it's a grouped SSRC, we re-use a related\n                // mline. In other words, if the source is grouped with another\n                // source, put the two together in the same m-line.\n                var uLine;\n\n                // We assume here that we are the answerer in the O/A, so any\n                // offers which we translate come from the remote side, while\n                // answers are local. So the check below is to make that we\n                // handle receive-only SSRCs in a special way only if they come\n                // from the remote side.\n                if (desc.type==='offer') {\n                    // We want to detect SSRCs which are used by a remote peer\n                    // in an m-line with direction=recvonly (i.e. they are\n                    // being used for RTCP only).\n                    // This information would have gotten lost if the remote\n                    // peer used Unified Plan and their local description was\n                    // translated to Plan B. So we use the lack of an MSID\n                    // attribute to deduce a \"receive only\" SSRC.\n                    if (!sources[ssrc].msid) {\n                        recvonlySsrcs[bLine.type][ssrc] = sources[ssrc];\n                        // Receive-only SSRCs must not create new m-lines. We\n                        // will assign them to an existing m-line later.\n                        return;\n                    }\n                }\n\n                if (typeof ssrc2group[ssrc] !== 'undefined' &&\n                    Array.isArray(ssrc2group[ssrc])) {\n                    ssrc2group[ssrc].some(function (ssrcGroup) {\n                        // ssrcGroup.ssrcs *is* an Array, no need to check\n                        // again here.\n                        return ssrcGroup.ssrcs.some(function (related) {\n                            if (typeof ssrc2ml[related] === 'object') {\n                                uLine = ssrc2ml[related];\n                                return true;\n                            }\n                        });\n                    });\n                }\n\n                if (typeof uLine === 'object') {\n                    // the m-line already exists. Just add the source.\n                    uLine.sources[ssrc] = sources[ssrc];\n                    delete sources[ssrc].msid;\n                } else {\n                    // Use the \"bLine\" as a prototype for the \"uLine\".\n                    uLine = Object.create(bLine);\n                    ssrc2ml[ssrc] = uLine;\n\n                    if (typeof sources[ssrc].msid !== 'undefined') {\n                        // Assign the msid of the source to the m-line. Note\n                        // that it is not guaranteed that the source will have\n                        // msid. In particular \"recvonly\" sources don't have an\n                        // msid. Note that \"recvonly\" is a term only defined\n                        // for m-lines.\n                        uLine.msid = sources[ssrc].msid;\n                        delete sources[ssrc].msid;\n                    }\n\n                    // We assign one SSRC per media line.\n                    uLine.sources = {};\n                    uLine.sources[ssrc] = sources[ssrc];\n                    uLine.ssrcGroups = ssrc2group[ssrc];\n\n                    // Use the cached Unified Plan SDP (if it exists) to assign\n                    // SSRCs to mids.\n                    if (typeof cached !== 'undefined' &&\n                        typeof cached.media !== 'undefined' &&\n                        Array.isArray(cached.media)) {\n\n                        cached.media.forEach(function (m) {\n                            if (typeof m.sources === 'object') {\n                                Object.keys(m.sources).forEach(function (s) {\n                                    if (s === ssrc) {\n                                        uLine.mid = m.mid;\n                                    }\n                                });\n                            }\n                        });\n                    }\n\n                    midToString(uLine);\n\n                    if (typeof uLine.mid === 'undefined') {\n\n                        // If this is an SSRC that we see for the first time\n                        // assign it a new mid. This is typically the case when\n                        // this method is called to transform a remote\n                        // description for the first time or when there is a\n                        // new SSRC in the remote description because a new\n                        // peer has joined the conference. Local SSRCs should\n                        // have already been added to the map in the toPlanB\n                        // method.\n                        //\n                        // Because FF generates answers in Unified Plan style,\n                        // we MUST already have a cached answer with all the\n                        // local SSRCs mapped to some m-line/mid.\n\n                        if (desc.type === 'answer') {\n                            throw new Error(\"An unmapped SSRC was found.\");\n                        }\n\n                        uLine.mid = [bLine.type, '-', ssrc].join('');\n                    }\n\n                    // Include the candidates in the 1st media line.\n                    uLine.candidates = candidates;\n                    uLine.iceUfrag = iceUfrag;\n                    uLine.icePwd = icePwd;\n                    uLine.fingerprint = fingerprint;\n                    uLine.port = port;\n\n                    mid2ul[uLine.mid] = uLine;\n\n                    self.cache.mlU2BMap[uIdx] = bIdx;\n                    if (typeof self.cache.mlB2UMap[bIdx] === 'undefined') {\n                      self.cache.mlB2UMap[bIdx] = uIdx;\n                    }\n                    uIdx++;\n                }\n            });\n        }\n\n        bIdx++;\n    });\n\n    // Rebuild the media array in the right order and add the missing mLines\n    // (missing from the Plan B SDP).\n    session.media = [];\n    mids = []; // reuse\n\n    if (desc.type === 'answer') {\n\n        // The media lines in the answer must match the media lines in the\n        // offer. The order is important too. Here we assume that Firefox is\n        // the answerer, so we merely have to use the reconstructed (unified)\n        // answer to update the cached (unified) answer accordingly.\n        //\n        // In the general case, one would have to use the cached (unified)\n        // offer to find the m-lines that are missing from the reconstructed\n        // answer, potentially grabbing them from the cached (unified) answer.\n        // One has to be careful with this approach because inactive m-lines do\n        // not always have an mid, making it tricky (impossible?) to find where\n        // exactly and which m-lines are missing from the reconstructed answer.\n\n        for (var i = 0; i < cached.media.length; i++) {\n            var uLine = cached.media[i];\n            midToString(uLine);\n\n            if (typeof mid2ul[uLine.mid] === 'undefined') {\n\n                // The mid isn't in the reconstructed (unified) answer.\n                // This is either a (unified) m-line containing a remote\n                // track only, or a (unified) m-line containing a remote\n                // track and a local track that has been removed.\n                // In either case, it MUST exist in the cached\n                // (unified) answer.\n                //\n                // In case this is a removed local track, clean-up\n                // the (unified) m-line and make sure it's 'recvonly' or\n                // 'inactive'.\n\n                delete uLine.msid;\n                delete uLine.sources;\n                delete uLine.ssrcGroups;\n                if (!uLine.direction\n                    || uLine.direction === 'sendrecv')\n                    uLine.direction = 'recvonly';\n                else if (uLine.direction === 'sendonly')\n                    uLine.direction = 'inactive';\n            } else {\n                // This is an (unified) m-line/channel that contains a local\n                // track (sendrecv or sendonly channel) or it's a unified\n                // recvonly m-line/channel. In either case, since we're\n                // going from PlanB -> Unified Plan this m-line MUST\n                // exist in the cached answer.\n            }\n\n            session.media.push(uLine);\n            if (typeof uLine.mid === 'string') {\n                // inactive lines don't/may not have an mid.\n                mids.push(uLine.mid);\n            }\n        }\n    } else {\n\n        // SDP offer/answer (and the JSEP spec) forbids removing an m-section\n        // under any circumstances. If we are no longer interested in sending a\n        // track, we just remove the msid and ssrc attributes and set it to\n        // either a=recvonly (as the reofferer, we must use recvonly if the\n        // other side was previously sending on the m-section, but we can also\n        // leave the possibility open if it wasn't previously in use), or\n        // a=inactive.\n\n        if (typeof cached !== 'undefined' &&\n            typeof cached.media !== 'undefined' &&\n            Array.isArray(cached.media)) {\n            cached.media.forEach(function(uLine) {\n                midToString(uLine);\n                mids.push(uLine.mid);\n                if (typeof mid2ul[uLine.mid] !== 'undefined') {\n                    session.media.push(mid2ul[uLine.mid]);\n                } else {\n                    delete uLine.msid;\n                    delete uLine.sources;\n                    delete uLine.ssrcGroups;\n                    if (!uLine.direction\n                        || uLine.direction === 'sendrecv')\n                        uLine.direction = 'recvonly';\n                    if (!uLine.direction\n                        || uLine.direction === 'sendonly')\n                        uLine.direction = 'inactive';\n                    session.media.push(uLine);\n                }\n            });\n        }\n\n        // Add all the remaining (new) m-lines of the transformed SDP.\n        Object.keys(mid2ul).forEach(function(mid) {\n            if (mids.indexOf(mid) === -1) {\n                mids.push(mid);\n                if (mid2ul[mid].direction === 'recvonly') {\n                    // This is a remote recvonly channel. Add its SSRC to the\n                    // appropriate sendrecv or sendonly channel.\n                    // TODO(gp) what if we don't have sendrecv/sendonly\n                    // channel?\n\n                    session.media.some(function (uLine) {\n                        if ((uLine.direction === 'sendrecv' ||\n                            uLine.direction === 'sendonly') &&\n                            uLine.type === mid2ul[mid].type) {\n\n                            // mid2ul[mid] shouldn't have any ssrc-groups\n                            Object.keys(mid2ul[mid].sources).forEach(\n                                function (ssrc) {\n                                uLine.sources[ssrc] =\n                                    mid2ul[mid].sources[ssrc];\n                            });\n\n                            return true;\n                        }\n                    });\n                } else {\n                    session.media.push(mid2ul[mid]);\n                }\n            }\n        });\n    }\n\n    // After we have constructed the Plan Unified m-lines we can figure out\n    // where (in which m-line) to place the 'recvonly SSRCs'.\n    // Note: we assume here that we are the answerer in the O/A, so any offers\n    // which we translate come from the remote side, while answers are local\n    // (and so our last local description is cached as an 'answer').\n    [\"audio\", \"video\"].forEach(function (type) {\n        if (!session || !session.media || !Array.isArray(session.media))\n            return;\n\n        var idx = null;\n        if (Object.keys(recvonlySsrcs[type]).length > 0) {\n            idx = self.getFirstSendingIndexFromAnswer(type);\n            if (idx === null){\n                // If this is the first offer we receive, we don't have a\n                // cached answer. Assume that we will be sending media using\n                // the first m-line for each media type.\n\n                for (var i = 0; i < session.media.length; i++) {\n                    if (session.media[i].type === type) {\n                        idx = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (idx && session.media.length > idx) {\n            var mLine = session.media[idx];\n            Object.keys(recvonlySsrcs[type]).forEach(function(ssrc) {\n                if (mLine.sources && mLine.sources[ssrc]) {\n                    console.warn(\"Replacing an existing SSRC.\");\n                }\n                if (!mLine.sources) {\n                    mLine.sources = {};\n                }\n\n                mLine.sources[ssrc] = recvonlySsrcs[type][ssrc];\n            });\n        }\n    });\n\n    // We regenerate the BUNDLE group (since we regenerated the mids)\n    session.groups.some(function(group) {\n        if (group.type === 'BUNDLE') {\n            group.mids = mids.join(' ');\n            return true;\n        }\n    });\n\n    // msid semantic\n    session.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n    };\n\n    var resStr = transform.write(session);\n\n    // Cache the transformed SDP (Unified Plan) for later re-use in this\n    // function.\n    this.cache[desc.type] = resStr;\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n\n    //#endregion\n};\n\n/**\n * Maps the direction strings to their binary representation. The binary\n * representation of the directions will contain only 2 bits. The least\n * significant bit will indicate the receiving direction and the other bit will\n * indicate the sending direction.\n *\n * @type {Map<string, number>}\n */\nvar directionMasks = {\n    'inactive': 0, // 00\n    'recvonly': 1, // 01\n    'sendonly': 2, // 10\n    'sendrecv': 3  // 11\n};\n\n/**\n * Parses a number into direction string.\n *\n * @param {number} direction - The number to be parsed.\n * @returns {string} - The parsed direction string.\n */\nfunction parseDirection(direction) { // eslint-disable-line no-unused-vars\n    // Filter all other bits except the 2 less significant.\n    var directionMask = direction & 3;\n\n    switch (directionMask) {\n    case 0:\n        return 'inactive';\n    case 1:\n        return 'recvonly';\n    case 2:\n        return 'sendonly';\n    case 3:\n        return 'sendrecv';\n    }\n}\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\n\nexports.write = function(session, opts) {\n\n  if (typeof session !== 'undefined' &&\n      typeof session.media !== 'undefined' &&\n      Array.isArray(session.media)) {\n\n    session.media.forEach(function (mLine) {\n      // expand sources to ssrcs\n      if (typeof mLine.sources !== 'undefined' &&\n        Object.keys(mLine.sources).length !== 0) {\n          mLine.ssrcs = [];\n          Object.keys(mLine.sources).forEach(function (ssrc) {\n            var source = mLine.sources[ssrc];\n            Object.keys(source).forEach(function (attribute) {\n              mLine.ssrcs.push({\n                id: ssrc,\n                attribute: attribute,\n                value: source[attribute]\n              });\n            });\n          });\n          delete mLine.sources;\n        }\n\n      // join ssrcs in ssrc groups\n      if (typeof mLine.ssrcGroups !== 'undefined' &&\n        Array.isArray(mLine.ssrcGroups)) {\n          mLine.ssrcGroups.forEach(function (ssrcGroup) {\n            if (typeof ssrcGroup.ssrcs !== 'undefined' &&\n                Array.isArray(ssrcGroup.ssrcs)) {\n              ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n            }\n          });\n        }\n    });\n  }\n\n  // join group mids\n  if (typeof session !== 'undefined' &&\n      typeof session.groups !== 'undefined' && Array.isArray(session.groups)) {\n\n    session.groups.forEach(function (g) {\n      if (typeof g.mids !== 'undefined' && Array.isArray(g.mids)) {\n        g.mids = g.mids.join(' ');\n      }\n    });\n  }\n\n  return transform.write(session, opts);\n};\n\nexports.parse = function(sdp) {\n  var session = transform.parse(sdp);\n\n  if (typeof session !== 'undefined' && typeof session.media !== 'undefined' &&\n      Array.isArray(session.media)) {\n\n    session.media.forEach(function (mLine) {\n      // group sources attributes by ssrc\n      if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n        mLine.sources = {};\n        mLine.ssrcs.forEach(function (ssrc) {\n          if (!mLine.sources[ssrc.id])\n          mLine.sources[ssrc.id] = {};\n        mLine.sources[ssrc.id][ssrc.attribute] = ssrc.value;\n        });\n\n        delete mLine.ssrcs;\n      }\n\n      // split ssrcs in ssrc groups\n      if (typeof mLine.ssrcGroups !== 'undefined' &&\n        Array.isArray(mLine.ssrcGroups)) {\n          mLine.ssrcGroups.forEach(function (ssrcGroup) {\n            if (typeof ssrcGroup.ssrcs === 'string') {\n              ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n            }\n          });\n        }\n    });\n  }\n  // split group mids\n  if (typeof session !== 'undefined' &&\n      typeof session.groups !== 'undefined' && Array.isArray(session.groups)) {\n\n    session.groups.forEach(function (g) {\n      if (typeof g.mids === 'string') {\n        g.mids = g.mids.split(' ');\n      }\n    });\n  }\n\n  return session;\n};\n\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nmodule.exports = function arrayEquals(array) {\n    // if the other array is a falsy value, return\n    if (!array)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (this.length != array.length)\n        return false;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (this[i] instanceof Array && array[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!arrayEquals.apply(this[i], [array[i]]))\n                return false;\n        } else if (this[i] != array[i]) {\n            // Warning - two different object instances will never be equal:\n            // {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\n\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || !Array.isArray(mLine.invalid)) {\n        return;\n    }\n\n    var i = mLine.invalid.length;\n    while (i--) {\n        if (mLine.invalid[i].value == 'x-google-flag:conference') {\n            mLine.invalid.splice(i, 1);\n        }\n    }\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // If native simulcast is enabled, we must append the x-goog-conference\n        // attribute to the SDP.\n        if (self.ssrcCache.length < 1) {\n            removeGoogConference(mLine);\n        } else {\n            assertGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst TranscriptionService = require('./AbstractTranscriptionService');\nconst Word = require('../word');\nconst audioRecorder = require('./../audioRecorder');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n"],"sourceRoot":""}